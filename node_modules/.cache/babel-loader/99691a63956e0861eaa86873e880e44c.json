{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeView = void 0;\n\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\n\n\nclass BitArrayTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n    this.bitArray = type.tree_toValue(tree.rootNode);\n  }\n\n  get node() {\n    return this.tree.rootNode;\n  } // Wrapped API from BitArray\n\n  /** @see BitArray.uint8Array */\n\n\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n\n\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n\n\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n\n\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit); // Upstream changes\n\n    this.tree.rootNode = this.type.value_toTree(this.bitArray);\n  }\n  /** @see BitArray.mergeOrWith */\n\n\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n\n\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n\n\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n\n\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n\n\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n\n}\n\nexports.BitArrayTreeView = BitArrayTreeView;","map":{"version":3,"sources":["../../src/view/bitArray.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,gBAAb,SAAsC,UAAA,CAAA,QAAtC,CAAyF;AAGvF,EAAA,WAAA,CAAqB,IAArB,EAAgF,IAAhF,EAA0F;AACxF;AADmB,SAAA,IAAA,GAAA,IAAA;AAA2D,SAAA,IAAA,GAAA,IAAA;AAG9E,SAAK,QAAL,GAAgB,IAAI,CAAC,YAAL,CAAkB,IAAI,CAAC,QAAvB,CAAhB;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,IAAL,CAAU,QAAjB;AACD,GAXsF,CAavF;;AAEA;;;AACc,MAAV,UAAU,GAAA;AACZ,WAAO,KAAK,QAAL,CAAc,UAArB;AACD;AAED;;;AACU,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,QAAL,CAAc,MAArB;AACD;AAED;;;AACA,EAAA,GAAG,CAAC,QAAD,EAAiB;AAClB,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,CAAP;AACD;AAED;;;AACA,EAAA,GAAG,CAAC,QAAD,EAAmB,GAAnB,EAA+B;AAChC,SAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,GAA5B,EADgC,CAGhC;;AACA,SAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,IAAL,CAAU,YAAV,CAAuB,KAAK,QAA5B,CAArB;AACD;AAED;;;AACA,EAAA,WAAW,CAAC,SAAD,EAAoB;AAC7B,SAAK,QAAL,CAAc,WAAd,CAA0B,SAA1B;AACD;AAED;;;AACA,EAAA,eAAe,CAAI,MAAJ,EAAe;AAC5B,WAAO,KAAK,QAAL,CAAc,eAAd,CAA8B,MAA9B,CAAP;AACD;AAED;;;AACA,EAAA,iBAAiB,GAAA;AACf,WAAO,KAAK,QAAL,CAAc,iBAAd,EAAP;AACD;AAED;;;AACA,EAAA,gBAAgB,GAAA;AACd,WAAO,KAAK,QAAL,CAAc,gBAAd,EAAP;AACD;AAED;;;AACA,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,QAAL,CAAc,WAAd,EAAP;AACD;;AA7DsF;;AAAzF,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n        this.bitArray = type.tree_toValue(tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n        // Upstream changes\n        this.tree.rootNode = this.type.value_toTree(this.bitArray);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n}\nexports.BitArrayTreeView = BitArrayTreeView;\n//# sourceMappingURL=bitArray.js.map"]},"metadata":{},"sourceType":"script"}