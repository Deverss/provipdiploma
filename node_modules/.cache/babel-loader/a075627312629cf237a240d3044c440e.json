{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\n\nconst helpers_1 = require(\"./helpers\");\n\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n\n  return `0x${i.toString(16)}`;\n};\n\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\n\nconst intToBuffer = function (i) {\n  const hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\n\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\nconst zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nconst setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\nconst setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\n\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\nconst stripZeros = function (a) {\n  let first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nconst unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\n\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\nconst unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\n\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\nconst unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\n\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\nconst toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n    }\n\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\nconst bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\n\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\n\nfunction bufferToBigInt(buf) {\n  const hex = (0, exports.bufferToHex)(buf);\n\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n\n  return BigInt(hex);\n}\n\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\n\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\n\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\nconst bufferToInt = function (buf) {\n  const res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\n\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\nconst fromSigned = function (num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\n\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\nconst toUnsigned = function (num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\n\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\nconst addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\n\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\n\nfunction short(buffer, maxLength = 50) {\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n\n  return bufferStr.slice(0, maxLength) + '…';\n}\n\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\n\nconst toUtf8 = function (hex) {\n  const zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\n\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\nconst baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`;\n  } else if (ba instanceof Array) {\n    const array = [];\n\n    for (let i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n\n    return array;\n  }\n};\n\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\n\nconst validateNoLeadingZeroes = function (values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n    }\n  }\n};\n\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\n\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n\n  return arr.map(a => arrToBufArr(a));\n}\n\nexports.arrToBufArr = arrToBufArr;\n\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? []);\n  }\n\n  return arr.map(a => bufArrToArr(a));\n}\n\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\n\nconst bigIntToHex = num => {\n  return '0x' + num.toString(16);\n};\n\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\n\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\n\nfunction intToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\n\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;","map":{"version":3,"sources":["../src/bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n    const hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n    const buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return ('0x' + stripZeros(a));\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return Buffer.from(n, 'hex');\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n    const hex = (0, exports.bufferToHex)(buf);\n    if (hex === '0x') {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n    return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n    const res = Number(bufferToBigInt(buf));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n    return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n    return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer, maxLength = 50) {\n    const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n    if (bufferStr.length <= maxLength) {\n        return bufferStr;\n    }\n    return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n    const zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\n    }\n    const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n    return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString('hex')}`;\n    }\n    else if (ba instanceof Array) {\n        const array = [];\n        for (let i = 0; i < ba.length; i++) {\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map((a) => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr ?? []);\n    }\n    return arr.map((a) => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}