{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\n\nconst _32n = BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022\n\n\nfunction fromBig(n, le = false) {\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\n\nexports.fromBig = fromBig;\n\nfunction split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n\n  return [Ah, Al];\n}\n\nexports.split = split;\n\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n\nexports.toBig = toBig; // for Shift in [0, 32)\n\nconst shrSH = (h, l, s) => h >>> s;\n\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in [1, 32)\n\n\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\n\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\n\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s; // Right rotate for shift===32 (just swaps l&h)\n\n\nconst rotr32H = (h, l) => l;\n\nconst rotr32L = (h, l) => h; // Left rotate for Shift in [1, 32)\n\n\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s; // JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\n\n\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\n\nexports.add = add; // Addition with more than 2 elements\n\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\n\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\n\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0; // prettier-ignore\n\n\nconst u64 = {\n  fromBig,\n  split,\n  toBig: exports.toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"sources":["src/_u64.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map"]},"metadata":{},"sourceType":"script"}