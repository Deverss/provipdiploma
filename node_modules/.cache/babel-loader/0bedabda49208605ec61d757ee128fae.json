{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusWalletAdapter extends BaseEvmAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName // decimals: decimals || 18,\n\n    };\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        const {\n          chainId: _chainId,\n          blockExplorer,\n          displayName,\n          rpcTarget,\n          ticker,\n          tickerName\n        } = this.chainConfig;\n        const network = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker\n        }; // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n\n        await this.torusInstance.setProvider(_objectSpread({}, network));\n        const updatedChainID = await this.torusInstance.ethereum.request({\n          method: \"eth_chainId\"\n        });\n\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt(this.chainConfig.chainId, 16)) {\n          throw WalletInitializationError.fromCode(5000, `Not connected to correct chainId. Expected: ${this.chainConfig.chainId}, Current: ${updatedChainID}`);\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    await super.disconnect();\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init); // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n\n    this.addChainConfig(chainConfig);\n  }\n\n  async switchChain(params) {\n    var _this$torusInstance;\n\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init); // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n\n}\n\nexport { TorusWalletAdapter };","map":{"version":3,"sources":["../src/torusWalletAdapter.ts"],"names":["TorusWalletAdapter","BaseEvmAdapter","WALLET_ADAPTERS","TORUS_EVM","_defineProperty","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","CONNECTED","torusInstance","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","Number","parseInt","host","networkName","Torus","log","debug","showTorusButton","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","_chainId","setProvider","updatedChainID","ethereum","request","method","fromCode","reconnected","Web3AuthError","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","hideTorusButton","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusWalletAdapter extends BaseEvmAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"torusInstance\", null);\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n    _defineProperty(this, \"initParams\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName\n      // decimals: decimals || 18,\n    };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        const {\n          chainId: _chainId,\n          blockExplorer,\n          displayName,\n          rpcTarget,\n          ticker,\n          tickerName\n        } = this.chainConfig;\n        const network = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider(_objectSpread({}, network));\n        const updatedChainID = await this.torusInstance.ethereum.request({\n          method: \"eth_chainId\"\n        });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt(this.chainConfig.chainId, 16)) {\n          throw WalletInitializationError.fromCode(5000, `Not connected to correct chainId. Expected: ${this.chainConfig.chainId}, Current: ${updatedChainID}`);\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$torusInstance;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\n\nexport { TorusWalletAdapter };\n//# sourceMappingURL=torusEvmAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}