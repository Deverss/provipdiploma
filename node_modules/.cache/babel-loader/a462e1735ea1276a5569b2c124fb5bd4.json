{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletInitializationError, WalletLoginError, isHexStrict, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { getAccountsFromNamespaces, parseAccountId, getChainsFromNamespaces, parseChainId } from '@walletconnect/utils';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { stripHexPrefix, isValidAddress, privateToAddress, addHexPrefix } from '@ethereumjs/util';\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport { Hardfork, Common } from '@ethereumjs/common';\nimport BN from 'bn.js';\n\nfunction ownKeys$6(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$6(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\n\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n} // #region account middlewares\n\n\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$2(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$5(_objectSpread$5({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$5(_objectSpread$5({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId,\n      addChain = true,\n      lookup = true\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    const {\n      rpcTarget,\n      displayName\n    } = currentChainConfig;\n\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget],\n            blockExplorerUrls: [currentChainConfig.blockExplorer],\n            nativeCurrency: {\n              name: currentChainConfig.tickerName,\n              symbol: currentChainConfig.ticker,\n              decimals: currentChainConfig.decimals || 18\n            }\n          }]\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId\n        }]\n      });\n    } catch (error) {\n      log.error(error); // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig) {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const {\n      rpcTarget,\n      displayName\n    } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId,\n          chainName: displayName,\n          rpcUrls: [rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18\n          }\n        }]\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$2({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload.params[0]; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`; // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {}; // Handle rpcUrl update\n\n        this.configure({\n          chainConfig: _objectSpread$5(_objectSpread$5({}, maybeConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl,\n            chainNamespace: CHAIN_NAMESPACES.EIP155\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function getLastActiveSession(signClient) {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n\n  return null;\n}\n\nasync function sendJrpcRequest(signClient, chainId, method, params) {\n  const session = await getLastActiveSession(signClient);\n\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n\n  return signClient.request({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params\n    }\n  });\n}\n\nasync function getAccounts(signClient) {\n  const session = await getLastActiveSession(signClient);\n\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n\n  const accounts = getAccountsFromNamespaces(session.namespaces);\n\n  if (accounts && accounts.length) {\n    return [...new Set(accounts.map(add => {\n      return parseAccountId(add).address;\n    }))];\n  }\n\n  throw new Error(\"Failed to get accounts\");\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector,\n    chainId\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectV2Provider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$4(_objectSpread$4({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$4(_objectSpread$4({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.setupEngine(this.connector);\n  }\n\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n  } // no need to implement this method in wallet connect v2.\n\n\n  async lookupNetwork(_) {\n    return this.config.chainConfig.chainId;\n  }\n\n  async setupEngine(connector) {\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers$1({\n      connector,\n      chainId: numChainId\n    });\n    const jrpcRes = await getAccounts(connector);\n    this.update({\n      accounts: jrpcRes || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  connectedTopic() {\n    var _this$connector, _this$connector$sessi;\n\n    if (!this.connector) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n    if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector$sessi = _this$connector.session) !== null && _this$connector$sessi !== void 0 && _this$connector$sessi.length) {\n      var _this$connector$sessi2; // currently we are supporting only 1 active session\n\n\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return (_this$connector$sessi2 = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi2 === void 0 ? void 0 : _this$connector$sessi2.topic;\n    }\n\n    return undefined;\n  }\n\n  checkIfChainIdAllowed(chainId) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = getChainsFromNamespaces(sessionData.namespaces);\n    let chainAllowed = false;\n\n    for (const chain of allChains) {\n      const parsedId = parseChainId(chain);\n\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n\n    return chainAllowed;\n  }\n\n  checkIfAccountAllowed(address) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = getAccountsFromNamespaces(sessionData.namespaces);\n    let accountAllowed = false;\n\n    for (const account of allAccounts) {\n      var _parsedAccount$addres;\n\n      const parsedAccount = parseAccountId(account);\n\n      if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {\n        accountAllowed = true;\n        break;\n      }\n    }\n\n    return accountAllowed;\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.events.on(\"session_event\", async payload => {\n      log.debug(\"session_event data\", payload);\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const {\n        event\n      } = payload.params;\n      const {\n        name,\n        data\n      } = event || {}; // Check if accounts changed and trigger event\n\n      if (name === \"accountsChanged\" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data\n        });\n        this.provider.emit(\"accountsChanged\", data);\n      }\n\n      if (event.name === \"chainChanged\") {\n        const {\n          chainId: connectedChainId,\n          rpcUrl\n        } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return; // Check if chainId changed and trigger event\n\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {}; // Handle rpcUrl update\n\n          this.configure({\n            chainConfig: _objectSpread$4(_objectSpread$4({}, maybeConfig), {}, {\n              chainId: connectedHexChainId,\n              rpcTarget: rpcUrl,\n              chainNamespace: CHAIN_NAMESPACES.EIP155\n            })\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectV2Provider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectV2Provider({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n}); // Big Number Constants\n\n\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\"); // Setter Maps\n\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16),\n  dec: n => new BigNumber(n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new BigNumber(n).toString(10)\n};\n\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n\n  return convertedValue;\n};\n\nconst conversionUtil = (value, _ref) => {\n  let {\n    fromNumericBase = \"hex\",\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals\n  } = _ref;\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\n\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await get(url);\n\n  const normalizedEstimates = _objectSpread$3(_objectSpread$3({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: _objectSpread$3(_objectSpread$3({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: _objectSpread$3(_objectSpread$3({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: _objectSpread$3(_objectSpread$3({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n\n  return normalizedEstimates;\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\n\n\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await get(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\n\nconst validateTypedMessageParams = (parameters, activeChainId) => {\n  var _data$domain;\n\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    let data = null;\n    let chainId = null;\n\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = (_data$domain = data.domain) === null || _data$domain === void 0 ? void 0 : _data$domain.chainId;\n\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n\n        break;\n\n      default:\n        assert.fail(`Unknown typed data version \"${parameters.version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    txFormatter,\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n\n      const params = _objectSpread$2(_objectSpread$2({}, msgParams), {}, {\n        version: SignTypedDataVersion.V1\n      });\n\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\n\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TransactionFormatter {\n  constructor(_ref) {\n    let {\n      getProviderEngineProxy\n    } = _ref;\n\n    _defineProperty(this, \"chainConfig\", null);\n\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\",\n      params: []\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = _objectSpread$1({}, txParams);\n\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas; // if gas is not provided explicitly, estimate it.\n\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      } // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    } // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n\n\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);\n      }\n    }\n\n    return gasData;\n  }\n\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n    };\n  }\n\n  async estimateTxGas(txMeta) {\n    const txParams = _objectSpread$1({}, txMeta); // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n\n\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    }); // fallback to block gasLimit\n\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n    }\n\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n    let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier); // if initialGasLimit is above blockGasLimit, dont modify it\n\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn); // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn); // otherwise use blockGasLimit\n\n    return bnToHex(upperGasLimitBn);\n  }\n\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        log.warn(error);\n      }\n\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory(_objectSpread$1({}, txParams));\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21000; // This is a standard ether simple send, gas requirement is exactly 21k\n\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams); // add additional gas buffer to our estimation for safety\n\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n\n      this._providerEngineProxy.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, TransactionFormatter, WalletConnectProvider, WalletConnectV2Provider, getProviderHandlers };","map":{"version":3,"sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectUtils.ts","../src/providers/injectedProviders/WalletConnectProvider.ts","../src/providers/injectedProviders/walletConnectV2Utils.ts","../src/providers/injectedProviders/WalletConnectV2Provider.ts","../src/providers/converter.ts","../src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/utils.ts","../src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../src/providers/privateKeyProviders/TransactionFormatter/index.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"names":["resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","ethErrors","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","WalletConnectProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","skipLookupNetwork","_defineProperty","providerFactory","setupProvider","enable","provider","custom","code","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","getChainConfig","update","displayName","sendCustomRequest","chainName","blockExplorerUrls","blockExplorer","name","tickerName","symbol","ticker","decimals","error","log","configure","lookupNetwork","WalletInitializationError","notReady","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","rpcConnectionError","emit","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","getLastActiveSession","signClient","session","lastKeyIndex","keys","get","sendJrpcRequest","disconnected","topic","getAccountsFromNamespaces","namespaces","Set","add","parseAccountId","methodRes","WalletConnectV2Provider","numChainId","parseInt","jrpcRes","chainSwitchMiddleware","getChainSwitchMiddleware","chainSwitchHandlers","connectedTopic","checkIfChainIdAllowed","sessionData","allChains","getChainsFromNamespaces","chainAllowed","chain","parsedId","parseChainId","Number","reference","checkIfAccountAllowed","allAccounts","accountAllowed","account","parsedAccount","events","debug","event","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","stripHexPrefix","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","assert","ok","isValidAddress","SignTypedDataVersion","V1","doesNotThrow","JSON","parse","Array","isArray","typedSignatureHash","V3","V4","primaryType","types","validation","jsonschema","validate","TYPED_MESSAGE_SCHEMA","properties","strictEqual","errors","domain","isNaN","fail","invalidInput","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","finalChainId","info","getEncryptionPublicKey","stripped","buff","decrypted","decrypt","encryptedData","a","b","lt","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","BN","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","hardfork","Hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","Common","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","bnLessThan","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","getAccountMiddleware","existingKey","network","chainDisconnected","accountHandlers"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletInitializationError, WalletLoginError, isHexStrict, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { getAccountsFromNamespaces, parseAccountId, getChainsFromNamespaces, parseChainId } from '@walletconnect/utils';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { stripHexPrefix, isValidAddress, privateToAddress, addHexPrefix } from '@ethereumjs/util';\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport { Hardfork, Common } from '@ethereumjs/common';\nimport BN from 'bn.js';\n\nfunction ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n  //\n  // utility\n  //\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`\n    });\n  }\n  //\n  // account lookups\n  //\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n  //\n  // transaction signatures\n  //\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n  //\n  // message signatures\n  //\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    // process normally\n    const firstParam = req.params[0];\n    const secondParam = req.params[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams = req.params[2] || {};\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address, message;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n    const msgParams = _objectSpread$6(_objectSpread$6({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n    res.result = processDecryptMessage(msgParams, req);\n  }\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n  async function addNewChain(req, res) {\n    var _req$params;\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req, res) {\n    var _req$params2;\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\n// #region account middlewares\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n  async function updateAccount(req, res) {\n    var _req$params3;\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n}\n// #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$2(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async msgParams => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$5(_objectSpread$5({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$5(_objectSpread$5({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n    _defineProperty(this, \"connector\", null);\n    this.connector = connector || null;\n  }\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n  async switchChain(_ref2) {\n    let {\n      chainId,\n      addChain = true,\n      lookup = true\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    const {\n      rpcTarget,\n      displayName\n    } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget],\n            blockExplorerUrls: [currentChainConfig.blockExplorer],\n            nativeCurrency: {\n              name: currentChainConfig.tickerName,\n              symbol: currentChainConfig.ticker,\n              decimals: currentChainConfig.decimals || 18\n            }\n          }]\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId\n        }]\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n  async addChain(chainConfig) {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const {\n      rpcTarget,\n      displayName\n    } = chainConfig;\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId,\n          chainName: displayName,\n          rpcUrls: [rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18\n          }\n        }]\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$2({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: _objectSpread$5(_objectSpread$5({}, maybeConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl,\n            chainNamespace: CHAIN_NAMESPACES.EIP155\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function getLastActiveSession(signClient) {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n  return null;\n}\nasync function sendJrpcRequest(signClient, chainId, method, params) {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n  return signClient.request({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params\n    }\n  });\n}\nasync function getAccounts(signClient) {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw ethErrors.provider.disconnected();\n  }\n  const accounts = getAccountsFromNamespaces(session.namespaces);\n  if (accounts && accounts.length) {\n    return [...new Set(accounts.map(add => {\n      return parseAccountId(add).address;\n    }))];\n  }\n  throw new Error(\"Failed to get accounts\");\n}\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector,\n    chainId\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass WalletConnectV2Provider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$4(_objectSpread$4({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$4(_objectSpread$4({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n    _defineProperty(this, \"connector\", null);\n    this.connector = connector || null;\n  }\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.setupEngine(this.connector);\n  }\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n  }\n  // no need to implement this method in wallet connect v2.\n  async lookupNetwork(_) {\n    return this.config.chainConfig.chainId;\n  }\n  async setupEngine(connector) {\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers$1({\n      connector,\n      chainId: numChainId\n    });\n    const jrpcRes = await getAccounts(connector);\n    this.update({\n      accounts: jrpcRes || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  connectedTopic() {\n    var _this$connector, _this$connector$sessi;\n    if (!this.connector) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector$sessi = _this$connector.session) !== null && _this$connector$sessi !== void 0 && _this$connector$sessi.length) {\n      var _this$connector$sessi2;\n      // currently we are supporting only 1 active session\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return (_this$connector$sessi2 = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi2 === void 0 ? void 0 : _this$connector$sessi2.topic;\n    }\n    return undefined;\n  }\n  checkIfChainIdAllowed(chainId) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = getChainsFromNamespaces(sessionData.namespaces);\n    let chainAllowed = false;\n    for (const chain of allChains) {\n      const parsedId = parseChainId(chain);\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n    return chainAllowed;\n  }\n  checkIfAccountAllowed(address) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = getAccountsFromNamespaces(sessionData.namespaces);\n    let accountAllowed = false;\n    for (const account of allAccounts) {\n      var _parsedAccount$addres;\n      const parsedAccount = parseAccountId(account);\n      if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {\n        accountAllowed = true;\n        break;\n      }\n    }\n    return accountAllowed;\n  }\n  async onConnectorStateUpdate(connector) {\n    connector.events.on(\"session_event\", async payload => {\n      log.debug(\"session_event data\", payload);\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const {\n        event\n      } = payload.params;\n      const {\n        name,\n        data\n      } = event || {};\n      // Check if accounts changed and trigger event\n      if (name === \"accountsChanged\" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data\n        });\n        this.provider.emit(\"accountsChanged\", data);\n      }\n      if (event.name === \"chainChanged\") {\n        const {\n          chainId: connectedChainId,\n          rpcUrl\n        } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n        // Check if chainId changed and trigger event\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n          // Handle rpcUrl update\n          this.configure({\n            chainConfig: _objectSpread$4(_objectSpread$4({}, maybeConfig), {}, {\n              chainId: connectedHexChainId,\n              rpcTarget: rpcUrl,\n              chainNamespace: CHAIN_NAMESPACES.EIP155\n            })\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n}\n_defineProperty(WalletConnectV2Provider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectV2Provider({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n// Setter Maps\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16),\n  dec: n => new BigNumber(n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new BigNumber(n).toString(10)\n};\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\nconst conversionUtil = (value, _ref) => {\n  let {\n    fromNumericBase = \"hex\",\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals\n  } = _ref;\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await get(url);\n  const normalizedEstimates = _objectSpread$3(_objectSpread$3({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: _objectSpread$3(_objectSpread$3({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: _objectSpread$3(_objectSpread$3({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: _objectSpread$3(_objectSpread$3({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n  return normalizedEstimates;\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await get(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\nconst validateTypedMessageParams = (parameters, activeChainId) => {\n  var _data$domain;\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    let data = null;\n    let chainId = null;\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = (_data$domain = data.domain) === null || _data$domain === void 0 ? void 0 : _data$domain.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${parameters.version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\nfunction getProviderHandlers(_ref) {\n  let {\n    txFormatter,\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = _objectSpread$2(_objectSpread$2({}, msgParams), {}, {\n        version: SignTypedDataVersion.V1\n      });\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TransactionFormatter {\n  constructor(_ref) {\n    let {\n      getProviderEngineProxy\n    } = _ref;\n    _defineProperty(this, \"chainConfig\", null);\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\",\n      params: []\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return Common.custom(customChainParams);\n  }\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const clonedTxParams = _objectSpread$1({}, txParams);\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);\n      }\n    }\n    return gasData;\n  }\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n    };\n  }\n  async estimateTxGas(txMeta) {\n    const txParams = _objectSpread$1({}, txMeta);\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n    }\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n    let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory(_objectSpread$1({}, txParams));\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n      const TWENTY_ONE_THOUSAND = 21000;\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams);\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(privKey) {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", {\n        chainId\n      });\n    }\n    this.update({\n      chainId\n    });\n    return network;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, TransactionFormatter, WalletConnectProvider, WalletConnectV2Provider, getProviderHandlers };\n//# sourceMappingURL=ethereumProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}