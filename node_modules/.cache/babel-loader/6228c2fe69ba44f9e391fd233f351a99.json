{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schnorr = exports.Signature = exports.Point = exports.CURVE = exports.utils = exports.getSharedSecret = exports.recoverPublicKey = exports.verify = exports.signSync = exports.sign = exports.getPublicKey = void 0;\n\nconst hmac_1 = require(\"@noble/hashes/hmac\");\n\nconst sha256_1 = require(\"@noble/hashes/sha256\");\n\nconst secp256k1_1 = require(\"@noble/secp256k1\");\n\nvar secp256k1_2 = require(\"@noble/secp256k1\");\n\nObject.defineProperty(exports, \"getPublicKey\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.getPublicKey;\n  }\n});\nObject.defineProperty(exports, \"sign\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.sign;\n  }\n});\nObject.defineProperty(exports, \"signSync\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.signSync;\n  }\n});\nObject.defineProperty(exports, \"verify\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.verify;\n  }\n});\nObject.defineProperty(exports, \"recoverPublicKey\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.recoverPublicKey;\n  }\n});\nObject.defineProperty(exports, \"getSharedSecret\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.getSharedSecret;\n  }\n});\nObject.defineProperty(exports, \"utils\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.utils;\n  }\n});\nObject.defineProperty(exports, \"CURVE\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.CURVE;\n  }\n});\nObject.defineProperty(exports, \"Point\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.Point;\n  }\n});\nObject.defineProperty(exports, \"Signature\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.Signature;\n  }\n});\nObject.defineProperty(exports, \"schnorr\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.schnorr;\n  }\n}); // Enable sync API for noble-secp256k1\n\nsecp256k1_1.utils.hmacSha256Sync = (key, ...messages) => {\n  const h = hmac_1.hmac.create(sha256_1.sha256, key);\n  messages.forEach(msg => h.update(msg));\n  return h.digest();\n};","map":{"version":3,"sources":["/Users/dev3rs/provipdiploma/node_modules/ethereum-cryptography/secp256k1.js"],"names":["Object","defineProperty","exports","value","schnorr","Signature","Point","CURVE","utils","getSharedSecret","recoverPublicKey","verify","signSync","sign","getPublicKey","hmac_1","require","sha256_1","secp256k1_1","secp256k1_2","enumerable","get","hmacSha256Sync","key","messages","h","hmac","create","sha256","forEach","msg","update","digest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.schnorr = exports.Signature = exports.Point = exports.CURVE = exports.utils = exports.getSharedSecret = exports.recoverPublicKey = exports.verify = exports.signSync = exports.sign = exports.getPublicKey = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst secp256k1_1 = require(\"@noble/secp256k1\");\nvar secp256k1_2 = require(\"@noble/secp256k1\");\nObject.defineProperty(exports, \"getPublicKey\", { enumerable: true, get: function () { return secp256k1_2.getPublicKey; } });\nObject.defineProperty(exports, \"sign\", { enumerable: true, get: function () { return secp256k1_2.sign; } });\nObject.defineProperty(exports, \"signSync\", { enumerable: true, get: function () { return secp256k1_2.signSync; } });\nObject.defineProperty(exports, \"verify\", { enumerable: true, get: function () { return secp256k1_2.verify; } });\nObject.defineProperty(exports, \"recoverPublicKey\", { enumerable: true, get: function () { return secp256k1_2.recoverPublicKey; } });\nObject.defineProperty(exports, \"getSharedSecret\", { enumerable: true, get: function () { return secp256k1_2.getSharedSecret; } });\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return secp256k1_2.utils; } });\nObject.defineProperty(exports, \"CURVE\", { enumerable: true, get: function () { return secp256k1_2.CURVE; } });\nObject.defineProperty(exports, \"Point\", { enumerable: true, get: function () { return secp256k1_2.Point; } });\nObject.defineProperty(exports, \"Signature\", { enumerable: true, get: function () { return secp256k1_2.Signature; } });\nObject.defineProperty(exports, \"schnorr\", { enumerable: true, get: function () { return secp256k1_2.schnorr; } });\n// Enable sync API for noble-secp256k1\nsecp256k1_1.utils.hmacSha256Sync = (key, ...messages) => {\n    const h = hmac_1.hmac.create(sha256_1.sha256, key);\n    messages.forEach(msg => h.update(msg));\n    return h.digest();\n};\n"]},"metadata":{},"sourceType":"script"}