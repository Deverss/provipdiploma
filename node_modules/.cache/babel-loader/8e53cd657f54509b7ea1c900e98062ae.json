{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zeroNode = void 0;\n\nconst node_1 = require(\"./node\");\n\nconst zeroes = [node_1.LeafNode.fromZero()];\n/**\n * Return the `Node` at a specified height from the merkle tree made of \"zero data\"\n * ```\n *           ...\n *          /\n *         x           <- height 2\n *      /     \\\n *     x       x       <- height 1\n *   /  \\      /  \\\n * 0x0  0x0  0x0  0x0  <- height 0\n * ```\n */\n\nfunction zeroNode(height) {\n  if (height >= zeroes.length) {\n    for (let i = zeroes.length; i <= height; i++) {\n      zeroes[i] = new node_1.BranchNode(zeroes[i - 1], zeroes[i - 1]);\n    }\n  }\n\n  return zeroes[height];\n}\n\nexports.zeroNode = zeroNode;","map":{"version":3,"sources":["/Users/dev3rs/provipdiploma/node_modules/@chainsafe/persistent-merkle-tree/lib/zeroNode.js"],"names":["Object","defineProperty","exports","value","zeroNode","node_1","require","zeroes","LeafNode","fromZero","height","length","i","BranchNode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,MAAM,GAAG,CAACF,MAAM,CAACG,QAAP,CAAgBC,QAAhB,EAAD,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASL,QAAT,CAAkBM,MAAlB,EAA0B;AACtB,MAAIA,MAAM,IAAIH,MAAM,CAACI,MAArB,EAA6B;AACzB,SAAK,IAAIC,CAAC,GAAGL,MAAM,CAACI,MAApB,EAA4BC,CAAC,IAAIF,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;AAC1CL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,IAAIP,MAAM,CAACQ,UAAX,CAAsBN,MAAM,CAACK,CAAC,GAAG,CAAL,CAA5B,EAAqCL,MAAM,CAACK,CAAC,GAAG,CAAL,CAA3C,CAAZ;AACH;AACJ;;AACD,SAAOL,MAAM,CAACG,MAAD,CAAb;AACH;;AACDR,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.zeroNode = void 0;\nconst node_1 = require(\"./node\");\nconst zeroes = [node_1.LeafNode.fromZero()];\n/**\n * Return the `Node` at a specified height from the merkle tree made of \"zero data\"\n * ```\n *           ...\n *          /\n *         x           <- height 2\n *      /     \\\n *     x       x       <- height 1\n *   /  \\      /  \\\n * 0x0  0x0  0x0  0x0  <- height 0\n * ```\n */\nfunction zeroNode(height) {\n    if (height >= zeroes.length) {\n        for (let i = zeroes.length; i <= height; i++) {\n            zeroes[i] = new node_1.BranchNode(zeroes[i - 1], zeroes[i - 1]);\n        }\n    }\n    return zeroes[height];\n}\nexports.zeroNode = zeroNode;\n"]},"metadata":{},"sourceType":"script"}