{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst wasm_1 = require(\"./wasm\");\n/**\n * Class based SHA256\n */\n\n\nclass SHA256 {\n  constructor() {\n    this.ctx = wasm_1.newInstance();\n    this.wasmInputValue = this.ctx.input.value;\n    this.wasmOutputValue = this.ctx.output.value;\n    this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n    this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n  }\n\n  init() {\n    this.ctx.init();\n    return this;\n  }\n\n  update(data) {\n    const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n\n    if (data.length > INPUT_LENGTH) {\n      for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n        const sliced = data.slice(i, i + INPUT_LENGTH);\n        this.uint8InputArray.set(sliced);\n        this.ctx.update(this.wasmInputValue, sliced.length);\n      }\n    } else {\n      this.uint8InputArray.set(data);\n      this.ctx.update(this.wasmInputValue, data.length);\n    }\n\n    return this;\n  }\n\n  final() {\n    this.ctx.final(this.wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(this.uint8OutputArray);\n    return output;\n  }\n\n}\n\nexports.default = SHA256;","map":{"version":3,"sources":["../src/sha256.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,MAArB,CAA2B;AAOzB,EAAA,WAAA,GAAA;AACE,SAAK,GAAL,GAAW,MAAA,CAAA,WAAA,EAAX;AACA,SAAK,cAAL,GAAsB,KAAK,GAAL,CAAS,KAAT,CAAe,KAArC;AACA,SAAK,eAAL,GAAuB,KAAK,GAAL,CAAS,MAAT,CAAgB,KAAvC;AACA,SAAK,eAAL,GAAuB,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,MAAT,CAAgB,MAA/B,EAAuC,KAAK,cAA5C,EAA4D,KAAK,GAAL,CAAS,YAArE,CAAvB;AACA,SAAK,gBAAL,GAAwB,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,MAAT,CAAgB,MAA/B,EAAuC,KAAK,eAA5C,EAA6D,EAA7D,CAAxB;AACD;;AAED,EAAA,IAAI,GAAA;AACF,SAAK,GAAL,CAAS,IAAT;AACA,WAAO,IAAP;AACD;;AAED,EAAA,MAAM,CAAC,IAAD,EAAiB;AACrB,UAAM,YAAY,GAAG,KAAK,GAAL,CAAS,YAA9B;;AACA,QAAI,IAAI,CAAC,MAAL,GAAc,YAAlB,EAAgC;AAC9B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,IAAI,YAAtC,EAAoD;AAClD,cAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAC,GAAG,YAAlB,CAAf;AACA,aAAK,eAAL,CAAqB,GAArB,CAAyB,MAAzB;AACA,aAAK,GAAL,CAAS,MAAT,CAAgB,KAAK,cAArB,EAAqC,MAAM,CAAC,MAA5C;AACD;AACF,KAND,MAMO;AACL,WAAK,eAAL,CAAqB,GAArB,CAAyB,IAAzB;AACA,WAAK,GAAL,CAAS,MAAT,CAAgB,KAAK,cAArB,EAAqC,IAAI,CAAC,MAA1C;AACD;;AACD,WAAO,IAAP;AACD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,GAAL,CAAS,KAAT,CAAe,KAAK,eAApB;AACA,UAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAf;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,KAAK,gBAAhB;AACA,WAAO,MAAP;AACD;;AAxCwB;;AAA3B,OAAA,CAAA,OAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst wasm_1 = require(\"./wasm\");\n/**\n * Class based SHA256\n */\nclass SHA256 {\n    constructor() {\n        this.ctx = wasm_1.newInstance();\n        this.wasmInputValue = this.ctx.input.value;\n        this.wasmOutputValue = this.ctx.output.value;\n        this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n        this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n    }\n    init() {\n        this.ctx.init();\n        return this;\n    }\n    update(data) {\n        const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n        if (data.length > INPUT_LENGTH) {\n            for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n                const sliced = data.slice(i, i + INPUT_LENGTH);\n                this.uint8InputArray.set(sliced);\n                this.ctx.update(this.wasmInputValue, sliced.length);\n            }\n        }\n        else {\n            this.uint8InputArray.set(data);\n            this.ctx.update(this.wasmInputValue, data.length);\n        }\n        return this;\n    }\n    final() {\n        this.ctx.final(this.wasmOutputValue);\n        const output = new Uint8Array(32);\n        output.set(this.uint8OutputArray);\n        return output;\n    }\n}\nexports.default = SHA256;\n//# sourceMappingURL=sha256.js.map"]},"metadata":{},"sourceType":"script"}