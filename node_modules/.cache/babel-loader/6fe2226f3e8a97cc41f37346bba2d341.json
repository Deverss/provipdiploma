{"ast":null,"code":"import { BaseAdapter, getChainConfig, CHAIN_NAMESPACES, ADAPTER_STATUS, WalletLoginError, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken, ADAPTER_EVENTS } from '@web3auth/base';\nimport bs58 from 'bs58';\n\nclass BaseSolanaAdapter extends BaseAdapter {\n  async init(_) {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser() {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\"\n        }\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, bs58.encode(signedMessage), challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession() {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect() {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n}\n\nexport { BaseSolanaAdapter };","map":{"version":3,"sources":["../src/baseSolanaAdapter.ts"],"names":["BaseSolanaAdapter","BaseAdapter","init","_","chainConfig","getChainConfig","CHAIN_NAMESPACES","SOLANA","authenticateUser","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","isExpired","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","disconnectSession","checkDisconnectionRequirements","clearToken","disconnect","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED"],"mappings":"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","sourcesContent":["import { BaseAdapter, getChainConfig, CHAIN_NAMESPACES, ADAPTER_STATUS, WalletLoginError, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken, ADAPTER_EVENTS } from '@web3auth/base';\nimport bs58 from 'bs58';\n\nclass BaseSolanaAdapter extends BaseAdapter {\n  async init(_) {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n  async authenticateUser() {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\"\n        }\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, bs58.encode(signedMessage), challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n  async disconnectSession() {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request({\n      method: \"getAccounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n  async disconnect() {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n\nexport { BaseSolanaAdapter };\n//# sourceMappingURL=baseSolanaAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}