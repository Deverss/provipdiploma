{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeMarketEIP1559Transaction = void 0;\n\nconst rlp_1 = require(\"@ethereumjs/rlp\");\n\nconst util_1 = require(\"@ethereumjs/util\");\n\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nconst baseTransaction_1 = require(\"./baseTransaction\");\n\nconst util_2 = require(\"./util\");\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n\nclass FeeMarketEIP1559Transaction extends baseTransaction_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    super({ ...txData,\n      type: TRANSACTION_TYPE\n    }, opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_HARDFORK = 'london';\n    const {\n      chainId,\n      accessList,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n\n    if (this.common.isActivatedEIP(1559) === false) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]); // Populate the access list fields\n\n    const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_2.AccessLists.verifyAccessList(this.accessList);\n    this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas\n    });\n\n    baseTransaction_1.BaseTransaction._validateNotArray(txData);\n\n    if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n      const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n\n      throw new Error(msg);\n    }\n\n    this._validateYParity();\n\n    this._validateHighS();\n\n    if (this.common.isActivatedEIP(3860)) {\n      (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n    }\n\n    const freeze = (opts === null || opts === void 0 ? void 0 : opts.freeze) ?? true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  static fromTxData(txData, opts = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n\n\n  static fromSerializedTx(serialized, opts = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized.slice(0, 1).toString('hex')}`);\n    }\n\n    const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(serialized.slice(1)));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n\n\n  static fromValuesArray(values, opts = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;\n\n    this._validateNotArray({\n      chainId,\n      v\n    });\n\n    (0, util_1.validateNoLeadingZeroes)({\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new FeeMarketEIP1559Transaction({\n      chainId: (0, util_1.bufferToBigInt)(chainId),\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList ?? [],\n      v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    let cost = super.getDataFee();\n    cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n\n\n  getUpfrontCost(baseFee = BigInt(0)) {\n    const prio = this.maxPriorityFeePerGas;\n    const maxBase = this.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return this.gasLimit * gasPrice + this.value;\n  }\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n\n\n  raw() {\n    return [(0, util_1.bigIntToUnpaddedBuffer)(this.chainId), (0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas), (0, util_1.bigIntToUnpaddedBuffer)(this.maxFeePerGas), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  serialize() {\n    const base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base)))]);\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  getMessageToSign(hashMessage = true) {\n    const base = this.raw().slice(0, 9);\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base)))]);\n\n    if (hashMessage) {\n      return Buffer.from((0, keccak_1.keccak256)(message));\n    } else {\n      return message;\n    }\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n      }\n\n      return this.cache.hash;\n    }\n\n    return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n\n    this._validateHighS();\n\n    try {\n      return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n      (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  }\n\n  _processSignature(v, r, s) {\n    const opts = { ...this.txOptions,\n      common: this.common\n    };\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: (0, util_1.bufferToBigInt)(r),\n      s: (0, util_1.bufferToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  toJSON() {\n    const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, util_1.bigIntToHex)(this.chainId),\n      nonce: (0, util_1.bigIntToHex)(this.nonce),\n      maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n      maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n      gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, util_1.bigIntToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n\n}\n\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;","map":{"version":3,"sources":["../src/eip1559Transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeMarketEIP1559Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nclass FeeMarketEIP1559Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = 'london';\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n                .slice(0, 1)\n                .toString('hex')}`);\n        }\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(serialized.slice(1)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0, util_1.bufferToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = BigInt(0)) {\n        const prio = this.maxPriorityFeePerGas;\n        const maxBase = this.maxFeePerGas - baseFee;\n        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n        const gasPrice = inclusionFeePerGas + baseFee;\n        return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        const base = this.raw();\n        return Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 9);\n        const message = Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(message));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map"]},"metadata":{},"sourceType":"script"}