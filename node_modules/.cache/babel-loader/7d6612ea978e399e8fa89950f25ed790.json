{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\n\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\n\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n    return response;\n  }\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    return response.json();\n  }\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}