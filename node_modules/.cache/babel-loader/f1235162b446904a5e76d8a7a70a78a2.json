{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar version = \"0.3.4\";\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: method => `'args.logger' must include required method '${method}'.`\n  },\n  info: {\n    connected: chainId => `Torus: Connected to chain with ID \"${chainId}\".`\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`\n};\nvar log = loglevel.getLogger(\"solana-embed\"); // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nconst getWindowId = () => Math.random().toString(36).slice(2);\n\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\n\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\n\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref; // Fixes dual-screen position                             Most browsers      Firefox\n\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nfunction isLegacyTransactionInstance(transaction) {\n  return transaction.version === undefined;\n}\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"isTopupHidden\", false);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {},\n      whiteLabel\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n    this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n    this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel !== null && whiteLabel !== void 0 && whiteLabel.topupHide) this.isTopupHidden = whiteLabel.topupHide;else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? `/${path}` : \"\";\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n\n  async sendTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        isLegacyTransaction\n      }\n    });\n    return response;\n  } // support sendOptions\n\n\n  async signAndSendTransaction(transaction, options) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        options,\n        isLegacyTransaction\n      }\n    });\n    return {\n      signature: response\n    };\n  }\n\n  async signTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    }); // reconstruct signature pair\n\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map(tx => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    }); // reconstruct signature pairs\n\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"sources":["../../src/messages.ts","../../src/interfaces.ts","../../src/config.ts","../../src/loglevel.ts","../../src/utils.ts","../../src/baseProvider.ts","../../src/embedUtils.ts","../../src/PopupHandler.ts","../../src/communicationProvider.ts","../../src/inPageProvider.ts","../../src/siteMetadata.ts","../../src/embed.ts"],"names":["errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKeyPrefix","loglevel","getLogger","createErrorMiddleware","req","res","next","error","ethErrors","rpc","invalidRequest","message","data","done","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","window","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","BaseProvider","SafeEventEmitter","constructor","jsonRpcStreamName","_defineProperty","isDuplexStream","connectionStream","Error","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","createLoggerMiddleware","origin","location","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","getRpcPromiseCallback","send","payload","callback","streamName","handleEvent","handle","eventName","handler","handlerArgs","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","isLegacyTransactionInstance","transaction","version","PopupHandler","url","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","buttonPosition","currentLoginProvider","isIFrameFullScreen","hasEmittedConnection","torusWidgetVisibility","initialized","isLoggedIn","isPermanentlyDisconnected","isConnected","_state","_defaultState","dappStorageKey","languageTranslations","configuration","embedTranslations","windowRefs","on","notificationHandler","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","USER_LOGGED_OUT","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","_handleWindow","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","TorusInPageProvider","accounts","isUnlocked","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","PROVIDER_JRPC_METHODS","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","hostname","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","login","loginProvider","provider","login_hint","loginWithPrivateKey","loginParams","privateKey","userInfo","success","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","getAccounts","response","sendTransaction","isLegacyTransaction","serialize","requireAllSignatures","Buffer","signAndSendTransaction","options","signature","signTransaction","serializeMessage","messageOnly","parsed","JSON","parse","publicKey","PublicKey","addSignature","signAllTransactions","transactions","encodedMessage","map","tx","responses","signatures","item","idx","signMessage","getGaslessPublicKey","localStorageKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar version = \"0.3.4\";\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: method => `'args.logger' must include required method '${method}'.`\n  },\n  info: {\n    connected: chainId => `Torus: Connected to chain with ID \"${chainId}\".`\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req\n      });\n    }\n    next(done => {\n      const {\n        error\n      } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n    _defineProperty(this, \"isTorus\", void 0);\n    _defineProperty(this, \"_rpcEngine\", void 0);\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n    // setup own event listeners\n    // connect to async provider\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n  return transaction.version === undefined;\n}\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n    // private state\n    _defineProperty(this, \"embedTranslations\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"windowRefs\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState);\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n    // setup own event listeners\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n  // Called if the iframe wants to close the window cause it is done processing the request\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n  getLogoUrl() {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    });\n    // private state\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"selectedAddress\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState);\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n    // setup own event listeners\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    };\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected() {\n    return this._state.isConnected;\n  }\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      });\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", {\n        chainId\n      });\n      this._handleChainChanged({\n        chainId\n      });\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window;\n    // Use the site's favicon if it exists\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"isInitialized\", void 0);\n    _defineProperty(this, \"torusAlert\", void 0);\n    _defineProperty(this, \"modalZIndex\", void 0);\n    _defineProperty(this, \"alertZIndex\", void 0);\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"communicationProvider\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"isTopupHidden\", false);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    _defineProperty(this, \"styleLink\", void 0);\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {},\n      whiteLabel\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString();\n    // Iframe code\n    this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n    this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n    this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n    await documentReady();\n    await handleSetup();\n  }\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? `/${path}` : \"\";\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  }\n  // Solana specific API\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n  async sendTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        isLegacyTransaction\n      }\n    });\n    return response;\n  }\n  // support sendOptions\n  async signAndSendTransaction(transaction, options) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message,\n        options,\n        isLegacyTransaction\n      }\n    });\n    return {\n      signature: response\n    };\n  }\n  async signTransaction(transaction) {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n  async signAllTransactions(transactions) {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map(tx => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true,\n        isLegacyTransaction\n      }\n    });\n    // reconstruct signature pairs\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  }\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n  handleDappStorageKey(useLocalStorage) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    });\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        _payload.params.windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    };\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          })\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res))\n          // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n"]},"metadata":{},"sourceType":"module"}