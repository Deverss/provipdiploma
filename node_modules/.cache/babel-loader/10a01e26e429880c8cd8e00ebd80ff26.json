{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha224 = exports.sha256 = void 0;\n\nconst _sha2_js_1 = require(\"./_sha2.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Choice: a ? b : c\n\n\nconst Chi = (a, b, c) => a & b ^ ~a & c; // Majority function, true if any two inpust is true\n\n\nconst Maj = (a, b, c) => a & b ^ a & c ^ b & c; // Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\n\n\nconst SHA256_K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]); // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\n\nconst IV = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]); // Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\n\nconst SHA256_W = new Uint32Array(64);\n\nclass SHA256 extends _sha2_js_1.SHA2 {\n  constructor() {\n    super(64, 32, 8, false); // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n\n    this.A = IV[0] | 0;\n    this.B = IV[1] | 0;\n    this.C = IV[2] | 0;\n    this.D = IV[3] | 0;\n    this.E = IV[4] | 0;\n    this.F = IV[5] | 0;\n    this.G = IV[6] | 0;\n    this.H = IV[7] | 0;\n  }\n\n  get() {\n    const {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    return [A, B, C, D, E, F, G, H];\n  } // prettier-ignore\n\n\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;\n      const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    } // Compression function main loop, 64 rounds\n\n\n    let {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n      const T2 = sigma0 + Maj(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    } // Add the compressed chunk to the current hash value\n\n\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n\n  roundClean() {\n    SHA256_W.fill(0);\n  }\n\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n\n} // Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n\n\nclass SHA224 extends SHA256 {\n  constructor() {\n    super();\n    this.A = 0xc1059ed8 | 0;\n    this.B = 0x367cd507 | 0;\n    this.C = 0x3070dd17 | 0;\n    this.D = 0xf70e5939 | 0;\n    this.E = 0xffc00b31 | 0;\n    this.F = 0x68581511 | 0;\n    this.G = 0x64f98fa7 | 0;\n    this.H = 0xbefa4fa4 | 0;\n    this.outputLen = 28;\n  }\n\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\n\n\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());","map":{"version":3,"sources":["src/sha256.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map"]},"metadata":{},"sourceType":"script"}