{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeType = void 0;\n\nconst merkleize_1 = require(\"../util/merkleize\");\n\nconst named_1 = require(\"../util/named\");\n\nconst arrayBasic_1 = require(\"./arrayBasic\");\n\nconst arrayComposite_1 = require(\"./arrayComposite\");\n\nconst listComposite_1 = require(\"../view/listComposite\");\n\nconst listComposite_2 = require(\"../viewDU/listComposite\");\n\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\n\n\nclass ListCompositeType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.itemsPerChunk = 1;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (opts === null || opts === void 0 ? void 0 : opts.typeName) ?? `List[${elementType.typeName}, ${limit}]`;\n    this.maxChunkCount = this.limit;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount); // Depth includes the extra level for the length node\n\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n\n  getView(tree) {\n    return new listComposite_1.ListCompositeTreeView(this, tree);\n  }\n\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n  }\n\n  commitView(view) {\n    return view.node;\n  }\n\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n\n  cacheOfViewDU(view) {\n    return view.cache;\n  } // Serialization + deserialization\n\n\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n  }\n\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n  }\n\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n\n  tree_serializedSize(node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n  }\n\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n  }\n\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n  } // Helpers for TreeView\n\n\n  tree_getLength(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  } // Merkleization\n\n\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n  }\n\n}\n\nexports.ListCompositeType = ListCompositeType;","map":{"version":3,"sources":["../../src/type/listComposite.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.itemsPerChunk = 1;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        this.maxChunkCount = this.limit;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listComposite_1.ListCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n    }\n}\nexports.ListCompositeType = ListCompositeType;\n//# sourceMappingURL=listComposite.js.map"]},"metadata":{},"sourceType":"script"}