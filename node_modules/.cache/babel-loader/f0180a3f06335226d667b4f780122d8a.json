{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy, providerFromEngine } from '@toruslabs/base-controllers';\nimport { WalletInitializationError } from '@web3auth/base';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { JRPCEngine, createScaffoldMiddleware, createAsyncMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass BaseProvider extends BaseController {\n  // should be Assigned in setupProvider\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"_providerEngineProxy\", null);\n\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: {\n        [config.chainConfig.chainId]: config.chainConfig\n      }\n    };\n    super.initialize();\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(chainConfig) {\n    if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: _objectSpread(_objectSpread({}, this.config.networks), {}, {\n        [chainConfig.chainId]: chainConfig\n      })\n    });\n  }\n\n  getChainConfig(chainId) {\n    var _this$config$networks;\n\n    const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n    if (!chainConfig) throw ethErrors.rpc.invalidRequest(`Chain ${chainId} is not supported, please add chainConfig for it`);\n    return chainConfig;\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n}\n\nclass CommonPrivateKeyProvider {\n  constructor() {\n    // should be Assigned in setupProvider\n    _defineProperty(this, \"_providerEngineProxy\", null);\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async setupProvider(privKey) {\n    const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n    const engine = new JRPCEngine();\n    engine.push(privKeyMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n  getPrivKeyMiddleware(privKey) {\n    const middleware = {\n      getPrivatekey: async () => {\n        return privKey;\n      }\n    };\n    return this.createPrivKeyMiddleware(middleware);\n  }\n\n  createPrivKeyMiddleware(_ref) {\n    let {\n      getPrivatekey\n    } = _ref;\n\n    async function getPrivatekeyHandler(_, res) {\n      res.result = await getPrivatekey();\n    }\n\n    return createScaffoldMiddleware({\n      private_key: createAsyncMiddleware(getPrivatekeyHandler)\n    });\n  }\n\n}\n\n_defineProperty(CommonPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new CommonPrivateKeyProvider();\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nconst createRandomId = getCreateRandomId();\nexport { BaseProvider, CommonPrivateKeyProvider, createRandomId };","map":{"version":3,"sources":["../src/baseProvider.ts","../src/commonPrivateKeyProvider.ts","../src/utils.ts"],"names":["BaseProvider","BaseController","constructor","config","state","_defineProperty","chainConfig","WalletInitializationError","invalidProviderConfigError","chainId","rpcTarget","defaultState","defaultConfig","networks","initialize","provider","_providerEngineProxy","_","Error","addChain","ethErrors","rpc","invalidParams","configure","getChainConfig","invalidRequest","getProviderEngineProxy","updateProviderEngineProxy","providerEngineProxy","setTarget","createEventEmitterProxy","CommonPrivateKeyProvider","params","providerFactory","setupProvider","privKey","privKeyMiddleware","getPrivKeyMiddleware","engine","JRPCEngine","push","providerFromEngine","switchChain","Promise","resolve","middleware","getPrivatekey","createPrivKeyMiddleware","getPrivatekeyHandler","res","result","createScaffoldMiddleware","private_key","createAsyncMiddleware","createRandomId","getCreateRandomId"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBM,MAAgBA,YAAhB,SACIC,cADJ,CACwB;AAG5B;AAGAC,EAAAA,WAAAA,CAAAA,IAAAA,EAAuD;AAAA,QAA3C;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA2C,IAAA;AACrD,UAAM;AAAED,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAN;;AAAyBC,IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,sBAAAA,EAHoC,IAGpCA,CAAAA;;AACzB,QAAI,CAACF,MAAM,CAACG,WAAZ,EAAyB,MAAMC,yBAAyB,CAACC,0BAA1BD,CAAqD,4BAArDA,CAAN;AACzB,QAAI,CAACJ,MAAM,CAACG,WAAPH,CAAmBM,OAAxB,EAAiC,MAAMF,yBAAyB,CAACC,0BAA1BD,CAAqD,2CAArDA,CAAN;AACjC,QAAI,CAACJ,MAAM,CAACG,WAAPH,CAAmBO,SAAxB,EAAmC,MAAMH,yBAAyB,CAACC,0BAA1BD,CAAqD,6CAArDA,CAAN;AACnC,SAAKI,YAAL,GAAoB;AAClBF,MAAAA,OAAO,EAAE;AADS,KAApB;AAGA,SAAKG,aAAL,GAAqB;AACnBN,MAAAA,WAAW,EAAEH,MAAM,CAACG,WADD;AAEnBO,MAAAA,QAAQ,EAAE;AAAE,SAACV,MAAM,CAACG,WAAPH,CAAmBM,OAApB,GAA8BN,MAAM,CAACG;AAAvC;AAFS,KAArB;AAIA,UAAMQ,UAAN;AACF;;AAEYC,MAARA,QAAQA,GAAAA;AACV,WAAO,KAAKC,oBAAZ;AACF;;AAEYD,MAARA,QAAQA,CAACE,CAADF,EAAE;AACZ,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACF;;AAEOC,EAAAA,QAAQA,CAACb,WAADa,EAA+B;AAC5C,QAAI,CAACb,WAAW,CAACG,OAAjB,EAA0B,MAAMW,SAAS,CAACC,GAAVD,CAAcE,aAAdF,CAA4B,qBAA5BA,CAAN;AAC1B,QAAI,CAACd,WAAW,CAACI,SAAjB,EAA4B,MAAMU,SAAS,CAACC,GAAVD,CAAcE,aAAdF,CAA4B,qBAA5BA,CAAN;AAC5B,SAAKG,SAAL,CAAe;AACbV,MAAAA,QAAQ,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAO,KAAKV,MAAL,CAAYU,QAAnB,CAAA,EAA2B,EAA3B,EAA2B;AAAE,SAACP,WAAW,CAACG,OAAb,GAAuBH;AAAzB,OAA3B;AADK,KAAf;AAGF;;AAEOkB,EAAAA,cAAcA,CAACf,OAADe,EAAgB;AAAA,QAAA,qBAAA;;AACnC,UAAMlB,WAAW,GAAA,CAAA,qBAAA,GAAG,KAAKH,MAAL,CAAYU,QAAf,MAAuB,IAAvB,IAAuB,qBAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAG,qBAAA,CAAuBJ,OAAvB,CAApB;AACA,QAAI,CAACH,WAAL,EAAkB,MAAMc,SAAS,CAACC,GAAVD,CAAcK,cAAdL,CAAsC,SAAA,OAAyD,kDAA/FA,CAAN;AAClB,WAAOd,WAAP;AACF;;AAEUoB,EAAAA,sBAAsBA,GAAAA;AAC9B,WAAO,KAAKV,oBAAZ;AACF;;AAEUW,EAAAA,yBAAyBA,CAACC,mBAADD,EAA8C;AAC/E,QAAI,KAAKX,oBAAT,EAA+B;AAC5B,WAAKA,oBAAL,CAAkCa,SAAlC,CAA4CD,mBAA5C;AACF,KAFD,MAEO;AACL,WAAKZ,oBAAL,GAA4Bc,uBAAuB,CAA2BF,mBAA3B,CAAnD;AACD;AACH;;AArD4B;;MCXjBG,wB,CAAwB7B;AAAAA,EAAAA,WAAAA,GAAAA;AACnC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,EAC+D,IAD/D,CAAA;AACmE;;AAEvDa,MAARA,QAAQA,GAAAA;AACV,WAAO,KAAKC,oBAAZ;AACF;;AAEYD,MAARA,QAAQA,CAACE,CAADF,EAAE;AACZ,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACF;;AAQAC,EAAAA,QAAQA,CAACF,CAADE,EAAqB;AAC3B,UAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;AACF;;AAE0BgB,QAAbA,aAAaA,CAACC,OAADD,EAAgB;AACxC,UAAME,iBAAiB,GAAG,KAAKC,oBAAL,CAA0BF,OAA1B,CAA1B;AACA,UAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,IAAPF,CAAYF,iBAAZE;AACA,UAAMvB,QAAQ,GAAG0B,kBAAkB,CAACH,MAAD,CAAnC;AACA,SAAKX,yBAAL,CAA+BZ,QAA/B;AACF;;AAEwB2B,QAAXA,WAAWA,CAACzB,CAADyB,EAAuB;AAC7C,WAAOC,OAAO,CAACC,OAARD,EAAP;AACF;;AAEUjB,EAAAA,sBAAsBA,GAAAA;AAC9B,WAAO,KAAKV,oBAAZ;AACF;;AAEUW,EAAAA,yBAAyBA,CAACC,mBAADD,EAA8C;AAC/E,QAAI,KAAKX,oBAAT,EAA+B;AAC5B,WAAKA,oBAAL,CAAkCa,SAAlC,CAA4CD,mBAA5C;AACF,KAFD,MAEO;AACL,WAAKZ,oBAAL,GAA4Bc,uBAAuB,CAA2BF,mBAA3B,CAAnD;AACD;AACH;;AAEQS,EAAAA,oBAAoBA,CAACF,OAADE,EAAgB;AAC1C,UAAMQ,UAAU,GAAG;AACjBC,MAAAA,aAAa,EAAE,YAA4B;AACzC,eAAOX,OAAP;AACF;AAHiB,KAAnB;AAKA,WAAO,KAAKY,uBAAL,CAA6BF,UAA7B,CAAP;AACF;;AAEQE,EAAAA,uBAAuBA,CAAAA,IAAAA,EAAkB;AAAA,QAAjB;AAAED,MAAAA;AAAF,QAAiB,IAAA;;AAC/C,mBAAeE,oBAAf,CAAoC/B,CAApC,EAA8EgC,GAA9E,EAAwG;AACtGA,MAAAA,GAAG,CAACC,MAAJD,GAAa,MAAMH,aAAa,EAAhCG;AACF;;AAEA,WAAOE,wBAAwB,CAAC;AAC9BC,MAAAA,WAAW,EAAEC,qBAAqB,CAACL,oBAAD;AADJ,KAAD,CAA/B;AAGF;;AA/DmC9C;;gBAAxB6B,wB,EAYyB,qB,EAAA,MAAOC,MAAP,IAAyE;AAC3G,QAAMC,eAAe,GAAG,IAAIF,wBAAJ,EAAxB;AACA,QAAME,eAAe,CAACC,aAAhBD,CAA8BD,MAAM,CAACG,OAArCF,CAAN;AACA,SAAOA,eAAP;AACD,C;;ACrBUqB,MAAAA,cAAc,GAAGC,iBAAiB,EAAlCD","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy, providerFromEngine } from '@toruslabs/base-controllers';\nimport { WalletInitializationError } from '@web3auth/base';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { JRPCEngine, createScaffoldMiddleware, createAsyncMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseProvider extends BaseController {\n  // should be Assigned in setupProvider\n\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"_providerEngineProxy\", null);\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: {\n        [config.chainConfig.chainId]: config.chainConfig\n      }\n    };\n    super.initialize();\n  }\n  get provider() {\n    return this._providerEngineProxy;\n  }\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n  addChain(chainConfig) {\n    if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: _objectSpread(_objectSpread({}, this.config.networks), {}, {\n        [chainConfig.chainId]: chainConfig\n      })\n    });\n  }\n  getChainConfig(chainId) {\n    var _this$config$networks;\n    const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n    if (!chainConfig) throw ethErrors.rpc.invalidRequest(`Chain ${chainId} is not supported, please add chainConfig for it`);\n    return chainConfig;\n  }\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n}\n\nclass CommonPrivateKeyProvider {\n  constructor() {\n    // should be Assigned in setupProvider\n    _defineProperty(this, \"_providerEngineProxy\", null);\n  }\n  get provider() {\n    return this._providerEngineProxy;\n  }\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n  addChain(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async setupProvider(privKey) {\n    const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n    const engine = new JRPCEngine();\n    engine.push(privKeyMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n  getPrivKeyMiddleware(privKey) {\n    const middleware = {\n      getPrivatekey: async () => {\n        return privKey;\n      }\n    };\n    return this.createPrivKeyMiddleware(middleware);\n  }\n  createPrivKeyMiddleware(_ref) {\n    let {\n      getPrivatekey\n    } = _ref;\n    async function getPrivatekeyHandler(_, res) {\n      res.result = await getPrivatekey();\n    }\n    return createScaffoldMiddleware({\n      private_key: createAsyncMiddleware(getPrivatekeyHandler)\n    });\n  }\n}\n_defineProperty(CommonPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new CommonPrivateKeyProvider();\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nconst createRandomId = getCreateRandomId();\n\nexport { BaseProvider, CommonPrivateKeyProvider, createRandomId };\n//# sourceMappingURL=baseProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}