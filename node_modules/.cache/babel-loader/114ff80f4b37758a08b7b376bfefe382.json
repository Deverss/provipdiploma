{"ast":null,"code":"\"use strict\";\n/* eslint jsdoc/require-description: 0 */\n\n/* eslint jsdoc/require-returns: 0 */\n\n/* eslint jsdoc/match-description: 0 */\n\n/* eslint jsdoc/require-param-description: 0 */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rawEncode = exports.parseNumber = exports.solidityPack = void 0;\n\nconst util_1 = require(\"@ethereumjs/util\");\n\nconst ethjs_util_1 = require(\"ethjs-util\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst utils_1 = require(\"./utils\"); //\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\n\n\nfunction solidityPack(types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  const ret = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n\n  return Buffer.concat(ret);\n}\n\nexports.solidityPack = solidityPack;\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\n\nfunction isArray(type) {\n  return type.lastIndexOf(']') === type.length - 1;\n}\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\n\n\nfunction parseTypeArray(type) {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n\n  return null;\n}\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\n\n\nfunction parseTypeN(type) {\n  return parseInt(/^\\D+(\\d+)$/u.exec(type)[1], 10);\n}\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\n\n\nfunction parseNumber(arg) {\n  const type = typeof arg;\n\n  if (type === 'string') {\n    if ((0, util_1.isHexPrefixed)(arg)) {\n      return new bn_js_1.default((0, ethjs_util_1.stripHexPrefix)(arg), 16);\n    }\n\n    return new bn_js_1.default(arg, 10);\n  } else if (type === 'number') {\n    return new bn_js_1.default(arg);\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg;\n  }\n\n  throw new Error('Argument is not a number');\n}\n\nexports.parseNumber = parseNumber;\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\n\nfunction solidityHexValue(type, value, bitsize) {\n  // pass in bitsize = null if use default bitsize\n  let size, num;\n\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n\n      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n\n    const arrayValues = value.map(function (v) {\n      return solidityHexValue(subType, v, 256);\n    });\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value;\n  } else if (type === 'string') {\n    return Buffer.from(value, 'utf8');\n  } else if (type === 'bool') {\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n\n    return (0, util_1.setLengthLeft)((0, util_1.toBuffer)(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof value === 'number') {\n      value = (0, utils_1.normalize)(value);\n    }\n\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(value), size);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  } // FIXME: support all other types\n\n\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\n\n\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n\n  return name;\n}\n/**\n * @param types\n * @param values\n */\n\n\nfunction rawEncode(types, values) {\n  const output = [];\n  const data = [];\n  let headLength = 0;\n  types.forEach(function (type) {\n    if (isArray(type)) {\n      const size = parseTypeArray(type); // eslint-disable-next-line no-negated-condition\n\n      if (size !== 'dynamic') {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value); // Use the head/tail method for storing dynamic data\n\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\nexports.rawEncode = rawEncode; // Encodes a single item (can be dynamic array)\n// @returns: Buffer\n\n/**\n * @param type\n * @param arg\n */\n\nfunction encodeSingle(type, arg) {\n  let size, num, ret, i;\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n\n    size = parseTypeArray(type);\n\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n\n    ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    for (i in arg) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg);\n    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, (0, util_1.zeros)(32 - arg.length % 32)]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof arg === 'number') {\n      arg = (0, utils_1.normalize)(arg);\n    }\n\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(arg), 32);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type);\n    num = parseNumber(arg);\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type);\n    return encodeSingle('int256', parseNumber(arg).mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  }\n\n  throw new Error(`Unsupported or invalid type: ${type}`);\n} // Is a type dynamic?\n\n/**\n * @param type\n */\n\n\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic';\n} // Parse N,M from type<N>x<M>\n\n/**\n * @param type\n */\n\n\nfunction parseTypeNxM(type) {\n  const tmp = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];\n}","map":{"version":3,"sources":["../src/ethereumjs-abi-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\n\nimport {\n  toBuffer,\n  setLengthRight,\n  setLengthLeft,\n  isHexPrefixed,\n  zeros,\n} from '@ethereumjs/util';\nimport { stripHexPrefix } from 'ethjs-util';\nimport BN from 'bn.js';\nimport { normalize } from './utils';\n\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nexport function solidityPack(types: string[], values: any[]) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  const ret = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n\n  return Buffer.concat(ret);\n}\n\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type) {\n  return type.lastIndexOf(']') === type.length - 1;\n}\n\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type) {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type) {\n  return parseInt(/^\\D+(\\d+)$/u.exec(type)[1], 10);\n}\n\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nexport function parseNumber(arg) {\n  const type = typeof arg;\n  if (type === 'string') {\n    if (isHexPrefixed(arg)) {\n      return new BN(stripHexPrefix(arg), 16);\n    }\n    return new BN(arg, 10);\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg;\n  }\n  throw new Error('Argument is not a number');\n}\n\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(type, value, bitsize) {\n  // pass in bitsize = null if use default bitsize\n  let size, num;\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (\n        arraySize !== 'dynamic' &&\n        arraySize !== 0 &&\n        value.length > arraySize\n      ) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = value.map(function (v) {\n      return solidityHexValue(subType, v, 256);\n    });\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value;\n  } else if (type === 'string') {\n    return Buffer.from(value, 'utf8');\n  } else if (type === 'bool') {\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return setLengthLeft(toBuffer(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof value === 'number') {\n      value = normalize(value);\n    }\n    return setLengthRight(toBuffer(value), size);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n\n/**\n * @param types\n * @param values\n */\nexport function rawEncode(types, values) {\n  const output = [];\n  const data = [];\n\n  let headLength = 0;\n\n  types.forEach(function (type) {\n    if (isArray(type)) {\n      const size: number | 'dynamic' = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic') {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(type, arg) {\n  let size, num, ret, i;\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    size = parseTypeArray(type);\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    for (i in arg) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg);\n\n    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, zeros(32 - (arg.length % 32))]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof arg === 'number') {\n      arg = normalize(arg);\n    }\n    return setLengthRight(toBuffer(arg), 32);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type);\n\n    num = parseNumber(arg);\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type);\n\n    return encodeSingle(\n      'int256',\n      parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))),\n    );\n  }\n\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (\n    type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic'\n  );\n}\n\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type) {\n  const tmp = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}