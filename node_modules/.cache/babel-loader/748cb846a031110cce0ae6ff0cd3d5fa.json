{"ast":null,"code":"import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams, SUPPORTED_KEY_CURVES } from '@toruslabs/openlogin';\nimport { getChainConfig, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, log, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError, BaseAdapter } from '@web3auth/base';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { CommonPrivateKeyProvider } from '@web3auth/base-provider';\nimport merge from 'lodash.merge';\n\nvar getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {}\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(OpenloginAdapter, _BaseAdapter);\n\n  var _super = _createSuper(OpenloginAdapter);\n\n  function OpenloginAdapter(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$adapterSettin, _params$chainConfig3;\n\n    var _this;\n\n    _classCallCheck(this, OpenloginAdapter);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"clientId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    _this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    _this.clientId = (_params$adapterSettin = params.adapterSettings) === null || _params$adapterSettin === void 0 ? void 0 : _params$adapterSettin.clientId;\n    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings);\n    _this.sessionTime = _this.loginSettings.sessionTime || 86400; // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", _this.chainConfig);\n\n      if (!_this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(OpenloginAdapter, [{\n    key: \"chainConfigProxy\",\n    get: function get() {\n      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      var _this$privKeyProvider;\n\n      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var _this$openloginOption;\n\n        var isRedirectResult, redirectResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n\n              case 3:\n                if (this.chainConfig) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 5:\n                isRedirectResult = false;\n\n                if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n                  redirectResult = getHashQueryParams();\n\n                  if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n                    isRedirectResult = true;\n                  }\n                }\n\n                this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n                  replaceUrlOnRedirect: isRedirectResult\n                });\n                this.openloginInstance = new OpenLogin(this.openloginOptions);\n                log.debug(\"initializing openlogin adapter init\");\n                _context.next = 12;\n                return this.openloginInstance.init();\n\n              case 12:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n                _context.prev = 14;\n                log.debug(\"initializing openlogin adapter\"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n\n                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 19;\n                return this.connect();\n\n              case 19:\n                _context.next = 25;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](14);\n                log.error(\"Failed to connect with cached openlogin provider\", _context.t0);\n                this.emit(\"ERRORED\", _context.t0);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 21]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.connectWithProvider(params);\n\n              case 6:\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                log.error(\"Failed to connect with openlogin provider\", _context2.t0); // ready again to be connected\n\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n\n                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes(\"user closed popup\"))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.popupClosed();\n\n              case 16:\n                throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.openloginInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 5:\n                _context3.next = 7;\n                return this.openloginInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.openloginInstance = null;\n                  this.privKeyProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"authenticateUser\",\n    value: function () {\n      var _authenticateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n\n              case 2:\n                _context4.next = 4;\n                return this.getUserInfo();\n\n              case 4:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  idToken: userInfo.idToken\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function authenticateUser() {\n        return _authenticateUser.apply(this, arguments);\n      }\n\n      return authenticateUser;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                _context5.next = 6;\n                return this.openloginInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context5.sent;\n                return _context5.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }() // should be called only before initialization.\n\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(adapterSettings) {\n      if (this.status === ADAPTER_STATUS.READY) return;\n      var defaultOptions = getOpenloginDefaultOptions();\n      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n\n      if (adapterSettings.sessionTime) {\n        this.loginSettings = _objectSpread(_objectSpread({}, this.loginSettings), {}, {\n          sessionTime: adapterSettings.sessionTime\n        });\n      }\n\n      if (adapterSettings.clientId) {\n        this.clientId = adapterSettings.clientId;\n      }\n    } // should be called only before initialization.\n\n  }, {\n    key: \"setChainConfig\",\n    value: function setChainConfig(customChainConfig) {\n      _get(_getPrototypeOf(OpenloginAdapter.prototype), \"setChainConfig\", this).call(this, customChainConfig);\n\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n    }\n  }, {\n    key: \"connectWithProvider\",\n    value: function () {\n      var _connectWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {\n        var _yield$import, SolanaPrivateKeyProvider, _yield$import2, EthereumPrivateKeyProvider, _params$extraLoginOpt, finalPrivKey, _yield$import3, getED25519Key;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 7;\n                return import('@web3auth/solana-provider');\n\n              case 7:\n                _yield$import = _context6.sent;\n                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;\n                this.privKeyProvider = new SolanaPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 12:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.EIP155)) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 15;\n                return import('@web3auth/ethereum-provider');\n\n              case 15:\n                _yield$import2 = _context6.sent;\n                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;\n                this.privKeyProvider = new EthereumPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 20:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.OTHER)) {\n                  _context6.next = 24;\n                  break;\n                }\n\n                this.privKeyProvider = new CommonPrivateKeyProvider();\n                _context6.next = 25;\n                break;\n\n              case 24:\n                throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n\n              case 25:\n                if (!(!this.openloginInstance.privKey && params)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                if (!this.loginSettings.curve) {\n                  this.loginSettings.curve = this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n                }\n\n                _context6.next = 29;\n                return this.openloginInstance.login(merge(this.loginSettings, {\n                  loginProvider: params.loginProvider\n                }, {\n                  extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n                    login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n                  })\n                }));\n\n              case 29:\n                finalPrivKey = this.openloginInstance.privKey;\n\n                if (!finalPrivKey) {\n                  _context6.next = 41;\n                  break;\n                }\n\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 37;\n                  break;\n                }\n\n                _context6.next = 34;\n                return import('@toruslabs/openlogin-ed25519');\n\n              case 34:\n                _yield$import3 = _context6.sent;\n                getED25519Key = _yield$import3.getED25519Key;\n                finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n\n              case 37:\n                _context6.next = 39;\n                return this.privKeyProvider.setupProvider(finalPrivKey);\n\n              case 39:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN,\n                  reconnected: !params\n                });\n\n              case 41:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function connectWithProvider(_x3) {\n        return _connectWithProvider.apply(this, arguments);\n      }\n\n      return connectWithProvider;\n    }()\n  }]);\n\n  return OpenloginAdapter;\n}(BaseAdapter);\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };","map":{"version":3,"sources":["../src/config.ts","../src/openloginAdapter.ts"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","POPUP","chainConfig","chainNamespace","getChainConfig","loginSettings","OpenloginAdapter","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","defaultOptions","params","MAINNET","sessionTime","defaultChainIdConfig","WalletInitializationError","privKeyProvider","provider","isRedirectResult","redirectResult","getHashQueryParams","Object","replaceUrlOnRedirect","ADAPTER_EVENTS","options","adapter","WalletLoginError","cleanup","userInfo","idToken","customChainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","SUPPORTED_KEY_CURVES","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","reconnected"],"mappings":"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","sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams, SUPPORTED_KEY_CURVES } from '@toruslabs/openlogin';\nimport { getChainConfig, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, log, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError, BaseAdapter } from '@web3auth/base';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { CommonPrivateKeyProvider } from '@web3auth/base-provider';\nimport merge from 'lodash.merge';\n\nvar getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {}\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(OpenloginAdapter, _BaseAdapter);\n\n  var _super = _createSuper(OpenloginAdapter);\n\n  function OpenloginAdapter(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$adapterSettin, _params$chainConfig3;\n\n    var _this;\n\n    _classCallCheck(this, OpenloginAdapter);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"clientId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    _this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    _this.clientId = (_params$adapterSettin = params.adapterSettings) === null || _params$adapterSettin === void 0 ? void 0 : _params$adapterSettin.clientId;\n    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings);\n    _this.sessionTime = _this.loginSettings.sessionTime || 86400; // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", _this.chainConfig);\n\n      if (!_this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(OpenloginAdapter, [{\n    key: \"chainConfigProxy\",\n    get: function get() {\n      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      var _this$privKeyProvider;\n\n      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var _this$openloginOption;\n\n        var isRedirectResult, redirectResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n\n              case 3:\n                if (this.chainConfig) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 5:\n                isRedirectResult = false;\n\n                if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n                  redirectResult = getHashQueryParams();\n\n                  if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n                    isRedirectResult = true;\n                  }\n                }\n\n                this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n                  replaceUrlOnRedirect: isRedirectResult\n                });\n                this.openloginInstance = new OpenLogin(this.openloginOptions);\n                log.debug(\"initializing openlogin adapter init\");\n                _context.next = 12;\n                return this.openloginInstance.init();\n\n              case 12:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n                _context.prev = 14;\n                log.debug(\"initializing openlogin adapter\"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n\n                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 19;\n                return this.connect();\n\n              case 19:\n                _context.next = 25;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](14);\n                log.error(\"Failed to connect with cached openlogin provider\", _context.t0);\n                this.emit(\"ERRORED\", _context.t0);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 21]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.connectWithProvider(params);\n\n              case 6:\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                log.error(\"Failed to connect with openlogin provider\", _context2.t0); // ready again to be connected\n\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n\n                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes(\"user closed popup\"))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.popupClosed();\n\n              case 16:\n                throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.openloginInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 5:\n                _context3.next = 7;\n                return this.openloginInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.openloginInstance = null;\n                  this.privKeyProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"authenticateUser\",\n    value: function () {\n      var _authenticateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n\n              case 2:\n                _context4.next = 4;\n                return this.getUserInfo();\n\n              case 4:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  idToken: userInfo.idToken\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function authenticateUser() {\n        return _authenticateUser.apply(this, arguments);\n      }\n\n      return authenticateUser;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                _context5.next = 6;\n                return this.openloginInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context5.sent;\n                return _context5.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }() // should be called only before initialization.\n\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(adapterSettings) {\n      if (this.status === ADAPTER_STATUS.READY) return;\n      var defaultOptions = getOpenloginDefaultOptions();\n      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n\n      if (adapterSettings.sessionTime) {\n        this.loginSettings = _objectSpread(_objectSpread({}, this.loginSettings), {}, {\n          sessionTime: adapterSettings.sessionTime\n        });\n      }\n\n      if (adapterSettings.clientId) {\n        this.clientId = adapterSettings.clientId;\n      }\n    } // should be called only before initialization.\n\n  }, {\n    key: \"setChainConfig\",\n    value: function setChainConfig(customChainConfig) {\n      _get(_getPrototypeOf(OpenloginAdapter.prototype), \"setChainConfig\", this).call(this, customChainConfig);\n\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n    }\n  }, {\n    key: \"connectWithProvider\",\n    value: function () {\n      var _connectWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {\n        var _yield$import, SolanaPrivateKeyProvider, _yield$import2, EthereumPrivateKeyProvider, _params$extraLoginOpt, finalPrivKey, _yield$import3, getED25519Key;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 7;\n                return import('@web3auth/solana-provider');\n\n              case 7:\n                _yield$import = _context6.sent;\n                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;\n                this.privKeyProvider = new SolanaPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 12:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.EIP155)) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 15;\n                return import('@web3auth/ethereum-provider');\n\n              case 15:\n                _yield$import2 = _context6.sent;\n                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;\n                this.privKeyProvider = new EthereumPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 20:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.OTHER)) {\n                  _context6.next = 24;\n                  break;\n                }\n\n                this.privKeyProvider = new CommonPrivateKeyProvider();\n                _context6.next = 25;\n                break;\n\n              case 24:\n                throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n\n              case 25:\n                if (!(!this.openloginInstance.privKey && params)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                if (!this.loginSettings.curve) {\n                  this.loginSettings.curve = this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n                }\n\n                _context6.next = 29;\n                return this.openloginInstance.login(merge(this.loginSettings, {\n                  loginProvider: params.loginProvider\n                }, {\n                  extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n                    login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n                  })\n                }));\n\n              case 29:\n                finalPrivKey = this.openloginInstance.privKey;\n\n                if (!finalPrivKey) {\n                  _context6.next = 41;\n                  break;\n                }\n\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 37;\n                  break;\n                }\n\n                _context6.next = 34;\n                return import('@toruslabs/openlogin-ed25519');\n\n              case 34:\n                _yield$import3 = _context6.sent;\n                getED25519Key = _yield$import3.getED25519Key;\n                finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n\n              case 37:\n                _context6.next = 39;\n                return this.privKeyProvider.setupProvider(finalPrivKey);\n\n              case 39:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN,\n                  reconnected: !params\n                });\n\n              case 41:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function connectWithProvider(_x3) {\n        return _connectWithProvider.apply(this, arguments);\n      }\n\n      return connectWithProvider;\n    }()\n  }]);\n\n  return OpenloginAdapter;\n}(BaseAdapter);\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}