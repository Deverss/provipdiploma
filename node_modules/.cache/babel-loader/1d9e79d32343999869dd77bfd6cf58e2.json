{"ast":null,"code":"import { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, log, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthNoModal } from '@web3auth/no-modal';\nimport { LoginModal, getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultOtherModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n} // warning: this function is not compatible with \"OTHER\" chain namespace.\n\n\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId,\n    sessionTime,\n    web3AuthNetwork\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n\n  const finalChainConfig = _objectSpread$1(_objectSpread$1({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions();\n    const adapter = new OpenloginAdapter(_objectSpread$1(_objectSpread$1({}, defaultOptions), {}, {\n      clientId,\n      chainConfig: _objectSpread$1({}, finalChainConfig),\n      adapterSettings: _objectSpread$1(_objectSpread$1({}, defaultOptions.adapterSettings), {}, {\n        clientId,\n        network: web3AuthNetwork\n      }),\n      sessionTime,\n      web3AuthNetwork\n    }));\n    return adapter;\n  }\n\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nconst languageMap = {\n  en: \"english\",\n  de: \"german\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n  fr: \"french\",\n  pt: \"portuguese\"\n};\n\nconst getUserLanguage = defaultLanguage => {\n  let userLanguage = defaultLanguage;\n\n  if (!userLanguage) {\n    const browserLanguage = typeof window !== \"undefined\" ? window.navigator.userLanguage || window.navigator.language || \"en-US\" : \"en-US\";\n    userLanguage = browserLanguage.split(\"-\")[0];\n  }\n\n  return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass Web3Auth extends Web3AuthNoModal {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2, _this$options$uiConfi3, _this$options$uiConfi4, _this$options$uiConfi5, _this$options$uiConfi6, _this$options$uiConfi7, _this$options$uiConfi8;\n\n    super(options);\n\n    _defineProperty(this, \"loginModal\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n    } // get userLanguage\n\n\n    const defaultLanguage = getUserLanguage((_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.defaultLanguage);\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.theme,\n      appName: ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.appName) || \"blockchain\",\n      appLogo: ((_this$options$uiConfi4 = this.options.uiConfig) === null || _this$options$uiConfi4 === void 0 ? void 0 : _this$options$uiConfi4.appLogo) || \"\",\n      adapterListener: this,\n      displayErrorsOnModal: (_this$options$uiConfi5 = this.options.uiConfig) === null || _this$options$uiConfi5 === void 0 ? void 0 : _this$options$uiConfi5.displayErrorsOnModal,\n      defaultLanguage,\n      modalZIndex: ((_this$options$uiConfi6 = this.options.uiConfig) === null || _this$options$uiConfi6 === void 0 ? void 0 : _this$options$uiConfi6.modalZIndex) || \"99998\",\n      web3AuthNetwork: this.options.web3AuthNetwork,\n      loginGridCol: ((_this$options$uiConfi7 = this.options.uiConfig) === null || _this$options$uiConfi7 === void 0 ? void 0 : _this$options$uiConfi7.loginGridCol) || 3,\n      primaryButton: ((_this$options$uiConfi8 = this.options.uiConfig) === null || _this$options$uiConfi8 === void 0 ? void 0 : _this$options$uiConfi8.primaryButton) || \"socialLogin\"\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig; // merge default adapters with the custom configured adapters.\n\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3; // start with the default config of adapter.\n\n\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      }; // override the default config of adapter if some config is being provided by the user.\n\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n\n      this.modalConfig.adapters[adapterName] = adapterConfig; // check if adapter is configured/added by user and exist in walletAdapters map.\n\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter); // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return; // add client id to adapter, same web3auth client id can be used in adapter.\n        // this id is being overridden if user is also passing client id in adapter's constructor.\n\n        this.walletAdapters[adapterName].setAdapterSettings({\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        }); // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n\n          this.walletAdapters[adapterName].setAdapterSettings({\n            chainConfig\n          });\n        }\n\n        return adapterName;\n      }\n    });\n    let adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      var _this$modalConfig$ada5, _this$modalConfig$ada6, _this$modalConfig$ada7, _this$modalConfig$ada8, _this$modalConfig$ada9;\n\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : (_this$modalConfig$ada6 = _this$modalConfig$ada5[adapter.name]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.showOnModal) !== true) return false;\n      if (!((_this$modalConfig$ada7 = this.modalConfig.adapters) !== null && _this$modalConfig$ada7 !== void 0 && (_this$modalConfig$ada8 = _this$modalConfig$ada7[adapter.name]) !== null && _this$modalConfig$ada8 !== void 0 && _this$modalConfig$ada8.loginMethods)) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(adapter.name, this.walletAdapters[adapter.name], (_this$modalConfig$ada9 = this.modalConfig.adapters[adapter.name]) === null || _this$modalConfig$ada9 === void 0 ? void 0 : _this$modalConfig$ada9.loginMethods);\n      if (Object.values(mergedLoginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, adapterNames, \"hasInAppWallets\"); // if both wc1 and wc2 are configured, give precedence to wc2.\n\n    if (this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1] && this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2]) {\n      delete this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      adapterNames = adapterNames.filter(ad => ad !== WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    } // Now, initialize the adapters.\n\n\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n\n      try {\n        const adapter = this.walletAdapters[adapterName]; // only initialize a external adapter here if it is a cached adapter.\n\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        } // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n\n\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }); // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada10;\n\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada10 = this.modalConfig.adapters) === null || _this$modalConfig$ada10 === void 0 ? void 0 : _this$modalConfig$ada10[adapterName].showOnModal);\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    } // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n\n\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    Object.keys(this.walletAdapters).forEach(async adapterName => {\n      const adapter = this.walletAdapters[adapterName];\n\n      if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n        log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n        this.subscribeToAdapterEvents(adapter); // we are not initializing cached adapter here as it is already being initialized in initModal before.\n\n        if (this.cachedAdapter === adapterName) {\n          return;\n        }\n\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }).then(() => {\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          this.loginModal.addWalletLogins(adaptersConfig, {\n            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n          });\n          return undefined;\n        }).catch(error => log.error(error, \"error while initializing adapter\"));\n      }\n    });\n  }\n\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada11, _this$options$uiConfi9, _this$options$uiConfi10, _this$options$uiConfi11;\n\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada11 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada11 === void 0 ? void 0 : _this$modalConfig$ada11.loginMethods), ((_this$options$uiConfi9 = this.options.uiConfig) === null || _this$options$uiConfi9 === void 0 ? void 0 : _this$options$uiConfi9.loginMethodsOrder) || OPENLOGIN_PROVIDERS, _objectSpread(_objectSpread({}, this.options.uiConfig), {}, {\n        loginGridCol: ((_this$options$uiConfi10 = this.options.uiConfig) === null || _this$options$uiConfi10 === void 0 ? void 0 : _this$options$uiConfi10.loginGridCol) || 3,\n        primaryButton: ((_this$options$uiConfi11 = this.options.uiConfig) === null || _this$options$uiConfi11 === void 0 ? void 0 : _this$options$uiConfi11.primaryButton) || \"socialLogin\"\n      }));\n    }\n  }\n\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(`Error while disconnecting`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const adapter = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2] || this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n\n      if (adapter) {\n        const walletConnectStatus = adapter === null || adapter === void 0 ? void 0 : adapter.status;\n        log.debug(\"trying refreshing wc session\", visibility, walletConnectStatus);\n\n        if (visibility && (walletConnectStatus === ADAPTER_STATUS.READY || walletConnectStatus === ADAPTER_STATUS.CONNECTING)) {\n          log.debug(\"refreshing wc session\"); // refreshing session for wallet connect whenever modal is opened.\n\n          try {\n            adapter.connect();\n          } catch (error) {\n            log.error(`Error while disconnecting to wallet connect in core`, error);\n          }\n        }\n      }\n    });\n  }\n\n}\n\nexport { Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultOtherModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };","map":{"version":3,"sources":["../src/config.ts","../src/default.ts","../src/utils.ts","../src/modalManager.ts"],"names":["defaultSolanaDappModalConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","adapters","SOLANA_ADAPTERS","TORUS_SOLANA","label","showOnModal","showOnMobile","showOnDesktop","OPENLOGIN","PHANTOM","defaultEvmDappModalConfig","EIP155","EVM_ADAPTERS","TORUS_EVM","METAMASK","WALLET_CONNECT_V1","defaultSolanaWalletModalConfig","defaultEvmWalletModalConfig","defaultOtherModalConfig","OTHER","getDefaultAdapterModule","params","name","customChainConfig","clientId","sessionTime","web3AuthNetwork","Object","values","includes","Error","finalChainConfig","getChainConfig","chainId","WALLET_ADAPTERS","TorusWalletAdapter","adapter","chainConfig","SolanaWalletAdapter","MetamaskAdapter","PhantomAdapter","WalletConnectV1Adapter","OpenloginAdapter","getOpenloginDefaultOptions","defaultOptions","adapterSettings","network","languageMap","en","de","ja","ko","zh","es","fr","pt","getUserLanguage","defaultLanguage","userLanguage","browserLanguage","window","navigator","language","split","prototype","hasOwnProperty","call","Web3Auth","Web3AuthNoModal","constructor","options","_defineProperty","providedChainConfig","authMode","modalConfig","uiConfig","loginModal","LoginModal","theme","appName","appLogo","adapterListener","displayErrorsOnModal","modalZIndex","loginGridCol","primaryButton","subscribeToLoginModalEvents","initModal","checkInitRequirements","allAdapters","Set","keys","walletAdapters","adapterConfigurationPromises","map","adapterName","adapterConfig","log","debug","ad","type","ADAPTER_CATEGORY","IN_APP","EXTERNAL","cachedAdapter","setAdapterSettings","chainConfigProxy","coreOptions","adapterNames","Promise","all","hasInAppWallets","some","loginMethods","mergedLoginMethods","getAdapterSocialLogins","method","WALLET_CONNECT_V2","filter","initPromises","subscribeToAdapterEvents","status","ADAPTER_STATUS","NOT_READY","init","autoConnect","initializeInAppWallet","error","READY","hasExternalWallets","initExternalWalletContainer","initExternalWalletAdapters","showExternalWalletsOnly","connect","provider","open","resolve","reject","once","ADAPTER_EVENTS","CONNECTED","ERRORED","err","externalWalletsInitialized","adaptersConfig","forEach","then","addWalletLogins","undefined","catch","info","addSocialLogins","loginMethodsOrder","OPENLOGIN_PROVIDERS","on","LOGIN_MODAL_EVENTS","LOGIN","connectTo","loginParams","INIT_EXTERNAL_WALLETS","DISCONNECT","logout","MODAL_VISIBILITY","visibility","emit","walletConnectStatus","CONNECTING"],"mappings":"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","sourcesContent":["import { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, log, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthNoModal } from '@web3auth/no-modal';\nimport { LoginModal, getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';\n\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultOtherModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// warning: this function is not compatible with \"OTHER\" chain namespace.\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId,\n    sessionTime,\n    web3AuthNetwork\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n  const finalChainConfig = _objectSpread$1(_objectSpread$1({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions();\n    const adapter = new OpenloginAdapter(_objectSpread$1(_objectSpread$1({}, defaultOptions), {}, {\n      clientId,\n      chainConfig: _objectSpread$1({}, finalChainConfig),\n      adapterSettings: _objectSpread$1(_objectSpread$1({}, defaultOptions.adapterSettings), {}, {\n        clientId,\n        network: web3AuthNetwork\n      }),\n      sessionTime,\n      web3AuthNetwork\n    }));\n    return adapter;\n  }\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nconst languageMap = {\n  en: \"english\",\n  de: \"german\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n  fr: \"french\",\n  pt: \"portuguese\"\n};\nconst getUserLanguage = defaultLanguage => {\n  let userLanguage = defaultLanguage;\n  if (!userLanguage) {\n    const browserLanguage = typeof window !== \"undefined\" ? window.navigator.userLanguage || window.navigator.language || \"en-US\" : \"en-US\";\n    userLanguage = browserLanguage.split(\"-\")[0];\n  }\n  return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass Web3Auth extends Web3AuthNoModal {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2, _this$options$uiConfi3, _this$options$uiConfi4, _this$options$uiConfi5, _this$options$uiConfi6, _this$options$uiConfi7, _this$options$uiConfi8;\n    super(options);\n    _defineProperty(this, \"loginModal\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n    }\n    // get userLanguage\n    const defaultLanguage = getUserLanguage((_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.defaultLanguage);\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.theme,\n      appName: ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.appName) || \"blockchain\",\n      appLogo: ((_this$options$uiConfi4 = this.options.uiConfig) === null || _this$options$uiConfi4 === void 0 ? void 0 : _this$options$uiConfi4.appLogo) || \"\",\n      adapterListener: this,\n      displayErrorsOnModal: (_this$options$uiConfi5 = this.options.uiConfig) === null || _this$options$uiConfi5 === void 0 ? void 0 : _this$options$uiConfi5.displayErrorsOnModal,\n      defaultLanguage,\n      modalZIndex: ((_this$options$uiConfi6 = this.options.uiConfig) === null || _this$options$uiConfi6 === void 0 ? void 0 : _this$options$uiConfi6.modalZIndex) || \"99998\",\n      web3AuthNetwork: this.options.web3AuthNetwork,\n      loginGridCol: ((_this$options$uiConfi7 = this.options.uiConfig) === null || _this$options$uiConfi7 === void 0 ? void 0 : _this$options$uiConfi7.loginGridCol) || 3,\n      primaryButton: ((_this$options$uiConfi8 = this.options.uiConfig) === null || _this$options$uiConfi8 === void 0 ? void 0 : _this$options$uiConfi8.primaryButton) || \"socialLogin\"\n    });\n    this.subscribeToLoginModalEvents();\n  }\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig;\n    // merge default adapters with the custom configured adapters.\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;\n      // start with the default config of adapter.\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      };\n      // override the default config of adapter if some config is being provided by the user.\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n      this.modalConfig.adapters[adapterName] = adapterConfig;\n      // check if adapter is configured/added by user and exist in walletAdapters map.\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter);\n      // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return;\n        // add client id to adapter, same web3auth client id can be used in adapter.\n        // this id is being overridden if user is also passing client id in adapter's constructor.\n        this.walletAdapters[adapterName].setAdapterSettings({\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        });\n        // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n          this.walletAdapters[adapterName].setAdapterSettings({\n            chainConfig\n          });\n        }\n        return adapterName;\n      }\n    });\n    let adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      var _this$modalConfig$ada5, _this$modalConfig$ada6, _this$modalConfig$ada7, _this$modalConfig$ada8, _this$modalConfig$ada9;\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : (_this$modalConfig$ada6 = _this$modalConfig$ada5[adapter.name]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.showOnModal) !== true) return false;\n      if (!((_this$modalConfig$ada7 = this.modalConfig.adapters) !== null && _this$modalConfig$ada7 !== void 0 && (_this$modalConfig$ada8 = _this$modalConfig$ada7[adapter.name]) !== null && _this$modalConfig$ada8 !== void 0 && _this$modalConfig$ada8.loginMethods)) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(adapter.name, this.walletAdapters[adapter.name], (_this$modalConfig$ada9 = this.modalConfig.adapters[adapter.name]) === null || _this$modalConfig$ada9 === void 0 ? void 0 : _this$modalConfig$ada9.loginMethods);\n      if (Object.values(mergedLoginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, adapterNames, \"hasInAppWallets\");\n    // if both wc1 and wc2 are configured, give precedence to wc2.\n    if (this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1] && this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2]) {\n      delete this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      adapterNames = adapterNames.filter(ad => ad !== WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    }\n    // Now, initialize the adapters.\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n      try {\n        const adapter = this.walletAdapters[adapterName];\n        // only initialize a external adapter here if it is a cached adapter.\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        }\n        // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        });\n        // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada10;\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada10 = this.modalConfig.adapters) === null || _this$modalConfig$ada10 === void 0 ? void 0 : _this$modalConfig$ada10[adapterName].showOnModal);\n    });\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    }\n    // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    Object.keys(this.walletAdapters).forEach(async adapterName => {\n      const adapter = this.walletAdapters[adapterName];\n      if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n        log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n        this.subscribeToAdapterEvents(adapter);\n        // we are not initializing cached adapter here as it is already being initialized in initModal before.\n        if (this.cachedAdapter === adapterName) {\n          return;\n        }\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }).then(() => {\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          this.loginModal.addWalletLogins(adaptersConfig, {\n            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n          });\n          return undefined;\n        }).catch(error => log.error(error, \"error while initializing adapter\"));\n      }\n    });\n  }\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada11, _this$options$uiConfi9, _this$options$uiConfi10, _this$options$uiConfi11;\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada11 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada11 === void 0 ? void 0 : _this$modalConfig$ada11.loginMethods), ((_this$options$uiConfi9 = this.options.uiConfig) === null || _this$options$uiConfi9 === void 0 ? void 0 : _this$options$uiConfi9.loginMethodsOrder) || OPENLOGIN_PROVIDERS, _objectSpread(_objectSpread({}, this.options.uiConfig), {}, {\n        loginGridCol: ((_this$options$uiConfi10 = this.options.uiConfig) === null || _this$options$uiConfi10 === void 0 ? void 0 : _this$options$uiConfi10.loginGridCol) || 3,\n        primaryButton: ((_this$options$uiConfi11 = this.options.uiConfig) === null || _this$options$uiConfi11 === void 0 ? void 0 : _this$options$uiConfi11.primaryButton) || \"socialLogin\"\n      }));\n    }\n  }\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(`Error while disconnecting`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const adapter = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2] || this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      if (adapter) {\n        const walletConnectStatus = adapter === null || adapter === void 0 ? void 0 : adapter.status;\n        log.debug(\"trying refreshing wc session\", visibility, walletConnectStatus);\n        if (visibility && (walletConnectStatus === ADAPTER_STATUS.READY || walletConnectStatus === ADAPTER_STATUS.CONNECTING)) {\n          log.debug(\"refreshing wc session\");\n          // refreshing session for wallet connect whenever modal is opened.\n          try {\n            adapter.connect();\n          } catch (error) {\n            log.error(`Error while disconnecting to wallet connect in core`, error);\n          }\n        }\n      }\n    });\n  }\n}\n\nexport { Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultOtherModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };\n//# sourceMappingURL=modal.esm.js.map\n"]},"metadata":{},"sourceType":"module"}