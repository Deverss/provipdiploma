{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\n\nconst rlp_1 = require(\"@ethereumjs/rlp\");\n\nconst util_1 = require(\"@ethereumjs/util\");\n\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nconst baseTransaction_1 = require(\"./baseTransaction\");\n\nconst types_1 = require(\"./types\");\n\nconst util_2 = require(\"./util\");\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\n\nclass Transaction extends baseTransaction_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    super({ ...txData,\n      type: TRANSACTION_TYPE\n    }, opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n\n    baseTransaction_1.BaseTransaction._validateNotArray(txData);\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n    }\n\n    const freeze = (opts === null || opts === void 0 ? void 0 : opts.freeze) ?? true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  static fromTxData(txData, opts = {}) {\n    return new Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  static fromSerializedTx(serialized, opts = {}) {\n    const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  static fromValuesArray(values, opts = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    (0, util_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  raw() {\n    return [(0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n\n\n  serialize() {\n    return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));\n  }\n\n  _getMessageToSign() {\n    const values = [(0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, util_1.toBuffer)(this.common.chainId()));\n      values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n      values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n    }\n\n    return values;\n  }\n\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n    } else {\n      return message;\n    }\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return super.getDataFee();\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n      }\n\n      return this.cache.hash;\n    }\n\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    const message = this._getMessageToSign();\n\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n  }\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n\n    this._validateHighS();\n\n    try {\n      return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  _processSignature(v, r, s) {\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n\n    const opts = { ...this.txOptions,\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: (0, util_1.bufferToBigInt)(r),\n      s: (0, util_1.bufferToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  toJSON() {\n    return {\n      nonce: (0, util_1.bigIntToHex)(this.nonce),\n      gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, util_1.bigIntToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined; // Check for valid v values in the scope of a signed legacy tx\n\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    } // No unsigned tx and EIP-155 activated and chain ID included\n\n\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n\n}\n\nexports.Transaction = Transaction;","map":{"version":3,"sources":["../src/legacyTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst types_1 = require(\"./types\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork('spuriousDragon')) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        return new Transaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));\n    }\n    _getMessageToSign() {\n        const values = [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, util_1.toBuffer)(this.common.chainId()));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n        }\n        return values;\n    }\n    getMessageToSign(hashMessage = true) {\n        const message = this._getMessageToSign();\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: super.getDataFee(),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return super.getDataFee();\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        const message = this._getMessageToSign();\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    _processSignature(v, r, s) {\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * BigInt(2) + BigInt(8);\n        }\n        const opts = { ...this.txOptions, common: this.common };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    toJSON() {\n        return {\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n    _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            v !== 0 &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            v !== 27 &&\n            v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            }\n            else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.Transaction = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map"]},"metadata":{},"sourceType":"script"}