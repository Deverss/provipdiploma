{"ast":null,"code":"import randombytes from 'randombytes';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\nvar randomId = function randomId() {\n  return randombytes(32).toString(\"hex\");\n};\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar URLWithHashParams = /*#__PURE__*/function (_URL) {\n  _inherits(URLWithHashParams, _URL);\n\n  var _super = _createSuper(URLWithHashParams);\n\n  function URLWithHashParams() {\n    var _this;\n\n    _classCallCheck(this, URLWithHashParams);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"hashParams\", new URLSearchParams());\n\n    return _this;\n  }\n\n  _createClass(URLWithHashParams, [{\n    key: \"toString\",\n    value: function toString() {\n      this.hash = this.hashParams.toString();\n      return _get(_getPrototypeOf(URLWithHashParams.prototype), \"toString\", this).call(this);\n    }\n  }]);\n\n  return URLWithHashParams;\n}( /*#__PURE__*/_wrapNativeSuper(URL));\n\nvar base64url = base64urlLib;\n\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\n\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nvar keccak = keccakLib;\n\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\n\nfunction keccak256(str) {\n  var input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  var data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"names":["randomId","randombytes","toString","URLWithHashParams","URL","URLSearchParams","hash","hashParams","call","base64url","base64urlLib","safebtoa","str","encode","safeatob","decode","keccak","keccakLib","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","keccak256","input","slice","length","Buffer","from","data","update","digest","padStart"],"mappings":"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","sourcesContent":["import randombytes from 'randombytes';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\nvar randomId = function randomId() {\n  return randombytes(32).toString(\"hex\");\n};\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar URLWithHashParams = /*#__PURE__*/function (_URL) {\n  _inherits(URLWithHashParams, _URL);\n  var _super = _createSuper(URLWithHashParams);\n  function URLWithHashParams() {\n    var _this;\n    _classCallCheck(this, URLWithHashParams);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"hashParams\", new URLSearchParams());\n    return _this;\n  }\n  _createClass(URLWithHashParams, [{\n    key: \"toString\",\n    value: function toString() {\n      this.hash = this.hashParams.toString();\n      return _get(_getPrototypeOf(URLWithHashParams.prototype), \"toString\", this).call(this);\n    }\n  }]);\n  return URLWithHashParams;\n}( /*#__PURE__*/_wrapNativeSuper(URL));\n\nvar base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nvar keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  var input = str;\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n  var data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };\n//# sourceMappingURL=openloginUtils.esm.js.map\n"]},"metadata":{},"sourceType":"module"}