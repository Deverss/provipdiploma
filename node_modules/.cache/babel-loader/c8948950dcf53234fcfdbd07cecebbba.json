{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { PublicKey, Connection, VersionedTransaction, Keypair } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\"); // This calls from the prefs controller\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\"); // This calls the UI login function\n\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\n\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"private_key\", getPrivateKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\n\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\n\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass BaseInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  async setupProvider(injectedProvider) {\n    const engine = new JRPCEngine();\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    engine.push(configMiddleware);\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async lookupNetwork() {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  getInjectedProviderProxy(_) {\n    return undefined;\n  }\n\n}\n\nconst getBaseProviderHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async req => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async req => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return {\n        signature: txRes.signature\n      };\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$2({}, req));\n    res.result = result;\n  });\n}\n\nclass PhantomInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  getInjectedProviderProxy(injectedProvider) {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n\n}\n\nconst isVersionTransction = transaction => transaction.version !== undefined || transaction instanceof VersionedTransaction;\n\nconst getSlopeHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async req => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async req => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = await provider.request({\n        method: \"solana_provider_config\",\n        params: []\n      });\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return {\n        signature: res\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2, _data$signatures;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const {\n        length\n      } = allTxns;\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? item.message.serialize() : item.serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n\n      const {\n        msg,\n        data\n      } = await injectedProvider.signAllTransactions(unsignedTx);\n      if (!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length) throw new Error(msg);\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    }\n  };\n  return providerHandlers;\n};\n\nclass SlopeInjectedProxyProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getSolflareHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n\n  solflareProviderHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n\n  return solflareProviderHandlers;\n};\n\nclass SolflareInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(params) {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    });\n  }\n\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorer],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    });\n  }\n\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`; // Check if chainId changed and trigger event\n\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n\n}\n\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n    signTransaction: async req => {\n      var _req$params;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = req.params.message;\n\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const _providerEngineProxy = getProviderEngineProxy();\n\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = req.params.message;\n\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), {\n          encoding: \"base64\",\n          preflightCommitment: \"confirmed\"\n        }]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5, _req$params6;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n\n      for (const tx of txns || []) {\n        const transaction = tx;\n\n        if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n          transaction.sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n\n      return txns;\n    }\n  };\n  return providerHandlers;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({\n      chainId: chainConfig.chainId\n    });\n\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n\n    return this.state.chainId;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 9\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return {\n      signature\n    };\n  }\n\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return signedTransaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions\n      }\n    });\n    return signedTransactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n\n}\n\nexport { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, TorusInjectedProvider };","map":{"version":3,"sources":["../src/rpc/JrpcClient.ts","../src/rpc/solanaRpcMiddlewares.ts","../src/providers/injectedProviders/base/baseInjectedProvider.ts","../src/providers/injectedProviders/base/providerHandlers.ts","../src/providers/injectedProviders/injectedProviderProxy.ts","../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../src/providers/injectedProviders/slope/providerHandlers.ts","../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../src/providers/injectedProviders/solflare/providerHandlers.ts","../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../src/providers/injectedProviders/torus/providerHandlers.ts","../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../src/solanaWallet.ts"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","requestAccounts","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createGenericJRPCMiddleware","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","BaseInjectedProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","WalletLoginError","unsupportedOperation","setupProvider","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getBaseProviderHandlers","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","transaction","params","message","sigData","display","signature","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","isVersionTransction","version","VersionedTransaction","getSlopeHandlers","getProviderEngineProxy","data","connect","txMessage","invalidRequest","serialize","serializeMessage","PublicKey","decode","addSignature","Buffer","from","custom","code","conn","Connection","sendRawTransaction","allTxns","unsignedTx","i","item","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getTorusHandlers","sendTransaction","transactions","TorusInjectedProvider","addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","WalletInitializationError","rpcConnectionError","emit","on","parseInt","configure","privKey","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","secretKey","sign","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","encoding","preflightCommitment","txns","tx","SolanaPrivateKeyProvider","providerFactory","enable","privateKey","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainSwitchMiddleware","accountHandlers","SolanaWallet","_defineProperty","signedTransaction","signedTransactions","args"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { PublicKey, Connection, VersionedTransaction, Keypair } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"private_key\", getPrivateKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async switchChain(_) {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n  async setupProvider(injectedProvider) {\n    const engine = new JRPCEngine();\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    engine.push(configMiddleware);\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async lookupNetwork() {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\";\n  }\n  getInjectedProviderProxy(_) {\n    return undefined;\n  }\n}\n\nconst getBaseProviderHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async req => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async req => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return {\n        signature: txRes.signature\n      };\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$2({}, req));\n    res.result = result;\n  });\n}\n\nclass PhantomInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n  getInjectedProviderProxy(injectedProvider) {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n\nconst isVersionTransction = transaction => transaction.version !== undefined || transaction instanceof VersionedTransaction;\nconst getSlopeHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const {\n        data\n      } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async req => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async req => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({\n        message: \"Invalid transaction message\"\n      });\n      const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n      const {\n        data\n      } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = await provider.request({\n        method: \"solana_provider_config\",\n        params: []\n      });\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return {\n        signature: res\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2, _data$signatures;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const allTxns = req.params.message;\n      const {\n        length\n      } = allTxns;\n      const unsignedTx = [];\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? item.message.serialize() : item.serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const {\n        msg,\n        data\n      } = await injectedProvider.signAllTransactions(unsignedTx);\n      if (!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length) throw new Error(msg);\n      const publicKey = new PublicKey(data.publicKey);\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n      return allTxns;\n    }\n  };\n  return providerHandlers;\n};\n\nclass SlopeInjectedProxyProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n\nconst getSolflareHandlers = (injectedProvider, getProviderEngineProxy) => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n  solflareProviderHandlers.signAndSendTransaction = async req => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = await provider.request({\n      method: \"solana_provider_config\",\n      params: []\n    });\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return {\n      signature: res\n    };\n  };\n  return solflareProviderHandlers;\n};\n\nclass SolflareInjectedProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async switchChain(params) {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    });\n  }\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorer],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    });\n  }\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n    signTransaction: async req => {\n      var _req$params;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params2;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = req.params.message;\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), {\n          encoding: \"base64\",\n          preflightCommitment: \"confirmed\"\n        }]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5, _req$params6;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n          transaction.sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    }\n  };\n  return providerHandlers;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n    return this.state.chainId;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 9\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n    this.provider = provider;\n  }\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return {\n      signature\n    };\n  }\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return signedTransaction;\n  }\n  async signAllTransactions(transactions) {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions\n      }\n    });\n    return signedTransactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n}\n\nexport { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, TorusInjectedProvider };\n//# sourceMappingURL=solanaProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}