{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\n\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\n\nconst getPublicKey = ed25519.sync.getPublicKey;\n\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\n\nconst verify = ed25519.sync.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n}; // Class wrapping a plain object\n\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n\nlet _Symbol$toStringTag;\n/**\n * Maximum length of derived pubkey seed\n */\n\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\n_Symbol$toStringTag = Symbol.toStringTag;\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n\n\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n\n    return keySegments;\n  }\n\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n\n    return;\n  }\n\n  get length() {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n\n}\n/**\n * Layout for a public key\n */\n\n\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\n\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\n\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\n\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n\n}\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\n\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  get version() {\n    return 'legacy';\n  }\n\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n\n  get addressTableLookups() {\n    return [];\n  }\n\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n/**\n * Message constructor arguments\n */\n\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version() {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups() {\n    let count = 0;\n\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n\n    return count;\n  }\n\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n} // eslint-disable-next-line no-redeclare\n\n\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n\n    return maskedPrefix;\n  },\n\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions;\n\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n\n\n  verifySignatures(requireAllSignatures) {\n    return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n\n    const instructions = [];\n\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n\n}\n/**\n * Versioned transaction class\n */\n\n\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n\n      this.signatures = defaultSignatures;\n    }\n\n    this.message = message;\n  }\n\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData$1(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\n\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n\n      return rpc;\n    };\n\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n\n  call(...args) {\n    var _this$underlyingSocke;\n\n    const readyState = (_this$underlyingSocke = this.underlyingSocket) === null || _this$underlyingSocke === void 0 ? void 0 : _this$underlyingSocke.readyState;\n\n    if (readyState === 1\n    /* WebSocket.OPEN */\n    ) {\n        return super.call(...args);\n      }\n\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n\n  notify(...args) {\n    var _this$underlyingSocke2;\n\n    const readyState = (_this$underlyingSocke2 = this.underlyingSocket) === null || _this$underlyingSocke2 === void 0 ? void 0 : _this$underlyingSocke2.readyState;\n\n    if (readyState === 1\n    /* WebSocket.OPEN */\n    ) {\n        return super.notify(...args);\n      }\n\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\n\nfunction decodeData(type, data) {\n  let decoded;\n\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n\n  return decoded;\n} /// The serialized size of lookup table metadata\n\n\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(), // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n\n  const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\n\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n\n  return putativeUrl;\n}\n/** @internal */\n\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\n\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n            break;\n          }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\n\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/** @internal */\n\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\n\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\n\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\n\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\n\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\n\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\"}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n\n        const args = this._buildArgs([], commitment, undefined\n        /* encoding */\n        , config);\n\n        const requestHash = fastStableStringify$1(args);\n\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n\n        return await requestPromises[requestHash];\n      };\n    })();\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      var _config$abortSignal;\n\n      const config = strategy;\n\n      if ((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n\n          if (response == null) {\n            return;\n          }\n\n          const {\n            context,\n            value\n          } = response;\n\n          if (value == null) {\n            return;\n          }\n\n          if (value !== null && value !== void 0 && value.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n\n                  break;\n                }\n\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n\n              case 'processed':\n              case 'recent':\n            }\n\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        var _signatureStatus;\n\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n\n          if (status == null) {\n            break;\n          }\n\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n\n          signatureStatus = status;\n          break;\n        }\n\n        if ((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n\n          }\n\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n\n\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n\n\n  async getRecentPrioritizationFees(config) {\n    var _config$lockedWritabl;\n\n    const accounts = config === null || config === void 0 ? void 0 : (_config$lockedWritabl = config.lockedWritableAccounts) === null || _config$lockedWritabl === void 0 ? void 0 : _config$lockedWritabl.map(key => key.toBase58());\n\n    const args = this._buildArgs(accounts !== null && accounts !== void 0 && accounts.length ? [accounts] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            const {\n              result\n            } = res;\n            return result ? { ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: { ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */\n      , config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      const result = res.result;\n      if (!result) return result;\n      return { ...result,\n        transaction: { ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n\n    return res.result;\n  }\n\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n\n      return res.result;\n    }\n\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping'); // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, { ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _setSubscription(hash, nextSubscription) {\n    var _this$_subscriptionsB;\n\n    const prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state); // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n\n    if (hash == null) {\n      return () => {};\n    }\n\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._setSubscription(hash, { ...subscription,\n                state: 'subscribing'\n              });\n\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n\n              this._setSubscription(hash, { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'pending'\n              });\n\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._setSubscription(hash, { ...subscription,\n                    state: 'subscribed'\n                  });\n\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'unsubscribed'\n              });\n\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n\n    const publicKey = secretKey.slice(32, 64);\n\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n\n}\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\n\n\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n\n    return type;\n  }\n\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n}\n\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111'); // Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = (key, ...msgs) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\n\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */\n      ).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n\n    return VoteProgram.withdraw(params);\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/rpc-websocket.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"names":["ed25519","utils","sha512Sync","m","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","default","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","accountKeys","recentBlockhash","indexToProgramIds","args","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","underlyingSocket","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","socket","readyState","reject","notify","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","requestPromises","requestHash","fastStableStringify","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","_keypair","keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":";;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;;AAWAA,OAAO,CAACC,KAARD,CAAcE,UAAdF,GAA2B,CAAC,GAAGG,CAAJ,KAAUC,MAAM,CAACJ,OAAO,CAACC,KAARD,CAAcK,WAAdL,CAA0B,GAAGG,CAA7BH,CAAD,CAA3CA;;AAEO,MAAMM,kBAAkB,GAAGN,OAAO,CAACC,KAARD,CAAcO,gBAAzC;;AACA,MAAMC,eAAe,GAAG,MAAsB;AACnD,QAAMC,aAAa,GAAGT,OAAO,CAACC,KAARD,CAAcO,gBAAdP,EAAtB;AACA,QAAMU,SAAS,GAAGC,YAAY,CAACF,aAAD,CAA9B;AACA,QAAMG,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB;AACAD,EAAAA,SAAS,CAACE,GAAVF,CAAcH,aAAdG;AACAA,EAAAA,SAAS,CAACE,GAAVF,CAAcF,SAAdE,EAAyB,EAAzBA;AACA,SAAO;AACLF,IAAAA,SADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAVM;;AAWA,MAAMD,YAAY,GAAGX,OAAO,CAACe,IAARf,CAAaW,YAAlC;;AACA,SAASK,SAAT,CAAmBN,SAAnB,EAAmD;AACxD,MAAI;AACFV,IAAAA,OAAO,CAACiB,KAARjB,CAAckB,OAAdlB,CAAsBU,SAAtBV,EAAiC;AAAI;AAArCA;AACA,WAAO,IAAP;AACD,GAHD,CAGE,MAAM;AACN,WAAO,KAAP;AACF;AACF;;AACO,MAAMmB,IAAI,GAAG,CAClBC,OADkB,EAElBR,SAFkB,KAGfZ,OAAO,CAACe,IAARf,CAAamB,IAAbnB,CAAkBoB,OAAlBpB,EAA2BY,SAAS,CAACS,KAAVT,CAAgB,CAAhBA,EAAmB,EAAnBA,CAA3BZ,CAHE;;AAIA,MAAMsB,MAAM,GAAGtB,OAAO,CAACe,IAARf,CAAasB,MAA5B;;AC3CA,MAAMC,QAAQ,GAAIC,GAAwC,IAAa;AAC5E,MAAIC,MAAM,CAACC,QAAPD,CAAgBD,GAAhBC,CAAJ,EAA0B;AACxB,WAAOD,GAAP;AACD,GAFD,MAEO,IAAIA,GAAG,YAAYX,UAAnB,EAA+B;AACpC,WAAOY,MAAM,CAACE,IAAPF,CAAYD,GAAG,CAACI,MAAhBH,EAAwBD,GAAG,CAACK,UAA5BJ,EAAwCD,GAAG,CAACM,UAA5CL,CAAP;AACD,GAFM,MAEA;AACL,WAAOA,MAAM,CAACE,IAAPF,CAAYD,GAAZC,CAAP;AACF;AACD,CARM,C,CCCP;;;AACO,MAAMM,MAAN,CAAa;AAClBC,EAAAA,WAAW,CAACC,UAAD,EAAkB;AAC3BC,IAAAA,MAAM,CAACC,MAAPD,CAAc,IAAdA,EAAoBD,UAApBC;AACF;;AAEAE,EAAAA,MAAM,GAAW;AACf,WAAOX,MAAM,CAACE,IAAPF,CAAYY,SAAS,CAACC,aAAD,EAAgB,IAAhB,CAArBb,CAAP;AACF;;AAEa,SAANc,MAAM,CAACC,IAAD,EAAoB;AAC/B,WAAOC,WAAW,CAACH,aAAD,EAAgB,IAAhB,EAAsBE,IAAtB,CAAlB;AACF;;AAEsB,SAAfE,eAAe,CAACF,IAAD,EAAoB;AACxC,WAAOG,oBAAoB,CAACL,aAAD,EAAgB,IAAhB,EAAsBE,IAAtB,CAA3B;AACF;;AAfkB,C,CAkBpB;AACA;;;AACO,MAAMI,IAAN,SAAmBb,MAAnB,CAA0B;AAE/BC,EAAAA,WAAW,CAACC,UAAD,EAAkB;AAC3B,UAAMA,UAAN;AAFFY,SAAAA,IAAAA,GAAe,EAAfA;;AAGE,QAAIX,MAAM,CAACY,IAAPZ,CAAYD,UAAZC,EAAwBa,MAAxBb,KAAmC,CAAvC,EAA0C;AACxC,YAAM,IAAIc,KAAJ,CAAU,iCAAV,CAAN;AACF;;AACAd,IAAAA,MAAM,CAACY,IAAPZ,CAAYD,UAAZC,EAAwBe,GAAxBf,CAA4BgB,GAAG,IAAI;AACjC,WAAKL,IAAL,GAAYK,GAAZ;AACD,KAFDhB;AAGF;;AAV+B;;AAapBI,MAAAA,aAAiC,GAAG,IAAIa,GAAJ,EAApCb;;;AC5Bb;AACA;AACA;;;AACO,MAAMc,eAAe,GAAG,EAAxB;AAEP;AACA;AACA;;AACO,MAAMC,iBAAiB,GAAG,EAA1B;AAEP;AACA;AACA;;AAgBA,SAASC,eAAT,CAAyBC,KAAzB,EAA2E;AACzE,SAAQA,KAAK,CAAmBC,GAAxBD,KAAgCE,SAAxC;AACF,C,CAEA;;;AACA,IAAIC,sBAAsB,GAAG,CAA7B;AAEA;AACA;AACA;;AAFA,mBAwFOkB,GAAAA,MAAM,CAACC,WAxFd;;AAGO,MAAMlB,SAAN,SAAwB5B,MAAxB,CAA+B;AACpC;;AAGA;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACuB,KAAD,EAA2B;AACpC,UAAM,EAAN;AAAU,SAPZC,GAOY,GAPT,KAAA,CAOS;;AACV,QAAIF,eAAe,CAACC,KAAD,CAAnB,EAA4B;AAC1B,WAAKC,GAAL,GAAWD,KAAK,CAACC,GAAjB;AACD,KAFD,MAEO;AACL,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,cAAMK,OAAO,GAAGC,IAAI,CAACtB,MAALsB,CAAYN,KAAZM,CAAhB;;AACA,YAAID,OAAO,CAACb,MAARa,IAAkBP,iBAAtB,EAAyC;AACvC,gBAAM,IAAIL,KAAJ,CAAW,0BAAX,CAAN;AACF;;AACA,aAAKQ,GAAL,GAAW,IAAIM,EAAJ,CAAOF,OAAP,CAAX;AACD,OAPD,MAOO;AACL,aAAKJ,GAAL,GAAW,IAAIM,EAAJ,CAAOP,KAAP,CAAX;AACF;;AAEA,UAAI,KAAKC,GAAL,CAAS1B,UAAT,KAAwBuB,iBAA5B,EAA+C;AAC7C,cAAM,IAAIL,KAAJ,CAAW,0BAAX,CAAN;AACF;AACF;AACF;AAEA;AACF;AACA;;;AACe,SAANe,MAAM,GAAc;AACzB,UAAMb,GAAG,GAAG,IAAIS,SAAJ,CAAcD,sBAAd,CAAZ;AACAA,IAAAA,sBAAsB,IAAI,CAA1BA;AACA,WAAO,IAAIC,SAAJ,CAAcT,GAAG,CAAC3B,QAAJ2B,EAAd,CAAP;AACF;AAEA;AACF;AACA;AACA;;AAGE;AACF;AACA;;;AACEe,EAAAA,MAAM,CAACvD,SAAD,EAAgC;AACpC,WAAO,KAAK8C,GAAL,CAASU,EAAT,CAAYxD,SAAS,CAAC8C,GAAtB,CAAP;AACF;AAEA;AACF;AACA;;;AACEW,EAAAA,QAAQ,GAAW;AACjB,WAAON,IAAI,CAACzB,MAALyB,CAAY,KAAKO,OAAL,EAAZP,CAAP;AACF;;AAEAQ,EAAAA,MAAM,GAAW;AACf,WAAO,KAAKF,QAAL,EAAP;AACF;AAEA;AACF;AACA;;;AACEC,EAAAA,OAAO,GAAe;AACpB,UAAME,GAAG,GAAG,KAAK/C,QAAL,EAAZ;AACA,WAAO,IAAIV,UAAJ,CAAeyD,GAAG,CAAC1C,MAAnB,EAA2B0C,GAAG,CAACzC,UAA/B,EAA2CyC,GAAG,CAACxC,UAA/C,CAAP;AACF;AAEA;AACF;AACA;;;AACEP,EAAAA,QAAQ,GAAW;AACjB,UAAMgD,CAAC,GAAG,KAAKf,GAAL,CAASgB,WAAT,CAAqB/C,MAArB,CAAV;;AACA,QAAI8C,CAAC,CAACxB,MAAFwB,KAAalB,iBAAjB,EAAoC;AAClC,aAAOkB,CAAP;AACF;;AAEA,UAAME,OAAO,GAAGhD,MAAM,CAACiD,KAAPjD,CAAa,EAAbA,CAAhB;AACA8C,IAAAA,CAAC,CAACI,IAAFJ,CAAOE,OAAPF,EAAgB,KAAKA,CAAC,CAACxB,MAAvBwB;AACA,WAAOE,OAAP;AACF;;AAEmC,OAAA,mBAAA,IAAA;AACjC,WAAoB,aAAA,KAAKK,QAAL,EAAkB,GAAtC;AACF;AAEA;AACF;AACA;;;AACEA,EAAAA,QAAQ,GAAW;AACjB,WAAO,KAAKX,QAAL,EAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;AACE;;;AAC2B,eAAdY,cAAc,CACzBC,aADyB,EAEzBC,IAFyB,EAGzBC,SAHyB,EAIL;AACpB,UAAMtD,MAAM,GAAGH,MAAM,CAAC0D,MAAP1D,CAAc,CAC3BuD,aAAa,CAACzD,QAAdyD,EAD2B,EAE3BvD,MAAM,CAACE,IAAPF,CAAYwD,IAAZxD,CAF2B,EAG3ByD,SAAS,CAAC3D,QAAV2D,EAH2B,CAAdzD,CAAf;AAKA,UAAM2D,cAAc,GAAGC,MAAM,CAACzD,MAAD,CAA7B;AACA,WAAO,IAAI+B,SAAJ,CAAcyB,cAAd,CAAP;AACF;AAEA;AACF;AACA;;AACE;;;AAC+B,SAAxBE,wBAAwB,CAC7BC,KAD6B,EAE7BL,SAF6B,EAGlB;AACX,QAAItD,MAAM,GAAGH,MAAM,CAACiD,KAAPjD,CAAa,CAAbA,CAAb;AACA8D,IAAAA,KAAK,CAACC,OAAND,CAAc,UAAUN,IAAV,EAAgB;AAC5B,UAAIA,IAAI,CAAClC,MAALkC,GAAc7B,eAAlB,EAAmC;AACjC,cAAM,IAAIqC,SAAJ,CAAe,0BAAf,CAAN;AACF;;AACA7D,MAAAA,MAAM,GAAGH,MAAM,CAAC0D,MAAP1D,CAAc,CAACG,MAAD,EAASL,QAAQ,CAAC0D,IAAD,CAAjB,CAAdxD,CAATG;AACD,KALD2D;AAMA3D,IAAAA,MAAM,GAAGH,MAAM,CAAC0D,MAAP1D,CAAc,CACrBG,MADqB,EAErBsD,SAAS,CAAC3D,QAAV2D,EAFqB,EAGrBzD,MAAM,CAACE,IAAPF,CAAY,uBAAZA,CAHqB,CAAdA,CAATG;AAKA,UAAMwD,cAAc,GAAGC,MAAM,CAACzD,MAAD,CAA7B;;AACA,QAAIZ,SAAS,CAACoE,cAAD,CAAb,EAA+B;AAC7B,YAAM,IAAIpC,KAAJ,CAAW,gDAAX,CAAN;AACF;;AACA,WAAO,IAAIW,SAAJ,CAAcyB,cAAd,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE;;;AACiC,eAApBM,oBAAoB,CAC/BH,KAD+B,EAE/BL,SAF+B,EAGX;AACpB,WAAO,KAAKI,wBAAL,CAA8BC,KAA9B,EAAqCL,SAArC,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC+B,SAAtBS,sBAAsB,CAC3BJ,KAD2B,EAE3BL,SAF2B,EAGN;AACrB,QAAIU,KAAK,GAAG,GAAZ;AACA,QAAIC,OAAJ;;AACA,WAAOD,KAAK,IAAI,CAAhB,EAAmB;AACjB,UAAI;AACF,cAAME,cAAc,GAAGP,KAAK,CAACJ,MAANI,CAAa9D,MAAM,CAACE,IAAPF,CAAY,CAACmE,KAAD,CAAZnE,CAAb8D,CAAvB;AACAM,QAAAA,OAAO,GAAG,KAAKP,wBAAL,CAA8BQ,cAA9B,EAA8CZ,SAA9C,CAAVW;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZ,YAAIA,GAAG,YAAYN,SAAnB,EAA8B;AAC5B,gBAAMM,GAAN;AACF;;AACAH,QAAAA,KAAK;AACL;AACF;;AACA,aAAO,CAACC,OAAD,EAAUD,KAAV,CAAP;AACF;;AACA,UAAM,IAAI5C,KAAJ,CAAW,+CAAX,CAAN;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACiC,eAAlBgD,kBAAkB,CAC7BT,KAD6B,EAE7BL,SAF6B,EAGC;AAC9B,WAAO,KAAKS,sBAAL,CAA4BJ,KAA5B,EAAmCL,SAAnC,CAAP;AACF;AAEA;AACF;AACA;;;AACkB,SAATlE,SAAS,CAACiF,UAAD,EAAyC;AACvD,UAAMC,MAAM,GAAG,IAAIvC,SAAJ,CAAcsC,UAAd,CAAf;AACA,WAAOjF,SAAS,CAACkF,MAAM,CAAC9B,OAAP8B,EAAD,CAAhB;AACF;;AA7MoC;;AAAzBvC,SAAS,CA2CbK,OA3CIL,GA2CiB,IAAIA,SAAJ,CAAc,kCAAd,CA3CjBA;AAgNbrB,aAAa,CAACxB,GAAdwB,CAAkBqB,SAAlBrB,EAA6B;AAC3B6D,EAAAA,IAAI,EAAE,QADqB;AAE3BC,EAAAA,MAAM,EAAE,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD;AAFmB,CAA7B9D;ACzPA;AACA;AACA;AACA;AACA;;AACO,MAAM+D,OAAN,CAAc;AACnB;;AAEA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACErE,EAAAA,WAAW,CAACpB,SAAD,EAAyC;AAAA,SAZ5C0F,UAY4C,GAZlC,KAAA,CAYkC;AAZlC,SAEVC,UAFU,GAEA,KAAA,CAFA;;AAahB,QAAI3F,SAAJ,EAAe;AACb,YAAM4F,eAAe,GAAGjF,QAAQ,CAACX,SAAD,CAAhC;;AACA,UAAIA,SAAS,CAACmC,MAAVnC,KAAqB,EAAzB,EAA6B;AAC3B,cAAM,IAAIoC,KAAJ,CAAU,qBAAV,CAAN;AACF;;AACA,WAAKsD,UAAL,GAAkBE,eAAe,CAACnF,KAAhBmF,CAAsB,EAAtBA,EAA0B,EAA1BA,CAAlB;AACA,WAAKD,UAAL,GAAkBC,eAAe,CAACnF,KAAhBmF,CAAsB,CAAtBA,EAAyB,EAAzBA,CAAlB;AACD,KAPD,MAOO;AACL,WAAKD,UAAL,GAAkBhF,QAAQ,CAACjB,kBAAkB,EAAnB,CAA1B;AACA,WAAKgG,UAAL,GAAkB/E,QAAQ,CAACZ,YAAY,CAAC,KAAK4F,UAAN,CAAb,CAA1B;AACF;AACF;AAEA;AACF;AACA;;;AACe,MAAT7F,SAAS,GAAc;AACzB,WAAO,IAAIiD,SAAJ,CAAc,KAAK2C,UAAnB,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACe,MAAT1F,SAAS,GAAW;AACtB,WAAOa,MAAM,CAAC0D,MAAP1D,CAAc,CAAC,KAAK8E,UAAN,EAAkB,KAAKD,UAAvB,CAAd7E,EAAkD,EAAlDA,CAAP;AACF;;AA1CmB;;MCTRgF,gCAAgC,GAAG,IAAI9C,SAAJ,CAC9C,6CAD8C,C;ACFhD;AACA;AACA;AACA;AACA;AACA;AACA;;MACa+C,gBAAgB,GAAG,OAAO,EAAP,GAAY,C;AAErC,MAAMC,mBAAmB,GAAG,IAA5B;AAEA,MAAMC,yBAAyB,GAAG,EAAlC;;ACXA,MAAMC,0CAAN,SAAyD7D,KAAzD,CAA+D;AAGpEhB,EAAAA,WAAW,CAAC8E,SAAD,EAAoB;AAC7B,UAAO,aAAYA,SAAU,sCAA7B;AAAoE,SAHtEA,SAGsE,GAH7D,KAAA,CAG6D;AACpE,SAAKA,SAAL,GAAiBA,SAAjB;AACF;;AANoE;;AAStE5E,MAAM,CAAC6E,cAAP7E,CACE2E,0CAA0C,CAACG,SAD7C9E,EAEE,MAFFA,EAGE;AACEqB,EAAAA,KAAK,EAAE;AADT,CAHFrB;;AAQO,MAAM+E,8BAAN,SAA6CjE,KAA7C,CAAmD;AAGxDhB,EAAAA,WAAW,CAAC8E,SAAD,EAAoBI,cAApB,EAA4C;AACrD,UACG,oCAAmCA,cAAc,CAACC,OAAfD,CAClC,CADkCA,CAElC,kBAFD,GAGC,qDAHD,GAIIJ,GAAAA,SAAU,0CALjB;AAME,SATJA,SASI,GATK,KAAA,CASL;AACF,SAAKA,SAAL,GAAiBA,SAAjB;AACF;;AAZwD;;AAe1D5E,MAAM,CAAC6E,cAAP7E,CAAsB+E,8BAA8B,CAACD,SAArD9E,EAAgE,MAAhEA,EAAwE;AACtEqB,EAAAA,KAAK,EAAE;AAD+D,CAAxErB;;AAIO,MAAMkF,mCAAN,SAAkDpE,KAAlD,CAAwD;AAG7DhB,EAAAA,WAAW,CAAC8E,SAAD,EAAoB;AAC7B,UAAO,aAAYA,SAAU,6CAA7B;AAA2E,SAH7EA,SAG6E,GAHpE,KAAA,CAGoE;AAC3E,SAAKA,SAAL,GAAiBA,SAAjB;AACF;;AAN6D;;AAS/D5E,MAAM,CAAC6E,cAAP7E,CAAsBkF,mCAAmC,CAACJ,SAA1D9E,EAAqE,MAArEA,EAA6E;AAC3EqB,EAAAA,KAAK,EAAE;AADoE,CAA7ErB;;ACtCO,MAAMmF,kBAAN,CAAyB;AAI9BrF,EAAAA,WAAW,CACTsF,iBADS,EAETC,sBAFS,EAGT;AAAA,SANFD,iBAME,GANe,KAAA,CAMf;AANe,SACjBC,sBADiB,GACK,KAAA,CADL;AAOf,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACF;;AAEAC,EAAAA,WAAW,GAA4B;AACrC,UAAMA,WAAW,GAAG,CAAC,KAAKF,iBAAN,CAApB;;AACA,QAAI,KAAKC,sBAAT,EAAiC;AAC/BC,MAAAA,WAAW,CAACC,IAAZD,CAAiB,KAAKD,sBAAL,CAA4BG,QAA7CF;AACAA,MAAAA,WAAW,CAACC,IAAZD,CAAiB,KAAKD,sBAAL,CAA4BI,QAA7CH;AACF;;AACA,WAAOA,WAAP;AACF;;AAEAI,EAAAA,GAAG,CAACC,KAAD,EAAuC;AACxC,SAAK,MAAMC,UAAX,IAAyB,KAAKN,WAAL,EAAzB,EAA6C;AAC3C,UAAIK,KAAK,GAAGC,UAAU,CAAC/E,MAAvB,EAA+B;AAC7B,eAAO+E,UAAU,CAACD,KAAD,CAAjB;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,IAAIC,UAAU,CAAC/E,MAApB8E;AACF;AACF;;AACA;AACF;;AAEU,MAAN9E,MAAM,GAAW;AACnB,WAAO,KAAKyE,WAAL,GAAmBO,IAAnB,GAA0BhF,MAAjC;AACF;;AAEAiF,EAAAA,mBAAmB,CACjBC,YADiB,EAEkB;AACnC;AACA,UAAMC,MAAM,GAAG,GAAf;;AACA,QAAI,KAAKnF,MAAL,GAAcmF,MAAM,GAAG,CAA3B,EAA8B;AAC5B,YAAM,IAAIlF,KAAJ,CAAU,uDAAV,CAAN;AACF;;AAEA,UAAMmF,WAAW,GAAG,IAAIhF,GAAJ,EAApB;AACA,SAAKqE,WAAL,GACGO,IADH,GAEGvC,OAFH,CAEW,CAACtC,GAAD,EAAM2E,KAAN,KAAgB;AACvBM,MAAAA,WAAW,CAACrH,GAAZqH,CAAgBjF,GAAG,CAACiB,QAAJjB,EAAhBiF,EAAgCN,KAAhCM;AACD,KAJH;;AAMA,UAAMC,YAAY,GAAIlF,GAAc,IAAK;AACvC,YAAMmF,QAAQ,GAAGF,WAAW,CAACP,GAAZO,CAAgBjF,GAAG,CAACiB,QAAJjB,EAAhBiF,CAAjB;AACA,UAAIE,QAAQ,KAAK5E,SAAjB,EACE,MAAM,IAAIT,KAAJ,CACJ,mEADI,CAAN;AAGF,aAAOqF,QAAP;AACD,KAPD;;AASA,WAAOJ,YAAY,CAAChF,GAAbgF,CAAkBK,WAAW,IAAiC;AACnE,aAAO;AACLC,QAAAA,cAAc,EAAEH,YAAY,CAACE,WAAW,CAACpD,SAAb,CADvB;AAELsD,QAAAA,iBAAiB,EAAEF,WAAW,CAACxF,IAAZwF,CAAiBrF,GAAjBqF,CAAqBG,IAAI,IAC1CL,YAAY,CAACK,IAAI,CAACvC,MAAN,CADKoC,CAFd;AAKL9F,QAAAA,IAAI,EAAE8F,WAAW,CAAC9F;AALb,OAAP;AAOD,KARMyF,CAAP;AASF;;AAtE8B;ACFhC;AACA;AACA;;;AACO,MAAMvH,SAAS,GAAG,CAACgI,QAAgB,GAAG,WAApB,KAAoC;AAC3D,SAAOC,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsBD,QAAtBC,CAAP;AACD,CAFM;AAIP;AACA;AACA;;;AACO,MAAM7B,SAAS,GAAG,CAAC4B,QAAgB,GAAG,WAApB,KAAoC;AAC3D,SAAOC,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsBD,QAAtBC,CAAP;AACD,CAFM;AA4BP;AACA;AACA;;;AACO,MAAME,UAAU,GAAG,CACxBH,QAAgB,GAAG,QADK,KAEQ;AAChC,QAAMI,GAAG,GAAGH,YAAY,CAACI,MAAbJ,CAOV,CACEA,YAAY,CAACK,GAAbL,CAAiB,QAAjBA,CADF,EAEEA,YAAY,CAACK,GAAbL,CAAiB,eAAjBA,CAFF,EAGEA,YAAY,CAACC,IAAbD,CAAkBA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CAAlBA,EAA+D,OAA/DA,CAHF,CAPUA,EAYVD,QAZUC,CAAZ;;AAcA,QAAMO,OAAO,GAAGJ,GAAG,CAACvG,MAAJuG,CAAWK,IAAXL,CAAgBA,GAAhBA,CAAhB;;AACA,QAAMM,OAAO,GAAGN,GAAG,CAAC1G,MAAJ0G,CAAWK,IAAXL,CAAgBA,GAAhBA,CAAhB;;AAEA,QAAMO,OAAO,GAAGP,GAAhB;;AAEAO,EAAAA,OAAO,CAAC9G,MAAR8G,GAAiB,CAAC9E,CAAD,EAAgB0E,MAAhB,KAAoC;AACnD,UAAMzG,IAAI,GAAG0G,OAAO,CAAC3E,CAAD,EAAI0E,MAAJ,CAApB;;AACA,WAAOzG,IAAI,CAAC,OAAD,CAAJA,CAAcsC,QAAdtC,EAAP;AACD,GAHD6G;;AAKAA,EAAAA,OAAO,CAACjH,MAARiH,GAAiB,CAACC,GAAD,EAAc/E,CAAd,EAA6B0E,MAA7B,KAAiD;AAChE,UAAMzG,IAAI,GAAG;AACX+G,MAAAA,KAAK,EAAE9H,MAAM,CAACE,IAAPF,CAAY6H,GAAZ7H,EAAiB,MAAjBA;AADI,KAAb;AAGA,WAAO2H,OAAO,CAAC5G,IAAD,EAAO+B,CAAP,EAAU0E,MAAV,CAAd;AACD,GALDI;;AAOAA,EAAAA,OAAO,CAAC3E,KAAR2E,GAAiBC,GAAW,IAAK;AAC/B,WACEX,YAAY,CAACK,GAAbL,GAAmBa,IAAnBb,GACAA,YAAY,CAACK,GAAbL,GAAmBa,IADnBb,GAEAlH,MAAM,CAACE,IAAPF,CAAY6H,GAAZ7H,EAAiB,MAAjBA,EAAyBsB,MAH3B;AAKD,GANDsG;;AAQA,SAAOA,OAAP;AACD,CA3CM;AA6CP;AACA;AACA;;;AACO,MAAMI,UAAU,GAAG,CAACf,QAAgB,GAAG,YAApB,KAAqC;AAC7D,SAAOC,YAAY,CAACI,MAAbJ,CAKL,CAACjI,SAAS,CAAC,QAAD,CAAV,EAAsBA,SAAS,CAAC,YAAD,CAA/B,CALKiI,EAK2CD,QAL3CC,CAAP;AAMD,CAPM;AASP;AACA;AACA;;;AACO,MAAMe,MAAM,GAAG,CAAChB,QAAgB,GAAG,QAApB,KAAiC;AACrD,SAAOC,YAAY,CAACI,MAAbJ,CAOL,CACEA,YAAY,CAACgB,IAAbhB,CAAkB,eAAlBA,CADF,EAEEA,YAAY,CAACgB,IAAbhB,CAAkB,OAAlBA,CAFF,EAGEjI,SAAS,CAAC,WAAD,CAHX,CAPKiI,EAYLD,QAZKC,CAAP;AAcD,CAfM;AAiBP;AACA;AACA;;;AACO,MAAMiB,QAAQ,GAAG,CAAClB,QAAgB,GAAG,UAApB,KAAmC;AACzD,SAAOC,YAAY,CAACI,MAAbJ,CAQL,CACEjI,SAAS,CAAC,YAAD,CADX,EAEEA,SAAS,CAAC,iBAAD,CAFX,EAGEA,SAAS,CAAC,sBAAD,CAHX,EAIEiI,YAAY,CAACkB,EAAblB,CAAgB,YAAhBA,CAJF,CARKA,EAcLD,QAdKC,CAAP;AAgBD,CAjBM;AAmBP;AACA;AACA;;;AACO,MAAMmB,yBAAyB,GAAG,CACvCpB,QAAgB,GAAG,2BADoB,KAEpC;AACH,SAAOC,YAAY,CAACI,MAAbJ,CACL,CACEA,YAAY,CAACK,GAAbL,CAAiB,uBAAjBA,CADF,EAEEjI,SAAS,CAAC,uCAAD,CAFX,EAGEmI,UAAU,CAAC,gCAAD,CAHZ,EAIEnI,SAAS,CAAC,eAAD,CAJX,CADKiI,EAOLD,QAPKC,CAAP;AASD,CAZM;;AAcA,SAASoB,QAAT,CAAkBC,IAAlB,EAA6B5D,MAA7B,EAAkD;AACvD,QAAM6D,YAAY,GAAIC,IAAS,IAAa;AAC1C,QAAIA,IAAI,CAACV,IAALU,IAAa,CAAjB,EAAoB;AAClB,aAAOA,IAAI,CAACV,IAAZ;AACD,KAFD,MAEO,IAAI,OAAOU,IAAI,CAACxF,KAAZ,KAAsB,UAA1B,EAAsC;AAC3C,aAAOwF,IAAI,CAACxF,KAALwF,CAAW9D,MAAM,CAAC8D,IAAI,CAACxB,QAAN,CAAjBwB,CAAP;AACD,KAFM,MAEA,IAAI,WAAWA,IAAX,IAAmB,mBAAmBA,IAA1C,EAAgD;AACrD,YAAMC,KAAK,GAAG/D,MAAM,CAAC8D,IAAI,CAACxB,QAAN,CAApB;;AACA,UAAI0B,KAAK,CAACC,OAAND,CAAcD,KAAdC,CAAJ,EAA0B;AACxB,eAAOD,KAAK,CAACpH,MAANoH,GAAeF,YAAY,CAACC,IAAI,CAACI,aAAN,CAAlC;AACF;AACD,KALM,MAKA,IAAI,YAAYJ,IAAhB,EAAsB;AAC3B;AACA,aAAOH,QAAQ,CAAC;AAACQ,QAAAA,MAAM,EAAEL;AAAT,OAAD,EAAiB9D,MAAM,CAAC8D,IAAI,CAACxB,QAAN,CAAvB,CAAf;AACF,KAb0C,CAc1C;;;AACA,WAAO,CAAP;AACD,GAhBD;;AAkBA,MAAIhE,KAAK,GAAG,CAAZ;AACAsF,EAAAA,IAAI,CAACO,MAALP,CAAY5D,MAAZ4D,CAAmBxE,OAAnBwE,CAA4BE,IAAS,IAAK;AACxCxF,IAAAA,KAAK,IAAIuF,YAAY,CAACC,IAAD,CAArBxF;AACD,GAFDsF;AAIA,SAAOtF,KAAP;AACF;;AC3LO,SAAS8F,YAAT,CAAsBC,KAAtB,EAAoD;AACzD,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,WAAS;AACP,QAAIC,IAAI,GAAGH,KAAK,CAACI,KAANJ,EAAX;AACAC,IAAAA,GAAG,IAAI,CAACE,IAAI,GAAG,IAAR,KAAkBD,IAAI,GAAG,CAAhCD;AACAC,IAAAA,IAAI,IAAI,CAARA;;AACA,QAAI,CAACC,IAAI,GAAG,IAAR,MAAkB,CAAtB,EAAyB;AACvB;AACF;AACF;;AACA,SAAOF,GAAP;AACF;;AAEO,SAASI,YAAT,CAAsBL,KAAtB,EAA4CC,GAA5C,EAAyD;AAC9D,MAAIK,OAAO,GAAGL,GAAd;;AACA,WAAS;AACP,QAAIE,IAAI,GAAGG,OAAO,GAAG,IAArB;AACAA,IAAAA,OAAO,KAAK,CAAZA;;AACA,QAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBN,MAAAA,KAAK,CAAChD,IAANgD,CAAWG,IAAXH;AACA;AACD,KAHD,MAGO;AACLG,MAAAA,IAAI,IAAI,IAARA;AACAH,MAAAA,KAAK,CAAChD,IAANgD,CAAWG,IAAXH;AACF;AACF;AACF;;AC3Be,SAAA,MAAA,CACbO,SADa,EAEb5J,OAFa,EAGM;AACnB,MAAI,CAAC4J,SAAL,EAAgB;AACd,UAAM,IAAIhI,KAAJ,CAAU5B,OAAO,IAAI,kBAArB,CAAN;AACF;AACF;;ACQO,MAAM6J,YAAN,CAAmB;AAIxBjJ,EAAAA,WAAW,CAACkJ,KAAD,EAAmBC,UAAnB,EAA2C;AAAA,SAHtDD,KAGsD,GAHjD,KAAA,CAGiD;AAHjD,SACLC,UADK,GACK,KAAA,CADL;AAIH,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACF;;AAEc,SAAPC,OAAO,CACZnD,YADY,EAEZiD,KAFY,EAGE;AACd,UAAMC,UAAsB,GAAG,IAAIhI,GAAJ,EAA/B;;AACA,UAAMkI,kBAAkB,GAAInF,MAAiB,IAAsB;AACjE,YAAML,OAAO,GAAGK,MAAM,CAAC/B,QAAP+B,EAAhB;AACA,UAAIoF,OAAO,GAAGH,UAAU,CAACvD,GAAXuD,CAAetF,OAAfsF,CAAd;;AACA,UAAIG,OAAO,KAAK7H,SAAhB,EAA2B;AACzB6H,QAAAA,OAAO,GAAG;AACRC,UAAAA,QAAQ,EAAE,KADF;AAERC,UAAAA,UAAU,EAAE,KAFJ;AAGRC,UAAAA,SAAS,EAAE;AAHH,SAAVH;AAKAH,QAAAA,UAAU,CAACrK,GAAXqK,CAAetF,OAAfsF,EAAwBG,OAAxBH;AACF;;AACA,aAAOG,OAAP;AACD,KAZD;;AAcA,UAAMI,YAAY,GAAGL,kBAAkB,CAACH,KAAD,CAAvC;AACAQ,IAAAA,YAAY,CAACH,QAAbG,GAAwB,IAAxBA;AACAA,IAAAA,YAAY,CAACF,UAAbE,GAA0B,IAA1BA;;AAEA,SAAK,MAAMC,EAAX,IAAiB1D,YAAjB,EAA+B;AAC7BoD,MAAAA,kBAAkB,CAACM,EAAE,CAACzG,SAAJ,CAAlBmG,CAAiCI,SAAjCJ,GAA6C,IAA7CA;;AACA,WAAK,MAAMO,WAAX,IAA0BD,EAAE,CAAC7I,IAA7B,EAAmC;AACjC,cAAMwI,OAAO,GAAGD,kBAAkB,CAACO,WAAW,CAAC1F,MAAb,CAAlC;AACAoF,QAAAA,OAAO,CAACC,QAARD,KAAAA,OAAO,CAACC,QAARD,GAAqBM,WAAW,CAACL,QAAjCD;AACAA,QAAAA,OAAO,CAACE,UAARF,KAAAA,OAAO,CAACE,UAARF,GAAuBM,WAAW,CAACJ,UAAnCF;AACF;AACF;;AAEA,WAAO,IAAIL,YAAJ,CAAiBC,KAAjB,EAAwBC,UAAxB,CAAP;AACF;;AAEAU,EAAAA,oBAAoB,GAAsC;AACxD,UAAMC,UAAU,GAAG,CAAC,GAAG,KAAKX,UAAL,CAAgBY,OAAhB,EAAJ,CAAnB;AACAC,IAAAA,MAAM,CAACF,UAAU,CAAC/I,MAAX+I,IAAqB,GAAtB,EAA2B,yCAA3B,CAANE;AAEA,UAAMC,eAAe,GAAGH,UAAU,CAACI,MAAXJ,CACtB,CAAC,GAAGrD,IAAH,CAAD,KAAcA,IAAI,CAAC8C,QAAL9C,IAAiBA,IAAI,CAAC+C,UADdM,CAAxB;AAGA,UAAMK,eAAe,GAAGL,UAAU,CAACI,MAAXJ,CACtB,CAAC,GAAGrD,IAAH,CAAD,KAAcA,IAAI,CAAC8C,QAAL9C,IAAiB,CAACA,IAAI,CAAC+C,UADfM,CAAxB;AAGA,UAAMM,kBAAkB,GAAGN,UAAU,CAACI,MAAXJ,CACzB,CAAC,GAAGrD,IAAH,CAAD,KAAc,CAACA,IAAI,CAAC8C,QAAN,IAAkB9C,IAAI,CAAC+C,UADZM,CAA3B;AAGA,UAAMO,kBAAkB,GAAGP,UAAU,CAACI,MAAXJ,CACzB,CAAC,GAAGrD,IAAH,CAAD,KAAc,CAACA,IAAI,CAAC8C,QAAN,IAAkB,CAAC9C,IAAI,CAAC+C,UADbM,CAA3B;AAIA,UAAMQ,MAAqB,GAAG;AAC5BC,MAAAA,qBAAqB,EAAEN,eAAe,CAAClJ,MAAhBkJ,GAAyBE,eAAe,CAACpJ,MADpC;AAE5ByJ,MAAAA,yBAAyB,EAAEL,eAAe,CAACpJ,MAFf;AAG5B0J,MAAAA,2BAA2B,EAAEJ,kBAAkB,CAACtJ;AAHpB,KAA9B,CAjBwD,CAuBxD;;AACA;AACEiJ,MAAAA,MAAM,CACJC,eAAe,CAAClJ,MAAhBkJ,GAAyB,CADrB,EAEJ,2CAFI,CAAND;AAIA,YAAM,CAACU,YAAD,IAAiBT,eAAe,CAAC,CAAD,CAAtC;AACAD,MAAAA,MAAM,CACJU,YAAY,KAAK,KAAKxB,KAAL,CAAW/G,QAAX,EADb,EAEJ,wDAFI,CAAN6H;AAIF;AAEA,UAAM1E,iBAAiB,GAAG,CACxB,GAAG2E,eAAe,CAAChJ,GAAhBgJ,CAAoB,CAAC,CAACpG,OAAD,CAAD,KAAe,IAAIlC,SAAJ,CAAckC,OAAd,CAAnCoG,CADqB,EAExB,GAAGE,eAAe,CAAClJ,GAAhBkJ,CAAoB,CAAC,CAACtG,OAAD,CAAD,KAAe,IAAIlC,SAAJ,CAAckC,OAAd,CAAnCsG,CAFqB,EAGxB,GAAGC,kBAAkB,CAACnJ,GAAnBmJ,CAAuB,CAAC,CAACvG,OAAD,CAAD,KAAe,IAAIlC,SAAJ,CAAckC,OAAd,CAAtCuG,CAHqB,EAIxB,GAAGC,kBAAkB,CAACpJ,GAAnBoJ,CAAuB,CAAC,CAACxG,OAAD,CAAD,KAAe,IAAIlC,SAAJ,CAAckC,OAAd,CAAtCwG,CAJqB,CAA1B;AAOA,WAAO,CAACC,MAAD,EAAShF,iBAAT,CAAP;AACF;;AAEAqF,EAAAA,kBAAkB,CAChBC,WADgB,EAEiD;AACjE,UAAM,CAACC,eAAD,EAAkBC,mBAAlB,IACJ,KAAKC,2BAAL,CACEH,WAAW,CAACI,KAAZJ,CAAkBK,SADpB,EAEE3B,OAAO,IACL,CAACA,OAAO,CAACC,QAAT,IAAqB,CAACD,OAAO,CAACG,SAA9B,IAA2CH,OAAO,CAACE,UAHvD,CADF;AAMA,UAAM,CAAC0B,eAAD,EAAkBC,mBAAlB,IACJ,KAAKJ,2BAAL,CACEH,WAAW,CAACI,KAAZJ,CAAkBK,SADpB,EAEE3B,OAAO,IACL,CAACA,OAAO,CAACC,QAAT,IAAqB,CAACD,OAAO,CAACG,SAA9B,IAA2C,CAACH,OAAO,CAACE,UAHxD,CADF,CAPiE,CAcjE;;AACA,QAAIqB,eAAe,CAAC9J,MAAhB8J,KAA2B,CAA3BA,IAAgCK,eAAe,CAACnK,MAAhBmK,KAA2B,CAA/D,EAAkE;AAChE;AACF;;AAEA,WAAO,CACL;AACEE,MAAAA,UAAU,EAAER,WAAW,CAAC1J,GAD1B;AAEE2J,MAAAA,eAFF;AAGEK,MAAAA;AAHF,KADK,EAML;AACExF,MAAAA,QAAQ,EAAEoF,mBADZ;AAEEnF,MAAAA,QAAQ,EAAEwF;AAFZ,KANK,CAAP;AAWF;AAEA;;;AACQJ,EAAAA,2BAA2B,CACjCM,kBADiC,EAEjCC,aAFiC,EAGE;AACnC,UAAMC,kBAAkB,GAAG,IAAInD,KAAJ,EAA3B;AACA,UAAMoD,WAAW,GAAG,IAAIpD,KAAJ,EAApB;;AAEA,SAAK,MAAM,CAACvE,OAAD,EAAUyF,OAAV,CAAX,IAAiC,KAAKH,UAAL,CAAgBY,OAAhB,EAAjC,EAA4D;AAC1D,UAAIuB,aAAa,CAAChC,OAAD,CAAjB,EAA4B;AAC1B,cAAMpI,GAAG,GAAG,IAAIS,SAAJ,CAAckC,OAAd,CAAZ;AACA,cAAM4H,gBAAgB,GAAGJ,kBAAkB,CAACK,SAAnBL,CAA6BM,KAAK,IACzDA,KAAK,CAAC1J,MAAN0J,CAAazK,GAAbyK,CADuBN,CAAzB;;AAGA,YAAII,gBAAgB,IAAI,CAAxB,EAA2B;AACzBzB,UAAAA,MAAM,CAACyB,gBAAgB,GAAG,GAApB,EAAyB,iCAAzB,CAANzB;AACAuB,UAAAA,kBAAkB,CAAC9F,IAAnB8F,CAAwBE,gBAAxBF;AACAC,UAAAA,WAAW,CAAC/F,IAAZ+F,CAAiBtK,GAAjBsK;AACA,eAAKrC,UAAL,CAAgByC,MAAhB,CAAuB/H,OAAvB;AACF;AACF;AACF;;AAEA,WAAO,CAAC0H,kBAAD,EAAqBC,WAArB,CAAP;AACF;;AApJwB;ACI1B;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA;AACA;AACA;;;AACO,MAAMK,OAAN,CAAc;AAWnB7L,EAAAA,WAAW,CAACiM,IAAD,EAAoB;AAAA,SAV/B3B,MAU+B,GAVzB,KAAA,CAUyB;AAVzB,SACNwB,WADM,GACK,KAAA,CADL;AACK,SACXC,eADW,GACI,KAAA,CADJ;AACI,SACf9F,YADe,GACH,KAAA,CADG;AACH,SAEJ+F,iBAFI,GAEwC,IAAI7K,GAAJ,EAFxC;AAQV,SAAKmJ,MAAL,GAAc2B,IAAI,CAAC3B,MAAnB;AACA,SAAKwB,WAAL,GAAmBG,IAAI,CAACH,WAALG,CAAiBhL,GAAjBgL,CAAqBC,OAAO,IAAI,IAAIvK,SAAJ,CAAcuK,OAAd,CAAhCD,CAAnB;AACA,SAAKF,eAAL,GAAuBE,IAAI,CAACF,eAA5B;AACA,SAAK9F,YAAL,GAAoBgG,IAAI,CAAChG,YAAzB;AACA,SAAKA,YAAL,CAAkBzC,OAAlB,CAA0BmG,EAAE,IAC1B,KAAKqC,iBAAL,CAAuBlN,GAAvB,CACE6K,EAAE,CAACpD,cADL,EAEE,KAAKuF,WAAL,CAAiBnC,EAAE,CAACpD,cAApB,CAFF,CADF;AAMF;;AAEW,MAAP4F,OAAO,GAAa;AACtB,WAAO,QAAP;AACF;;AAEqB,MAAjB7G,iBAAiB,GAAqB;AACxC,WAAO,KAAKwG,WAAZ;AACF;;AAEwB,MAApBM,oBAAoB,GAAsC;AAC5D,WAAO,KAAKnG,YAAL,CAAkBhF,GAAlB,CACJ0I,EAAE,KAAkC;AACnCpD,MAAAA,cAAc,EAAEoD,EAAE,CAACpD,cADgB;AAEnCC,MAAAA,iBAAiB,EAAEmD,EAAE,CAAC0C,QAFa;AAGnC7L,MAAAA,IAAI,EAAEqB,IAAI,CAACtB,MAALsB,CAAY8H,EAAE,CAACnJ,IAAfqB;AAH6B,KAAlC,CADE,CAAP;AAOF;;AAEuB,MAAnByK,mBAAmB,GAAqC;AAC1D,WAAO,EAAP;AACF;;AAEAC,EAAAA,cAAc,GAAuB;AACnC,WAAO,IAAIlH,kBAAJ,CAAuB,KAAKC,iBAA5B,CAAP;AACF;;AAEc,SAAP8D,OAAO,CAAC6C,IAAD,EAAmC;AAC/C,UAAMO,YAAY,GAAGvD,YAAY,CAACG,OAAbH,CAAqBgD,IAAI,CAAChG,YAA1BgD,EAAwCgD,IAAI,CAACQ,QAA7CxD,CAArB;AACA,UAAM,CAACqB,MAAD,EAAShF,iBAAT,IAA8BkH,YAAY,CAAC3C,oBAAb2C,EAApC;AACA,UAAMV,WAAW,GAAG,IAAIzG,kBAAJ,CAAuBC,iBAAvB,CAApB;AACA,UAAMW,YAAY,GAAG6F,WAAW,CAAC9F,mBAAZ8F,CAAgCG,IAAI,CAAChG,YAArC6F,EAAmD7K,GAAnD6K,CAClBnC,EAA8B,KAA2B;AACxDpD,MAAAA,cAAc,EAAEoD,EAAE,CAACpD,cADqC;AAExD8F,MAAAA,QAAQ,EAAE1C,EAAE,CAACnD,iBAF2C;AAGxDhG,MAAAA,IAAI,EAAEqB,IAAI,CAACzB,MAALyB,CAAY8H,EAAE,CAACnJ,IAAfqB;AAHkD,KAA3B,CADZiK,CAArB;AAOA,WAAO,IAAID,OAAJ,CAAY;AACjBvB,MAAAA,MADiB;AAEjBwB,MAAAA,WAAW,EAAExG,iBAFI;AAGjByG,MAAAA,eAAe,EAAEE,IAAI,CAACF,eAHL;AAIjB9F,MAAAA;AAJiB,KAAZ,CAAP;AAMF;;AAEAyG,EAAAA,eAAe,CAAC7G,KAAD,EAAyB;AACtC,WAAOA,KAAK,GAAG,KAAKyE,MAAL,CAAYC,qBAA3B;AACF;;AAEAoC,EAAAA,iBAAiB,CAAC9G,KAAD,EAAyB;AACxC,UAAM+G,iBAAiB,GAAG,KAAKtC,MAAL,CAAYC,qBAAtC;;AACA,QAAI1E,KAAK,IAAI,KAAKyE,MAAL,CAAYC,qBAAzB,EAAgD;AAC9C,YAAMsC,oBAAoB,GAAGhH,KAAK,GAAG+G,iBAArC;AACA,YAAME,mBAAmB,GAAG,KAAKhB,WAAL,CAAiB/K,MAAjB,GAA0B6L,iBAAtD;AACA,YAAMG,2BAA2B,GAC/BD,mBAAmB,GAAG,KAAKxC,MAAL,CAAYG,2BADpC;AAEA,aAAOoC,oBAAoB,GAAGE,2BAA9B;AACD,KAND,MAMO;AACL,YAAMC,yBAAyB,GAC7BJ,iBAAiB,GAAG,KAAKtC,MAAL,CAAYE,yBADlC;AAEA,aAAO3E,KAAK,GAAGmH,yBAAf;AACF;AACF;;AAEAC,EAAAA,WAAW,CAACpH,KAAD,EAAyB;AAClC,WAAO,KAAKmG,iBAAL,CAAuBkB,GAAvB,CAA2BrH,KAA3B,CAAP;AACF;;AAEAsH,EAAAA,UAAU,GAAgB;AACxB,WAAO,CAAC,GAAG,KAAKnB,iBAAL,CAAuBoB,MAAvB,EAAJ,CAAP;AACF;;AAEAC,EAAAA,aAAa,GAAgB;AAC3B,WAAO,KAAKvB,WAAL,CAAiB5B,MAAjB,CAAwB,CAACoD,CAAD,EAAIzH,KAAJ,KAAc,CAAC,KAAKoH,WAAL,CAAiBpH,KAAjB,CAAvC,CAAP;AACF;;AAEAxF,EAAAA,SAAS,GAAW;AAClB,UAAMkN,OAAO,GAAG,KAAKzB,WAAL,CAAiB/K,MAAjC;AAEA,QAAIyM,QAAkB,GAAG,EAAzB;AACAC,IAAAA,YAAqB,CAACD,QAAD,EAAWD,OAAX,CAArBE;AAEA,UAAMxH,YAAY,GAAG,KAAKA,YAAL,CAAkBhF,GAAlB,CAAsBqF,WAAW,IAAI;AACxD,YAAM;AAAC+F,QAAAA,QAAD;AAAW9F,QAAAA;AAAX,UAA6BD,WAAnC;AACA,YAAM9F,IAAI,GAAG4H,KAAK,CAACzI,IAANyI,CAAWvG,IAAI,CAACtB,MAALsB,CAAYyE,WAAW,CAAC9F,IAAxBqB,CAAXuG,CAAb;AAEA,UAAIsF,eAAyB,GAAG,EAAhC;AACAD,MAAAA,YAAqB,CAACC,eAAD,EAAkBrB,QAAQ,CAACtL,MAA3B,CAArB0M;AAEA,UAAIE,SAAmB,GAAG,EAA1B;AACAF,MAAAA,YAAqB,CAACE,SAAD,EAAYnN,IAAI,CAACO,MAAjB,CAArB0M;AAEA,aAAO;AACLlH,QAAAA,cADK;AAELmH,QAAAA,eAAe,EAAEjO,MAAM,CAACE,IAAPF,CAAYiO,eAAZjO,CAFZ;AAGLmO,QAAAA,UAAU,EAAEvB,QAHP;AAILwB,QAAAA,UAAU,EAAEpO,MAAM,CAACE,IAAPF,CAAYkO,SAAZlO,CAJP;AAKLe,QAAAA;AALK,OAAP;AAOD,KAjBoB,CAArB;AAmBA,QAAIsN,gBAA0B,GAAG,EAAjC;AACAL,IAAAA,YAAqB,CAACK,gBAAD,EAAmB7H,YAAY,CAAClF,MAAhC,CAArB0M;AACA,QAAIM,iBAAiB,GAAGtO,MAAM,CAACiD,KAAPjD,CAAaiF,gBAAbjF,CAAxB;AACAA,IAAAA,MAAM,CAACE,IAAPF,CAAYqO,gBAAZrO,EAA8BkD,IAA9BlD,CAAmCsO,iBAAnCtO;AACA,QAAIuO,uBAAuB,GAAGF,gBAAgB,CAAC/M,MAA/C;AAEAkF,IAAAA,YAAY,CAACzC,OAAbyC,CAAqBK,WAAW,IAAI;AAClC,YAAM2H,iBAAiB,GAAGtH,YAAY,CAACI,MAAbJ,CAQxB,CACAA,YAAY,CAACkB,EAAblB,CAAgB,gBAAhBA,CADA,EAGAA,YAAY,CAACC,IAAbD,CACEL,WAAW,CAACoH,eAAZpH,CAA4BvF,MAD9B4F,EAEE,iBAFFA,CAHA,EAOAA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,CAAgB,UAAhBA,CADFA,EAEEL,WAAW,CAACsH,UAAZtH,CAAuBvF,MAFzB4F,EAGE,YAHFA,CAPA,EAYAA,YAAY,CAACC,IAAbD,CAAkBL,WAAW,CAACuH,UAAZvH,CAAuBvF,MAAzC4F,EAAiD,YAAjDA,CAZA,EAaAA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,CAAgB,WAAhBA,CADFA,EAEEL,WAAW,CAAC9F,IAAZ8F,CAAiBvF,MAFnB4F,EAGE,MAHFA,CAbA,CARwBA,CAA1B;AA2BA,YAAM5F,MAAM,GAAGkN,iBAAiB,CAAC7N,MAAlB6N,CACb3H,WADa2H,EAEbF,iBAFaE,EAGbD,uBAHaC,CAAf;AAKAD,MAAAA,uBAAuB,IAAIjN,MAA3BiN;AACD,KAlCD/H;AAmCA8H,IAAAA,iBAAiB,GAAGA,iBAAiB,CAAC1O,KAAlB0O,CAAwB,CAAxBA,EAA2BC,uBAA3BD,CAApBA;AAEA,UAAMI,cAAc,GAAGxH,YAAY,CAACI,MAAbJ,CASrB,CACAA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,uBAArBA,CADA,EAEAA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,2BAArBA,CAFA,EAGAA,YAAY,CAACC,IAAbD,CAAkB,CAAlBA,EAAqB,6BAArBA,CAHA,EAIAA,YAAY,CAACC,IAAbD,CAAkB6G,QAAQ,CAACzM,MAA3B4F,EAAmC,UAAnCA,CAJA,EAKAA,YAAY,CAACuH,GAAbvH,CAAiByH,SAAgB,CAAC,KAAD,CAAjCzH,EAA0C4G,OAA1C5G,EAAmD,MAAnDA,CALA,EAMAyH,SAAgB,CAAC,iBAAD,CANhB,CATqBzH,CAAvB;AAkBA,UAAM0H,WAAW,GAAG;AAClB9D,MAAAA,qBAAqB,EAAE9K,MAAM,CAACE,IAAPF,CAAY,CAAC,KAAK6K,MAAL,CAAYC,qBAAb,CAAZ9K,CADL;AAElB+K,MAAAA,yBAAyB,EAAE/K,MAAM,CAACE,IAAPF,CAAY,CACrC,KAAK6K,MAAL,CAAYE,yBADyB,CAAZ/K,CAFT;AAKlBgL,MAAAA,2BAA2B,EAAEhL,MAAM,CAACE,IAAPF,CAAY,CACvC,KAAK6K,MAAL,CAAYG,2BAD2B,CAAZhL,CALX;AAQlB+N,MAAAA,QAAQ,EAAE/N,MAAM,CAACE,IAAPF,CAAY+N,QAAZ/N,CARQ;AASlBqB,MAAAA,IAAI,EAAE,KAAKgL,WAAL,CAAiB7K,GAAjB,CAAqBC,GAAG,IAAI3B,QAAQ,CAAC2B,GAAG,CAACkB,OAAJlB,EAAD,CAApC,CATY;AAUlB6K,MAAAA,eAAe,EAAElK,IAAI,CAACtB,MAALsB,CAAY,KAAKkK,eAAjBlK;AAVC,KAApB;AAaA,QAAIyM,QAAQ,GAAG7O,MAAM,CAACiD,KAAPjD,CAAa,IAAbA,CAAf;AACA,UAAMsB,MAAM,GAAGoN,cAAc,CAAC/N,MAAf+N,CAAsBE,WAAtBF,EAAmCG,QAAnCH,CAAf;AACAJ,IAAAA,iBAAiB,CAACpL,IAAlBoL,CAAuBO,QAAvBP,EAAiChN,MAAjCgN;AACA,WAAOO,QAAQ,CAACjP,KAATiP,CAAe,CAAfA,EAAkBvN,MAAM,GAAGgN,iBAAiB,CAAChN,MAA7CuN,CAAP;AACF;AAEA;AACF;AACA;;;AACa,SAAJ3O,IAAI,CAACC,MAAD,EAAuD;AAChE;AACA,QAAI2O,SAAS,GAAG,CAAC,GAAG3O,MAAJ,CAAhB;AAEA,UAAM2K,qBAAqB,GAAGgE,SAAS,CAAC1F,KAAV0F,EAA9B;;AACA,QACEhE,qBAAqB,MACpBA,qBAAqB,GAAG5F,mBADJ,CADvB,EAGE;AACA,YAAM,IAAI3D,KAAJ,CACJ,6EADI,CAAN;AAGF;;AAEA,UAAMwJ,yBAAyB,GAAG+D,SAAS,CAAC1F,KAAV0F,EAAlC;AACA,UAAM9D,2BAA2B,GAAG8D,SAAS,CAAC1F,KAAV0F,EAApC;AAEA,UAAMC,YAAY,GAAGf,YAAqB,CAACc,SAAD,CAA1C;AACA,QAAIzC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAI2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAApB,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,YAAMvC,OAAO,GAAGqC,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmBlN,iBAAnBkN,CAAhB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgBlN,iBAAhBkN,CAAZA;AACAzC,MAAAA,WAAW,CAACrG,IAAZqG,CAAiB,IAAInK,SAAJ,CAAclC,MAAM,CAACE,IAAPF,CAAYyM,OAAZzM,CAAd,CAAjBqM;AACF;;AAEA,UAAMC,eAAe,GAAGwC,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmBlN,iBAAnBkN,CAAxB;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgBlN,iBAAhBkN,CAAZA;AAEA,UAAMT,gBAAgB,GAAGL,YAAqB,CAACc,SAAD,CAA9C;AACA,QAAItI,YAAmC,GAAG,EAA1C;;AACA,SAAK,IAAIwI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,gBAApB,EAAsCW,CAAC,EAAvC,EAA2C;AACzC,YAAMlI,cAAc,GAAGgI,SAAS,CAAC1F,KAAV0F,EAAvB;AACA,YAAMC,YAAY,GAAGf,YAAqB,CAACc,SAAD,CAA1C;AACA,YAAMlC,QAAQ,GAAGkC,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmBC,YAAnBD,CAAjB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgBC,YAAhBD,CAAZA;AACA,YAAMV,UAAU,GAAGJ,YAAqB,CAACc,SAAD,CAAxC;AACA,YAAMG,SAAS,GAAGH,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmBV,UAAnBU,CAAlB;AACA,YAAM/N,IAAI,GAAGqB,IAAI,CAACzB,MAALyB,CAAYpC,MAAM,CAACE,IAAPF,CAAYiP,SAAZjP,CAAZoC,CAAb;AACA0M,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgBV,UAAhBU,CAAZA;AACAtI,MAAAA,YAAY,CAACR,IAAbQ,CAAkB;AAChBM,QAAAA,cADgB;AAEhB8F,QAAAA,QAFgB;AAGhB7L,QAAAA;AAHgB,OAAlByF;AAKF;;AAEA,UAAM0I,WAAW,GAAG;AAClBrE,MAAAA,MAAM,EAAE;AACNC,QAAAA,qBADM;AAENC,QAAAA,yBAFM;AAGNC,QAAAA;AAHM,OADU;AAMlBsB,MAAAA,eAAe,EAAElK,IAAI,CAACzB,MAALyB,CAAYpC,MAAM,CAACE,IAAPF,CAAYsM,eAAZtM,CAAZoC,CANC;AAOlBiK,MAAAA,WAPkB;AAQlB7F,MAAAA;AARkB,KAApB;AAWA,WAAO,IAAI4F,OAAJ,CAAY8C,WAAZ,CAAP;AACF;;AA1QmB;ACvCrB;AACA;AACA;;;AA6BO,MAAMC,SAAN,CAAgB;AAOrB5O,EAAAA,WAAW,CAACiM,IAAD,EAAsB;AAAA,SANjC3B,MAMiC,GAN3B,KAAA,CAM2B;AAN3B,SACNhF,iBADM,GACW,KAAA,CADX;AACW,SACjByG,eADiB,GACF,KAAA,CADE;AACF,SACfK,oBADe,GACK,KAAA,CADL;AACK,SACpBE,mBADoB,GACD,KAAA,CADC;AAIlB,SAAKhC,MAAL,GAAc2B,IAAI,CAAC3B,MAAnB;AACA,SAAKhF,iBAAL,GAAyB2G,IAAI,CAAC3G,iBAA9B;AACA,SAAKyG,eAAL,GAAuBE,IAAI,CAACF,eAA5B;AACA,SAAKK,oBAAL,GAA4BH,IAAI,CAACG,oBAAjC;AACA,SAAKE,mBAAL,GAA2BL,IAAI,CAACK,mBAAhC;AACF;;AAEW,MAAPH,OAAO,GAAM;AACf,WAAO,CAAP;AACF;;AAE6B,MAAzB0C,yBAAyB,GAAW;AACtC,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,MAAMC,MAAX,IAAqB,KAAKzC,mBAA1B,EAA+C;AAC7CwC,MAAAA,KAAK,IAAIC,MAAM,CAAC7D,eAAP6D,CAAuBhO,MAAvBgO,GAAgCA,MAAM,CAAClE,eAAPkE,CAAuBhO,MAAhE+N;AACF;;AACA,WAAOA,KAAP;AACF;;AAEAvC,EAAAA,cAAc,CAACN,IAAD,EAAgD;AAC5D,QAAI1G,sBAAJ;;AACA,QACE0G,IAAI,IACJ,4BAA4BA,IAD5BA,IAEAA,IAAI,CAAC1G,sBAHP,EAIE;AACA,UACE,KAAKsJ,yBAAL,IACA5C,IAAI,CAAC1G,sBAAL0G,CAA4BvG,QAA5BuG,CAAqClL,MAArCkL,GACEA,IAAI,CAAC1G,sBAAL0G,CAA4BtG,QAA5BsG,CAAqClL,MAHzC,EAIE;AACA,cAAM,IAAIC,KAAJ,CACJ,6FADI,CAAN;AAGF;;AACAuE,MAAAA,sBAAsB,GAAG0G,IAAI,CAAC1G,sBAA9BA;AACD,KAfD,MAeO,IACL0G,IAAI,IACJ,gCAAgCA,IADhCA,IAEAA,IAAI,CAAC+C,0BAHA,EAIL;AACAzJ,MAAAA,sBAAsB,GAAG,KAAK0J,0BAAL,CACvBhD,IAAI,CAAC+C,0BADkB,CAAzBzJ;AAGD,KARM,MAQA,IAAI,KAAK+G,mBAAL,CAAyBvL,MAAzB,GAAkC,CAAtC,EAAyC;AAC9C,YAAM,IAAIC,KAAJ,CACJ,4EADI,CAAN;AAGF;;AACA,WAAO,IAAIqE,kBAAJ,CACL,KAAKC,iBADA,EAELC,sBAFK,CAAP;AAIF;;AAEAmH,EAAAA,eAAe,CAAC7G,KAAD,EAAyB;AACtC,WAAOA,KAAK,GAAG,KAAKyE,MAAL,CAAYC,qBAA3B;AACF;;AAEAoC,EAAAA,iBAAiB,CAAC9G,KAAD,EAAyB;AACxC,UAAM+G,iBAAiB,GAAG,KAAKtC,MAAL,CAAYC,qBAAtC;AACA,UAAM2E,oBAAoB,GAAG,KAAK5J,iBAAL,CAAuBvE,MAApD;;AACA,QAAI8E,KAAK,IAAIqJ,oBAAb,EAAmC;AACjC,YAAMC,sBAAsB,GAAGtJ,KAAK,GAAGqJ,oBAAvC;AACA,YAAME,4BAA4B,GAAG,KAAK9C,mBAAL,CAAyB+C,MAAzB,CACnC,CAACP,KAAD,EAAQC,MAAR,KAAmBD,KAAK,GAAGC,MAAM,CAAClE,eAAPkE,CAAuBhO,MADf,EAEnC,CAFmC,CAArC;AAIA,aAAOoO,sBAAsB,GAAGC,4BAAhC;AACD,KAPD,MAOO,IAAIvJ,KAAK,IAAI,KAAKyE,MAAL,CAAYC,qBAAzB,EAAgD;AACrD,YAAMsC,oBAAoB,GAAGhH,KAAK,GAAG+G,iBAArC;AACA,YAAME,mBAAmB,GAAGoC,oBAAoB,GAAGtC,iBAAnD;AACA,YAAMG,2BAA2B,GAC/BD,mBAAmB,GAAG,KAAKxC,MAAL,CAAYG,2BADpC;AAEA,aAAOoC,oBAAoB,GAAGE,2BAA9B;AACD,KANM,MAMA;AACL,YAAMC,yBAAyB,GAC7BJ,iBAAiB,GAAG,KAAKtC,MAAL,CAAYE,yBADlC;AAEA,aAAO3E,KAAK,GAAGmH,yBAAf;AACF;AACF;;AAEAiC,EAAAA,0BAA0B,CACxBD,0BADwB,EAEA;AACxB,UAAMzJ,sBAA8C,GAAG;AACrDG,MAAAA,QAAQ,EAAE,EAD2C;AAErDC,MAAAA,QAAQ,EAAE;AAF2C,KAAvD;;AAKA,SAAK,MAAM2J,WAAX,IAA0B,KAAKhD,mBAA/B,EAAoD;AAClD,YAAMiD,YAAY,GAAGP,0BAA0B,CAACQ,IAA3BR,CAAgC9C,OAAO,IAC1DA,OAAO,CAAChL,GAARgL,CAAYjK,MAAZiK,CAAmBoD,WAAW,CAAClE,UAA/Bc,CADmB8C,CAArB;;AAGA,UAAI,CAACO,YAAL,EAAmB;AACjB,cAAM,IAAIvO,KAAJ,CACyDsO,6DAAAA,WAAW,CAAClE,UAAZkE,CAAuBnN,QAAvBmN,EAAkC,EAD3F,CAAN;AAGF;;AAEA,WAAK,MAAMzJ,KAAX,IAAoByJ,WAAW,CAACzE,eAAhC,EAAiD;AAC/C,YAAIhF,KAAK,GAAG0J,YAAY,CAACvE,KAAbuE,CAAmBtE,SAAnBsE,CAA6BxO,MAAzC,EAAiD;AAC/CwE,UAAAA,sBAAsB,CAACG,QAAvBH,CAAgCE,IAAhCF,CACEgK,YAAY,CAACvE,KAAbuE,CAAmBtE,SAAnBsE,CAA6B1J,KAA7B0J,CADFhK;AAGD,SAJD,MAIO;AACL,gBAAM,IAAIvE,KAAJ,CACH,oCAAmC6E,KAAM,4BAA2ByJ,WAAW,CAAClE,UAAZkE,CAAuBnN,QAAvBmN,EAAkC,EADnG,CAAN;AAGF;AACF;;AAEA,WAAK,MAAMzJ,KAAX,IAAoByJ,WAAW,CAACpE,eAAhC,EAAiD;AAC/C,YAAIrF,KAAK,GAAG0J,YAAY,CAACvE,KAAbuE,CAAmBtE,SAAnBsE,CAA6BxO,MAAzC,EAAiD;AAC/CwE,UAAAA,sBAAsB,CAACI,QAAvBJ,CAAgCE,IAAhCF,CACEgK,YAAY,CAACvE,KAAbuE,CAAmBtE,SAAnBsE,CAA6B1J,KAA7B0J,CADFhK;AAGD,SAJD,MAIO;AACL,gBAAM,IAAIvE,KAAJ,CACH,oCAAmC6E,KAAM,4BAA2ByJ,WAAW,CAAClE,UAAZkE,CAAuBnN,QAAvBmN,EAAkC,EADnG,CAAN;AAGF;AACF;AACF;;AAEA,WAAO/J,sBAAP;AACF;;AAEc,SAAP6D,OAAO,CAAC6C,IAAD,EAAiC;AAC7C,UAAMO,YAAY,GAAGvD,YAAY,CAACG,OAAbH,CAAqBgD,IAAI,CAAChG,YAA1BgD,EAAwCgD,IAAI,CAACQ,QAA7CxD,CAArB;AAEA,UAAMqD,mBAAmB,GAAG,IAAIlE,KAAJ,EAA5B;AACA,UAAM7C,sBAA8C,GAAG;AACrDG,MAAAA,QAAQ,EAAE,IAAI0C,KAAJ,EAD2C;AAErDzC,MAAAA,QAAQ,EAAE,IAAIyC,KAAJ;AAF2C,KAAvD;AAIA,UAAMqH,mBAAmB,GAAGxD,IAAI,CAAC+C,0BAAL/C,IAAmC,EAA/D;;AACA,SAAK,MAAMrB,WAAX,IAA0B6E,mBAA1B,EAA+C;AAC7C,YAAMC,aAAa,GAAGlD,YAAY,CAAC7B,kBAAb6B,CAAgC5B,WAAhC4B,CAAtB;;AACA,UAAIkD,aAAa,KAAKjO,SAAtB,EAAiC;AAC/B,cAAM,CAACkO,kBAAD,EAAqB;AAACjK,UAAAA,QAAD;AAAWC,UAAAA;AAAX,SAArB,IAA6C+J,aAAnD;AACApD,QAAAA,mBAAmB,CAAC7G,IAApB6G,CAAyBqD,kBAAzBrD;AACA/G,QAAAA,sBAAsB,CAACG,QAAvBH,CAAgCE,IAAhCF,CAAqC,GAAGG,QAAxCH;AACAA,QAAAA,sBAAsB,CAACI,QAAvBJ,CAAgCE,IAAhCF,CAAqC,GAAGI,QAAxCJ;AACF;AACF;;AAEA,UAAM,CAAC+E,MAAD,EAAShF,iBAAT,IAA8BkH,YAAY,CAAC3C,oBAAb2C,EAApC;AACA,UAAMV,WAAW,GAAG,IAAIzG,kBAAJ,CAClBC,iBADkB,EAElBC,sBAFkB,CAApB;AAIA,UAAM6G,oBAAoB,GAAGN,WAAW,CAAC9F,mBAAZ8F,CAC3BG,IAAI,CAAChG,YADsB6F,CAA7B;AAGA,WAAO,IAAI8C,SAAJ,CAAc;AACnBtE,MAAAA,MADmB;AAEnBhF,MAAAA,iBAFmB;AAGnByG,MAAAA,eAAe,EAAEE,IAAI,CAACF,eAHH;AAInBK,MAAAA,oBAJmB;AAKnBE,MAAAA;AALmB,KAAd,CAAP;AAOF;;AAEAjM,EAAAA,SAAS,GAAe;AACtB,UAAMuP,8BAA8B,GAAGxH,KAAK,EAA5C;AACAqF,IAAAA,YAAqB,CACnBmC,8BADmB,EAEnB,KAAKtK,iBAAL,CAAuBvE,MAFJ,CAArB0M;AAKA,UAAMoC,sBAAsB,GAAG,KAAKC,qBAAL,EAA/B;AACA,UAAMC,yBAAyB,GAAG3H,KAAK,EAAvC;AACAqF,IAAAA,YAAqB,CACnBsC,yBADmB,EAEnB,KAAK3D,oBAAL,CAA0BrL,MAFP,CAArB0M;AAKA,UAAMuC,6BAA6B,GAAG,KAAKC,4BAAL,EAAtC;AACA,UAAMC,gCAAgC,GAAG9H,KAAK,EAA9C;AACAqF,IAAAA,YAAqB,CACnByC,gCADmB,EAEnB,KAAK5D,mBAAL,CAAyBvL,MAFN,CAArB0M;AAKA,UAAM0C,aAAa,GAAGxJ,YAAY,CAACI,MAAbJ,CAUnB,CACDA,YAAY,CAACkB,EAAblB,CAAgB,QAAhBA,CADC,EAEDA,YAAY,CAACI,MAAbJ,CACE,CACEA,YAAY,CAACkB,EAAblB,CAAgB,uBAAhBA,CADF,EAEEA,YAAY,CAACkB,EAAblB,CAAgB,2BAAhBA,CAFF,EAGEA,YAAY,CAACkB,EAAblB,CAAgB,6BAAhBA,CAHF,CADFA,EAME,QANFA,CAFC,EAUDA,YAAY,CAACC,IAAbD,CACEiJ,8BAA8B,CAAC7O,MADjC4F,EAEE,yBAFFA,CAVC,EAcDA,YAAY,CAACuH,GAAbvH,CACEyH,SAAgB,EADlBzH,EAEE,KAAKrB,iBAAL,CAAuBvE,MAFzB4F,EAGE,mBAHFA,CAdC,EAmBDyH,SAAgB,CAAC,iBAAD,CAnBf,EAoBDzH,YAAY,CAACC,IAAbD,CAAkBoJ,yBAAyB,CAAChP,MAA5C4F,EAAoD,oBAApDA,CApBC,EAqBDA,YAAY,CAACC,IAAbD,CACEkJ,sBAAsB,CAAC9O,MADzB4F,EAEE,wBAFFA,CArBC,EAyBDA,YAAY,CAACC,IAAbD,CACEuJ,gCAAgC,CAACnP,MADnC4F,EAEE,2BAFFA,CAzBC,EA6BDA,YAAY,CAACC,IAAbD,CACEqJ,6BAA6B,CAACjP,MADhC4F,EAEE,+BAFFA,CA7BC,CAVmBA,CAAtB;AA6CA,UAAMyJ,iBAAiB,GAAG,IAAIvR,UAAJ,CAAe6F,gBAAf,CAA1B;AACA,UAAM2L,wBAAwB,GAAG,KAAK,CAAtC;AACA,UAAMC,uBAAuB,GAAGH,aAAa,CAAC/P,MAAd+P,CAC9B;AACEI,MAAAA,MAAM,EAAEF,wBADV;AAEE/F,MAAAA,MAAM,EAAE,KAAKA,MAFf;AAGEkG,MAAAA,uBAAuB,EAAE,IAAI3R,UAAJ,CAAe+Q,8BAAf,CAH3B;AAIEtK,MAAAA,iBAAiB,EAAE,KAAKA,iBAAL,CAAuBrE,GAAvB,CAA2BC,GAAG,IAAIA,GAAG,CAACkB,OAAJlB,EAAlC,CAJrB;AAKE6K,MAAAA,eAAe,EAAElK,IAAI,CAACtB,MAALsB,CAAY,KAAKkK,eAAjBlK,CALnB;AAME4O,MAAAA,kBAAkB,EAAE,IAAI5R,UAAJ,CAAekR,yBAAf,CANtB;AAOEF,MAAAA,sBAPF;AAQEa,MAAAA,yBAAyB,EAAE,IAAI7R,UAAJ,CACzBqR,gCADyB,CAR7B;AAWEF,MAAAA;AAXF,KAD8BG,EAc9BC,iBAd8BD,CAAhC;AAgBA,WAAOC,iBAAiB,CAAC/Q,KAAlB+Q,CAAwB,CAAxBA,EAA2BE,uBAA3BF,CAAP;AACF;;AAEQN,EAAAA,qBAAqB,GAAe;AAC1C,QAAIa,gBAAgB,GAAG,CAAvB;AACA,UAAMd,sBAAsB,GAAG,IAAIhR,UAAJ,CAAe6F,gBAAf,CAA/B;;AACA,SAAK,MAAM4B,WAAX,IAA0B,KAAK8F,oBAA/B,EAAqD;AACnD,YAAMwE,8BAA8B,GAAGxI,KAAK,EAA5C;AACAqF,MAAAA,YAAqB,CACnBmD,8BADmB,EAEnBtK,WAAW,CAACE,iBAAZF,CAA8BvF,MAFX,CAArB0M;AAKA,YAAMoD,iBAAiB,GAAGzI,KAAK,EAA/B;AACAqF,MAAAA,YAAqB,CAACoD,iBAAD,EAAoBvK,WAAW,CAAC9F,IAAZ8F,CAAiBvF,MAArC,CAArB0M;AAEA,YAAMQ,iBAAiB,GAAGtH,YAAY,CAACI,MAAbJ,CAMvB,CACDA,YAAY,CAACkB,EAAblB,CAAgB,gBAAhBA,CADC,EAEDA,YAAY,CAACC,IAAbD,CACEiK,8BAA8B,CAAC7P,MADjC4F,EAEE,gCAFFA,CAFC,EAMDA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,EADFA,EAEEL,WAAW,CAACE,iBAAZF,CAA8BvF,MAFhC4F,EAGE,mBAHFA,CANC,EAWDA,YAAY,CAACC,IAAbD,CAAkBkK,iBAAiB,CAAC9P,MAApC4F,EAA4C,mBAA5CA,CAXC,EAYDA,YAAY,CAACC,IAAbD,CAAkBL,WAAW,CAAC9F,IAAZ8F,CAAiBvF,MAAnC4F,EAA2C,MAA3CA,CAZC,CANuBA,CAA1B;AAqBAgK,MAAAA,gBAAgB,IAAI1C,iBAAiB,CAAC7N,MAAlB6N,CAClB;AACE1H,QAAAA,cAAc,EAAED,WAAW,CAACC,cAD9B;AAEEqK,QAAAA,8BAA8B,EAAE,IAAI/R,UAAJ,CAC9B+R,8BAD8B,CAFlC;AAKEpK,QAAAA,iBAAiB,EAAEF,WAAW,CAACE,iBALjC;AAMEqK,QAAAA,iBAAiB,EAAE,IAAIhS,UAAJ,CAAegS,iBAAf,CANrB;AAOErQ,QAAAA,IAAI,EAAE8F,WAAW,CAAC9F;AAPpB,OADkByN,EAUlB4B,sBAVkB5B,EAWlB0C,gBAXkB1C,CAApB0C;AAaF;;AAEA,WAAOd,sBAAsB,CAACxQ,KAAvBwQ,CAA6B,CAA7BA,EAAgCc,gBAAhCd,CAAP;AACF;;AAEQI,EAAAA,4BAA4B,GAAe;AACjD,QAAIU,gBAAgB,GAAG,CAAvB;AACA,UAAMX,6BAA6B,GAAG,IAAInR,UAAJ,CAAe6F,gBAAf,CAAtC;;AACA,SAAK,MAAMqK,MAAX,IAAqB,KAAKzC,mBAA1B,EAA+C;AAC7C,YAAMwE,4BAA4B,GAAG1I,KAAK,EAA1C;AACAqF,MAAAA,YAAqB,CACnBqD,4BADmB,EAEnB/B,MAAM,CAAClE,eAAPkE,CAAuBhO,MAFJ,CAArB0M;AAKA,YAAMsD,4BAA4B,GAAG3I,KAAK,EAA1C;AACAqF,MAAAA,YAAqB,CACnBsD,4BADmB,EAEnBhC,MAAM,CAAC7D,eAAP6D,CAAuBhO,MAFJ,CAArB0M;AAKA,YAAMuD,wBAAwB,GAAGrK,YAAY,CAACI,MAAbJ,CAM9B,CACDyH,SAAgB,CAAC,YAAD,CADf,EAEDzH,YAAY,CAACC,IAAbD,CACEmK,4BAA4B,CAAC/P,MAD/B4F,EAEE,8BAFFA,CAFC,EAMDA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,EADFA,EAEEoI,MAAM,CAAClE,eAAPkE,CAAuBhO,MAFzB4F,EAGE,iBAHFA,CANC,EAWDA,YAAY,CAACC,IAAbD,CACEoK,4BAA4B,CAAChQ,MAD/B4F,EAEE,8BAFFA,CAXC,EAeDA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,EADFA,EAEEoI,MAAM,CAAC7D,eAAP6D,CAAuBhO,MAFzB4F,EAGE,iBAHFA,CAfC,CAN8BA,CAAjC;AA4BAgK,MAAAA,gBAAgB,IAAIK,wBAAwB,CAAC5Q,MAAzB4Q,CAClB;AACE5F,QAAAA,UAAU,EAAE2D,MAAM,CAAC3D,UAAP2D,CAAkB3M,OAAlB2M,EADd;AAEE+B,QAAAA,4BAA4B,EAAE,IAAIjS,UAAJ,CAC5BiS,4BAD4B,CAFhC;AAKEjG,QAAAA,eAAe,EAAEkE,MAAM,CAAClE,eAL1B;AAMEkG,QAAAA,4BAA4B,EAAE,IAAIlS,UAAJ,CAC5BkS,4BAD4B,CANhC;AASE7F,QAAAA,eAAe,EAAE6D,MAAM,CAAC7D;AAT1B,OADkB8F,EAYlBhB,6BAZkBgB,EAalBL,gBAbkBK,CAApBL;AAeF;;AAEA,WAAOX,6BAA6B,CAAC3Q,KAA9B2Q,CAAoC,CAApCA,EAAuCW,gBAAvCX,CAAP;AACF;;AAEkB,SAAXvP,WAAW,CAAC2P,iBAAD,EAA2C;AAC3D,QAAI7B,SAAS,GAAG,CAAC,GAAG6B,iBAAJ,CAAhB;AAEA,UAAMG,MAAM,GAAGhC,SAAS,CAAC1F,KAAV0F,EAAf;AACA,UAAM0C,YAAY,GAAGV,MAAM,GAAG5L,mBAA9B;AACAqF,IAAAA,MAAM,CACJuG,MAAM,KAAKU,YADP,EAEH,wDAFG,CAANjH;AAKA,UAAMmC,OAAO,GAAG8E,YAAhB;AACAjH,IAAAA,MAAM,CACJmC,OAAO,KAAK,CADR,EAE2DA,+DAAAA,OAAQ,EAFnE,CAANnC;AAKA,UAAMM,MAAqB,GAAG;AAC5BC,MAAAA,qBAAqB,EAAEgE,SAAS,CAAC1F,KAAV0F,EADK;AAE5B/D,MAAAA,yBAAyB,EAAE+D,SAAS,CAAC1F,KAAV0F,EAFC;AAG5B9D,MAAAA,2BAA2B,EAAE8D,SAAS,CAAC1F,KAAV0F;AAHD,KAA9B;AAMA,UAAMjJ,iBAAiB,GAAG,EAA1B;AACA,UAAMkL,uBAAuB,GAAG/C,YAAqB,CAACc,SAAD,CAArD;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,uBAApB,EAA6C/B,CAAC,EAA9C,EAAkD;AAChDnJ,MAAAA,iBAAiB,CAACG,IAAlBH,CACE,IAAI3D,SAAJ,CAAc4M,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoBlN,iBAApBkN,CAAd,CADFjJ;AAGF;;AAEA,UAAMyG,eAAe,GAAGlK,IAAI,CAACzB,MAALyB,CAAY0M,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoBlN,iBAApBkN,CAAZ1M,CAAxB;AAEA,UAAMiM,gBAAgB,GAAGL,YAAqB,CAACc,SAAD,CAA9C;AACA,UAAMnC,oBAAkD,GAAG,EAA3D;;AACA,SAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,gBAApB,EAAsCW,CAAC,EAAvC,EAA2C;AACzC,YAAMlI,cAAc,GAAGgI,SAAS,CAAC1F,KAAV0F,EAAvB;AACA,YAAM4C,uBAAuB,GAAG1D,YAAqB,CAACc,SAAD,CAArD;AACA,YAAM/H,iBAAiB,GAAG+H,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoB4C,uBAApB5C,CAA1B;AACA,YAAMV,UAAU,GAAGJ,YAAqB,CAACc,SAAD,CAAxC;AACA,YAAM/N,IAAI,GAAG,IAAI3B,UAAJ,CAAe0P,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoBV,UAApBU,CAAf,CAAb;AACAnC,MAAAA,oBAAoB,CAAC3G,IAArB2G,CAA0B;AACxB7F,QAAAA,cADwB;AAExBC,QAAAA,iBAFwB;AAGxBhG,QAAAA;AAHwB,OAA1B4L;AAKF;;AAEA,UAAMgF,wBAAwB,GAAG3D,YAAqB,CAACc,SAAD,CAAtD;AACA,UAAMjC,mBAAgD,GAAG,EAAzD;;AACA,SAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2C,wBAApB,EAA8C3C,CAAC,EAA/C,EAAmD;AACjD,YAAMrD,UAAU,GAAG,IAAIzJ,SAAJ,CAAc4M,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoBlN,iBAApBkN,CAAd,CAAnB;AACA,YAAM8C,qBAAqB,GAAG5D,YAAqB,CAACc,SAAD,CAAnD;AACA,YAAM1D,eAAe,GAAG0D,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoB8C,qBAApB9C,CAAxB;AACA,YAAM+C,qBAAqB,GAAG7D,YAAqB,CAACc,SAAD,CAAnD;AACA,YAAMrD,eAAe,GAAGqD,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoB+C,qBAApB/C,CAAxB;AACAjC,MAAAA,mBAAmB,CAAC7G,IAApB6G,CAAyB;AACvBlB,QAAAA,UADuB;AAEvBP,QAAAA,eAFuB;AAGvBK,QAAAA;AAHuB,OAAzBoB;AAKF;;AAEA,WAAO,IAAIsC,SAAJ,CAAc;AACnBtE,MAAAA,MADmB;AAEnBhF,MAAAA,iBAFmB;AAGnByG,MAAAA,eAHmB;AAInBK,MAAAA,oBAJmB;AAKnBE,MAAAA;AALmB,KAAd,CAAP;AAOF;;AA5bqB,C,CC7CvB;;;AACO,MAAMiF,gBAAgB,GAAG;AAC9BC,EAAAA,yBAAyB,CAACpB,iBAAD,EAAmD;AAC1E,UAAMG,MAAM,GAAGH,iBAAiB,CAAC,CAAD,CAAhC;AACA,UAAMa,YAAY,GAAGV,MAAM,GAAG5L,mBAA9B,CAF0E,CAI1E;;AACA,QAAIsM,YAAY,KAAKV,MAArB,EAA6B;AAC3B,aAAO,QAAP;AACF,KAP0E,CAS1E;;;AACA,WAAOU,YAAP;AACD,GAZ6B;;AAc9BxQ,EAAAA,WAAW,EAAG2P,iBAA6B,IAAuB;AAChE,UAAMjE,OAAO,GACXoF,gBAAgB,CAACC,yBAAjBD,CAA2CnB,iBAA3CmB,CADF;;AAEA,QAAIpF,OAAO,KAAK,QAAhB,EAA0B;AACxB,aAAON,OAAO,CAAClM,IAARkM,CAAauE,iBAAbvE,CAAP;AACF;;AAEA,QAAIM,OAAO,KAAK,CAAhB,EAAmB;AACjB,aAAOyC,SAAS,CAACnO,WAAVmO,CAAsBwB,iBAAtBxB,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAI5N,KAAJ,CAC2BmL,+BAAAA,OAAQ,mCADnC,CAAN;AAGF;AACF;AA5B8B,CAAzB;ACSP;AACA;AACA;;AAGA,IAAkBsF,iBAAlB;AAOA;AACA;AACA;;AAFA,CAAA,UAPkBA,iBAOlB,EAPmC;AAAjBA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,sBAAA,CAAjBA,GAAiB,CAAA,CAAjBA,GAAiB,sBAAjBA;AAAAA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,WAAA,CAAjBA,GAAiB,CAAA,CAAjBA,GAAiB,WAAjBA;AAAAA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,WAAA,CAAjBA,GAAiB,CAAA,CAAjBA,GAAiB,WAAjBA;AAAAA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,eAAA,CAAjBA,GAAiB,CAAA,CAAjBA,GAAiB,eAAjBA;AAAAA,CAOlB,EAPkBA,iBAAiB,KAAjBA,iBAAiB,GAAA,EAAA,CAOnC;;AAGA,MAAMC,iBAAiB,GAAGjS,MAAM,CAACiD,KAAPjD,CAAamF,yBAAbnF,EAAwCkS,IAAxClS,CAA6C,CAA7CA,CAA1B;AAEA;AACA;AACA;;AA0CA;AACA;AACA;;AACO,MAAMmS,sBAAN,CAA6B;AAClC;AACF;AACA;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AAGE5R,EAAAA,WAAW,CAAC6R,IAAD,EAAyC;AAAA,SAZpD/Q,IAYoD,GAZhD,KAAA,CAYgD;AAZhD,SAKJoC,SALI,GAKK,KAAA,CALL;AAKK,SAKT1C,IALS,GAKMf,MAAM,CAACiD,KAAPjD,CAAa,CAAbA,CALN;AAQP,SAAKyD,SAAL,GAAiB2O,IAAI,CAAC3O,SAAtB;AACA,SAAKpC,IAAL,GAAY+Q,IAAI,CAAC/Q,IAAjB;;AACA,QAAI+Q,IAAI,CAACrR,IAAT,EAAe;AACb,WAAKA,IAAL,GAAYqR,IAAI,CAACrR,IAAjB;AACF;AACF;AAEA;AACF;AACA;;;AACE6B,EAAAA,MAAM,GAA+B;AACnC,WAAO;AACLvB,MAAAA,IAAI,EAAE,KAAKA,IAAL,CAAUG,GAAV,CAAc,CAAC;AAACiD,QAAAA,MAAD;AAASqF,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,OAAD,MAAqC;AACvDtF,QAAAA,MAAM,EAAEA,MAAM,CAAC7B,MAAP6B,EAD+C;AAEvDqF,QAAAA,QAFuD;AAGvDC,QAAAA;AAHuD,OAArC,CAAd,CADD;AAMLtG,MAAAA,SAAS,EAAE,KAAKA,SAAL,CAAeb,MAAf,EANN;AAOL7B,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKA,IAAT;AAPD,KAAP;AASF;;AAtCkC;AAyCpC;AACA;AACA;;AA6EA;AACA;AACA;;;AACO,MAAMsR,WAAN,CAAkB;AACvB;AACF;AACA;AACA;;AAGE;AACF;AACA;AACe,MAAThN,SAAS,GAAkB;AAC7B,QAAI,KAAKiN,UAAL,CAAgBhR,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,aAAO,KAAKgR,UAAL,CAAgB,CAAhB,EAAmBjN,SAA1B;AACF;;AACA,WAAO,IAAP;AACF;AAEA;AACF;AACA;;AAuDE;AACF;AACA;;;AACE9E,EAAAA,WAAW,CACT6R,IADS,EAKT;AA7EFE,SAAAA,UAAAA,GAAyC,EAAzCA;AAA2C,SAe3CC,QAf2C,GAenC,KAAA,CAfmC;AAenC,SAKR/L,YALQ,GAKsC,EALtC;AAKwC,SAKhD8F,eALgD,GAKjC,KAAA,CALiC;AAKjC,SAKfkG,oBALe,GAKK,KAAA,CALL;AAKK,SAMpBC,SANoB,GAMX,KAAA,CANW;AAMX,SASTC,mBATS,GASU,KAAA,CATV;AASU,SAKnBC,QALmB,GAKX,KAAA,CALW;AAKX,SAKRC,KALQ,GAKH,KAAA,CALG;;AA4BN,QAAI,CAACR,IAAL,EAAW;AACT;AACF;;AACA,QAAIA,IAAI,CAACG,QAAT,EAAmB;AACjB,WAAKA,QAAL,GAAgBH,IAAI,CAACG,QAArB;AACF;;AACA,QAAIH,IAAI,CAACE,UAAT,EAAqB;AACnB,WAAKA,UAAL,GAAkBF,IAAI,CAACE,UAAvB;AACF;;AACA,QAAI7R,MAAM,CAAC8E,SAAP9E,CAAiBoS,cAAjBpS,CAAgCqS,IAAhCrS,CAAqC2R,IAArC3R,EAA2C,WAA3CA,CAAJ,EAA6D;AAC3D,YAAM;AAACsS,QAAAA,cAAD;AAAiBN,QAAAA;AAAjB,UAA8BL,IAApC;AACA,WAAKM,mBAAL,GAA2BK,cAA3B;AACA,WAAKN,SAAL,GAAiBA,SAAjB;AACD,KAJD,MAIO,IACLhS,MAAM,CAAC8E,SAAP9E,CAAiBoS,cAAjBpS,CAAgCqS,IAAhCrS,CAAqC2R,IAArC3R,EAA2C,sBAA3CA,CADK,EAEL;AACA,YAAM;AAACuS,QAAAA,SAAD;AAAYR,QAAAA;AAAZ,UACJJ,IADF;AAEA,WAAK9F,eAAL,GAAuB0G,SAAvB;AACA,WAAKR,oBAAL,GAA4BA,oBAA5B;AACD,KAPM,MAOA;AACL,YAAM;AAAClG,QAAAA,eAAD;AAAkBmG,QAAAA;AAAlB,UACJL,IADF;;AAEA,UAAIK,SAAJ,EAAe;AACb,aAAKA,SAAL,GAAiBA,SAAjB;AACF;;AACA,WAAKnG,eAAL,GAAuBA,eAAvB;AACF;AACF;AAEA;AACF;AACA;;;AACE1J,EAAAA,MAAM,GAAoB;AACxB,WAAO;AACL0J,MAAAA,eAAe,EAAE,KAAKA,eAAL,IAAwB,IADpC;AAELiG,MAAAA,QAAQ,EAAE,KAAKA,QAAL,GAAgB,KAAKA,QAAL,CAAc3P,MAAd,EAAhB,GAAyC,IAF9C;AAGL6P,MAAAA,SAAS,EAAE,KAAKA,SAAL,GACP;AACEtO,QAAAA,KAAK,EAAE,KAAKsO,SAAL,CAAetO,KADxB;AAEE8O,QAAAA,gBAAgB,EAAE,KAAKR,SAAL,CAAeQ,gBAAf,CAAgCrQ,MAAhC;AAFpB,OADO,GAKP,IARC;AASL4D,MAAAA,YAAY,EAAE,KAAKA,YAAL,CAAkBhF,GAAlB,CAAsBqF,WAAW,IAAIA,WAAW,CAACjE,MAAZiE,EAArC,CATT;AAULqM,MAAAA,OAAO,EAAE,KAAKZ,UAAL,CAAgB9Q,GAAhB,CAAoB,CAAC;AAACvC,QAAAA;AAAD,OAAD,KAAiB;AAC5C,eAAOA,SAAS,CAAC2D,MAAV3D,EAAP;AACD,OAFQ;AAVJ,KAAP;AAcF;AAEA;AACF;AACA;;;AACEkU,EAAAA,GAAG,CACD,GAAGC,KADF,EAIY;AACb,QAAIA,KAAK,CAAC9R,MAAN8R,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAI7R,KAAJ,CAAU,iBAAV,CAAN;AACF;;AAEA6R,IAAAA,KAAK,CAACrP,OAANqP,CAAe3K,IAAS,IAAK;AAC3B,UAAI,kBAAkBA,IAAtB,EAA4B;AAC1B,aAAKjC,YAAL,GAAoB,KAAKA,YAAL,CAAkB9C,MAAlB,CAAyB+E,IAAI,CAACjC,YAA9B,CAApB;AACD,OAFD,MAEO,IAAI,UAAUiC,IAAV,IAAkB,eAAeA,IAAjC,IAAyC,UAAUA,IAAvD,EAA6D;AAClE,aAAKjC,YAAL,CAAkBR,IAAlB,CAAuByC,IAAvB;AACD,OAFM,MAEA;AACL,aAAKjC,YAAL,CAAkBR,IAAlB,CAAuB,IAAImM,sBAAJ,CAA2B1J,IAA3B,CAAvB;AACF;AACD,KARD2K;AASA,WAAO,IAAP;AACF;AAEA;AACF;AACA;;;AACEC,EAAAA,cAAc,GAAY;AACxB,QACE,KAAKV,QAAL,IACAW,IAAI,CAACC,SAALD,CAAe,KAAK1Q,MAAL,EAAf0Q,MAAkCA,IAAI,CAACC,SAALD,CAAe,KAAKV,KAApBU,CAFpC,EAGE;AACA,aAAO,KAAKX,QAAZ;AACF;;AAEA,QAAIrG,eAAJ;AACA,QAAI9F,YAAJ;;AACA,QAAI,KAAKiM,SAAT,EAAoB;AAClBnG,MAAAA,eAAe,GAAG,KAAKmG,SAAL,CAAetO,KAAjCmI;;AACA,UAAI,KAAK9F,YAAL,CAAkB,CAAlB,KAAwB,KAAKiM,SAAL,CAAeQ,gBAA3C,EAA6D;AAC3DzM,QAAAA,YAAY,GAAG,CAAC,KAAKiM,SAAL,CAAeQ,gBAAhB,EAAkC,GAAG,KAAKzM,YAA1C,CAAfA;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,GAAG,KAAKA,YAApBA;AACF;AACD,KAPD,MAOO;AACL8F,MAAAA,eAAe,GAAG,KAAKA,eAAvBA;AACA9F,MAAAA,YAAY,GAAG,KAAKA,YAApBA;AACF;;AACA,QAAI,CAAC8F,eAAL,EAAsB;AACpB,YAAM,IAAI/K,KAAJ,CAAU,sCAAV,CAAN;AACF;;AAEA,QAAIiF,YAAY,CAAClF,MAAbkF,GAAsB,CAA1B,EAA6B;AAC3BgN,MAAAA,OAAO,CAACC,IAARD,CAAa,0BAAbA;AACF;;AAEA,QAAIjB,QAAJ;;AACA,QAAI,KAAKA,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAG,KAAKA,QAAhBA;AACD,KAFD,MAEO,IAAI,KAAKD,UAAL,CAAgBhR,MAAhB,GAAyB,CAAzB,IAA8B,KAAKgR,UAAL,CAAgB,CAAhB,EAAmBrT,SAArD,EAAgE;AACrE;AACAsT,MAAAA,QAAQ,GAAG,KAAKD,UAAL,CAAgB,CAAhB,EAAmBrT,SAA9BsT;AACD,KAHM,MAGA;AACL,YAAM,IAAIhR,KAAJ,CAAU,gCAAV,CAAN;AACF;;AAEA,SAAK,IAAIyN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxI,YAAY,CAAClF,MAAjC,EAAyC0N,CAAC,EAA1C,EAA8C;AAC5C,UAAIxI,YAAY,CAACwI,CAAD,CAAZxI,CAAgB/C,SAAhB+C,KAA8BxE,SAAlC,EAA6C;AAC3C,cAAM,IAAIT,KAAJ,CAC6ByN,iCAAAA,CAAE,2BAD/B,CAAN;AAGF;AACF;;AAEA,UAAMtB,UAAoB,GAAG,EAA7B;AACA,UAAMgG,YAA2B,GAAG,EAApC;AACAlN,IAAAA,YAAY,CAACzC,OAAbyC,CAAqBK,WAAW,IAAI;AAClCA,MAAAA,WAAW,CAACxF,IAAZwF,CAAiB9C,OAAjB8C,CAAyBsD,WAAW,IAAI;AACtCuJ,QAAAA,YAAY,CAAC1N,IAAb0N,CAAkB,EAAC,GAAGvJ;AAAJ,SAAlBuJ;AACD,OAFD7M;AAIA,YAAMpD,SAAS,GAAGoD,WAAW,CAACpD,SAAZoD,CAAsBxD,QAAtBwD,EAAlB;;AACA,UAAI,CAAC6G,UAAU,CAACiG,QAAXjG,CAAoBjK,SAApBiK,CAAL,EAAqC;AACnCA,QAAAA,UAAU,CAAC1H,IAAX0H,CAAgBjK,SAAhBiK;AACF;AACD,KATDlH,EAjDwB,CA4DxB;;AACAkH,IAAAA,UAAU,CAAC3J,OAAX2J,CAAmBjK,SAAS,IAAI;AAC9BiQ,MAAAA,YAAY,CAAC1N,IAAb0N,CAAkB;AAChBjP,QAAAA,MAAM,EAAE,IAAIvC,SAAJ,CAAcuB,SAAd,CADQ;AAEhBqG,QAAAA,QAAQ,EAAE,KAFM;AAGhBC,QAAAA,UAAU,EAAE;AAHI,OAAlB2J;AAKD,KANDhG,EA7DwB,CAqExB;;AACA,UAAMkG,WAA0B,GAAG,EAAnC;AACAF,IAAAA,YAAY,CAAC3P,OAAb2P,CAAqBvJ,WAAW,IAAI;AAClC,YAAM0J,YAAY,GAAG1J,WAAW,CAAC1F,MAAZ0F,CAAmB9G,QAAnB8G,EAArB;AACA,YAAM2J,WAAW,GAAGF,WAAW,CAAC3H,SAAZ2H,CAAsBG,CAAC,IAAI;AAC7C,eAAOA,CAAC,CAACtP,MAAFsP,CAAS1Q,QAAT0Q,OAAwBF,YAA/B;AACD,OAFmBD,CAApB;;AAGA,UAAIE,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpBF,QAAAA,WAAW,CAACE,WAAD,CAAXF,CAAyB7J,UAAzB6J,GACEA,WAAW,CAACE,WAAD,CAAXF,CAAyB7J,UAAzB6J,IAAuCzJ,WAAW,CAACJ,UADrD6J;AAEAA,QAAAA,WAAW,CAACE,WAAD,CAAXF,CAAyB9J,QAAzB8J,GACEA,WAAW,CAACE,WAAD,CAAXF,CAAyB9J,QAAzB8J,IAAqCzJ,WAAW,CAACL,QADnD8J;AAED,OALD,MAKO;AACLA,QAAAA,WAAW,CAAC5N,IAAZ4N,CAAiBzJ,WAAjByJ;AACF;AACD,KAbDF,EAvEwB,CAsFxB;;AACAE,IAAAA,WAAW,CAACI,IAAZJ,CAAiB,UAAUG,CAAV,EAAaE,CAAb,EAAgB;AAC/B,UAAIF,CAAC,CAACjK,QAAFiK,KAAeE,CAAC,CAACnK,QAArB,EAA+B;AAC7B;AACA,eAAOiK,CAAC,CAACjK,QAAFiK,GAAa,CAAC,CAAdA,GAAkB,CAAzB;AACF;;AACA,UAAIA,CAAC,CAAChK,UAAFgK,KAAiBE,CAAC,CAAClK,UAAvB,EAAmC;AACjC;AACA,eAAOgK,CAAC,CAAChK,UAAFgK,GAAe,CAAC,CAAhBA,GAAoB,CAA3B;AACF,OAR+B,CAS/B;;;AACA,aAAOA,CAAC,CAACtP,MAAFsP,CAASrR,QAATqR,GAAoBG,aAApBH,CAAkCE,CAAC,CAACxP,MAAFwP,CAASvR,QAATuR,EAAlCF,CAAP;AACD,KAXDH,EAvFwB,CAoGxB;;AACA,UAAMO,aAAa,GAAGP,WAAW,CAAC3H,SAAZ2H,CAAsBG,CAAC,IAAI;AAC/C,aAAOA,CAAC,CAACtP,MAAFsP,CAASvR,MAATuR,CAAgBxB,QAAhBwB,CAAP;AACD,KAFqBH,CAAtB;;AAGA,QAAIO,aAAa,GAAG,CAAC,CAArB,EAAwB;AACtB,YAAM,CAACC,SAAD,IAAcR,WAAW,CAACnC,MAAZmC,CAAmBO,aAAnBP,EAAkC,CAAlCA,CAApB;AACAQ,MAAAA,SAAS,CAACtK,QAAVsK,GAAqB,IAArBA;AACAA,MAAAA,SAAS,CAACrK,UAAVqK,GAAuB,IAAvBA;AACAR,MAAAA,WAAW,CAACS,OAAZT,CAAoBQ,SAApBR;AACD,KALD,MAKO;AACLA,MAAAA,WAAW,CAACS,OAAZT,CAAoB;AAClBnP,QAAAA,MAAM,EAAE8N,QADU;AAElBzI,QAAAA,QAAQ,EAAE,IAFQ;AAGlBC,QAAAA,UAAU,EAAE;AAHM,OAApB6J;AAKF,KAnHwB,CAqHxB;;;AACA,SAAK,MAAMvO,SAAX,IAAwB,KAAKiN,UAA7B,EAAyC;AACvC,YAAMwB,WAAW,GAAGF,WAAW,CAAC3H,SAAZ2H,CAAsBG,CAAC,IAAI;AAC7C,eAAOA,CAAC,CAACtP,MAAFsP,CAASvR,MAATuR,CAAgB1O,SAAS,CAACpG,SAA1B8U,CAAP;AACD,OAFmBH,CAApB;;AAGA,UAAIE,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpB,YAAI,CAACF,WAAW,CAACE,WAAD,CAAXF,CAAyB9J,QAA9B,EAAwC;AACtC8J,UAAAA,WAAW,CAACE,WAAD,CAAXF,CAAyB9J,QAAzB8J,GAAoC,IAApCA;AACAJ,UAAAA,OAAO,CAACC,IAARD,CACE,6DACE,gFADF,GAEE,wFAHJA;AAKF;AACD,OATD,MASO;AACL,cAAM,IAAIjS,KAAJ,CAA6B8D,mBAAAA,SAAS,CAACpG,SAAVoG,CAAoBhC,QAApBgC,EAA+B,EAA5D,CAAN;AACF;AACF;;AAEA,QAAIyF,qBAAqB,GAAG,CAA5B;AACA,QAAIC,yBAAyB,GAAG,CAAhC;AACA,QAAIC,2BAA2B,GAAG,CAAlC,CA1IwB,CA4IxB;;AACA,UAAMsJ,UAAoB,GAAG,EAA7B;AACA,UAAMC,YAAsB,GAAG,EAA/B;AACAX,IAAAA,WAAW,CAAC7P,OAAZ6P,CAAoB,CAAC;AAACnP,MAAAA,MAAD;AAASqF,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,KAAD,KAAoC;AACtD,UAAID,QAAJ,EAAc;AACZwK,QAAAA,UAAU,CAACtO,IAAXsO,CAAgB7P,MAAM,CAACpB,QAAPoB,EAAhB6P;AACAxJ,QAAAA,qBAAqB,IAAI,CAAzBA;;AACA,YAAI,CAACf,UAAL,EAAiB;AACfgB,UAAAA,yBAAyB,IAAI,CAA7BA;AACF;AACD,OAND,MAMO;AACLwJ,QAAAA,YAAY,CAACvO,IAAbuO,CAAkB9P,MAAM,CAACpB,QAAPoB,EAAlB8P;;AACA,YAAI,CAACxK,UAAL,EAAiB;AACfiB,UAAAA,2BAA2B,IAAI,CAA/BA;AACF;AACF;AACD,KAbD4I;AAeA,UAAMvH,WAAW,GAAGiI,UAAU,CAAC5Q,MAAX4Q,CAAkBC,YAAlBD,CAApB;AACA,UAAM3H,oBAA2C,GAAGnG,YAAY,CAAChF,GAAbgF,CAClDK,WAAW,IAAI;AACb,YAAM;AAAC9F,QAAAA,IAAD;AAAO0C,QAAAA;AAAP,UAAoBoD,WAA1B;AACA,aAAO;AACLC,QAAAA,cAAc,EAAEuF,WAAW,CAACmI,OAAZnI,CAAoB5I,SAAS,CAACJ,QAAVI,EAApB4I,CADX;AAELO,QAAAA,QAAQ,EAAE/F,WAAW,CAACxF,IAAZwF,CAAiBrF,GAAjBqF,CAAqBG,IAAI,IACjCqF,WAAW,CAACmI,OAAZnI,CAAoBrF,IAAI,CAACvC,MAALuC,CAAY3D,QAAZ2D,EAApBqF,CADQxF,CAFL;AAKL9F,QAAAA,IAAI,EAAEqB,IAAI,CAACzB,MAALyB,CAAYrB,IAAZqB;AALD,OAAP;AAOD,KAViDoE,CAApD;AAaAmG,IAAAA,oBAAoB,CAAC5I,OAArB4I,CAA6B9F,WAAW,IAAI;AAC1C4N,MAAAA,MAAS,CAAC5N,WAAW,CAACC,cAAZD,IAA8B,CAA/B,CAAT4N;AACA5N,MAAAA,WAAW,CAAC+F,QAAZ/F,CAAqB9C,OAArB8C,CAA6BD,QAAQ,IAAI6N,MAAS,CAAC7N,QAAQ,IAAI,CAAb,CAAlDC;AACD,KAHD8F;AAKA,WAAO,IAAIP,OAAJ,CAAY;AACjBvB,MAAAA,MAAM,EAAE;AACNC,QAAAA,qBADM;AAENC,QAAAA,yBAFM;AAGNC,QAAAA;AAHM,OADS;AAMjBqB,MAAAA,WANiB;AAOjBC,MAAAA,eAPiB;AAQjB9F,MAAAA,YAAY,EAAEmG;AARG,KAAZ,CAAP;AAUF;AAEA;AACF;AACA;;;AACE+H,EAAAA,QAAQ,GAAY;AAClB,UAAM/U,OAAO,GAAG,KAAK0T,cAAL,EAAhB;AACA,UAAMiB,UAAU,GAAG3U,OAAO,CAAC0M,WAAR1M,CAAoBC,KAApBD,CACjB,CADiBA,EAEjBA,OAAO,CAACkL,MAARlL,CAAemL,qBAFEnL,CAAnB;;AAKA,QAAI,KAAK2S,UAAL,CAAgBhR,MAAhB,KAA2BgT,UAAU,CAAChT,MAA1C,EAAkD;AAChD,YAAMqT,KAAK,GAAG,KAAKrC,UAAL,CAAgBsC,KAAhB,CAAsB,CAACC,IAAD,EAAOzO,KAAP,KAAiB;AACnD,eAAOkO,UAAU,CAAClO,KAAD,CAAVkO,CAAkB9R,MAAlB8R,CAAyBO,IAAI,CAAC5V,SAA9BqV,CAAP;AACD,OAFa,CAAd;AAIA,UAAIK,KAAJ,EAAW,OAAOhV,OAAP;AACb;;AAEA,SAAK2S,UAAL,GAAkBgC,UAAU,CAAC9S,GAAX8S,CAAerV,SAAS,KAAK;AAC7CoG,MAAAA,SAAS,EAAE,IADkC;AAE7CpG,MAAAA;AAF6C,KAAL,CAAxBqV,CAAlB;AAKA,WAAO3U,OAAP;AACF;AAEA;AACF;AACA;;;AACEmV,EAAAA,gBAAgB,GAAW;AACzB,WAAO,KAAKJ,QAAL,GAAgB9T,SAAhB,EAAP;AACF;AAEA;AACF;AACA;;;AACuB,QAAfmU,eAAe,CAACC,UAAD,EAAiD;AACpE,WAAO,CAAC,MAAMA,UAAU,CAACC,gBAAXD,CAA4B,KAAK3B,cAAL,EAA5B2B,CAAP,EAA2DlT,KAAlE;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEoT,EAAAA,UAAU,CAAC,GAAGhC,OAAJ,EAA+B;AACvC,QAAIA,OAAO,CAAC5R,MAAR4R,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAI3R,KAAJ,CAAU,YAAV,CAAN;AACF;;AAEA,UAAM4T,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,SAAK9C,UAAL,GAAkBY,OAAO,CACtBzI,MADeyI,CACRjU,SAAS,IAAI;AACnB,YAAMwC,GAAG,GAAGxC,SAAS,CAACoE,QAAVpE,EAAZ;;AACA,UAAIkW,IAAI,CAAC1H,GAAL0H,CAAS1T,GAAT0T,CAAJ,EAAmB;AACjB,eAAO,KAAP;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAAChC,GAALgC,CAAS1T,GAAT0T;AACA,eAAO,IAAP;AACF;AACD,KATejC,EAUf1R,GAVe0R,CAUXjU,SAAS,KAAK;AAACoG,MAAAA,SAAS,EAAE,IAAZ;AAAkBpG,MAAAA;AAAlB,KAAL,CAVEiU,CAAlB;AAWF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACExT,EAAAA,IAAI,CAAC,GAAGwT,OAAJ,EAA4B;AAC9B,QAAIA,OAAO,CAAC5R,MAAR4R,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAI3R,KAAJ,CAAU,YAAV,CAAN;AACF,KAH8B,CAK9B;;;AACA,UAAM4T,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,UAAMC,aAAa,GAAG,EAAtB;;AACA,SAAK,MAAMC,MAAX,IAAqBpC,OAArB,EAA8B;AAC5B,YAAMzR,GAAG,GAAG6T,MAAM,CAACrW,SAAPqW,CAAiBjS,QAAjBiS,EAAZ;;AACA,UAAIH,IAAI,CAAC1H,GAAL0H,CAAS1T,GAAT0T,CAAJ,EAAmB;AACjB;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAAChC,GAALgC,CAAS1T,GAAT0T;AACAE,QAAAA,aAAa,CAACrP,IAAdqP,CAAmBC,MAAnBD;AACF;AACF;;AAEA,SAAK/C,UAAL,GAAkB+C,aAAa,CAAC7T,GAAd6T,CAAkBC,MAAM,KAAK;AAC7CjQ,MAAAA,SAAS,EAAE,IADkC;AAE7CpG,MAAAA,SAAS,EAAEqW,MAAM,CAACrW;AAF2B,KAAL,CAAxBoW,CAAlB;;AAKA,UAAM1V,OAAO,GAAG,KAAK+U,QAAL,EAAhB;;AACA,SAAKa,YAAL,CAAkB5V,OAAlB,EAA2B,GAAG0V,aAA9B;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,WAAW,CAAC,GAAGtC,OAAJ,EAA4B;AACrC,QAAIA,OAAO,CAAC5R,MAAR4R,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAI3R,KAAJ,CAAU,YAAV,CAAN;AACF,KAHqC,CAKrC;;;AACA,UAAM4T,IAAI,GAAG,IAAIC,GAAJ,EAAb;AACA,UAAMC,aAAa,GAAG,EAAtB;;AACA,SAAK,MAAMC,MAAX,IAAqBpC,OAArB,EAA8B;AAC5B,YAAMzR,GAAG,GAAG6T,MAAM,CAACrW,SAAPqW,CAAiBjS,QAAjBiS,EAAZ;;AACA,UAAIH,IAAI,CAAC1H,GAAL0H,CAAS1T,GAAT0T,CAAJ,EAAmB;AACjB;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAAChC,GAALgC,CAAS1T,GAAT0T;AACAE,QAAAA,aAAa,CAACrP,IAAdqP,CAAmBC,MAAnBD;AACF;AACF;;AAEA,UAAM1V,OAAO,GAAG,KAAK+U,QAAL,EAAhB;;AACA,SAAKa,YAAL,CAAkB5V,OAAlB,EAA2B,GAAG0V,aAA9B;AACF;AAEA;AACF;AACA;;;AACEE,EAAAA,YAAY,CAAC5V,OAAD,EAAmB,GAAGuT,OAAtB,EAA8C;AACxD,UAAMrE,QAAQ,GAAGlP,OAAO,CAACiB,SAARjB,EAAjB;AACAuT,IAAAA,OAAO,CAACnP,OAARmP,CAAgBoC,MAAM,IAAI;AACxB,YAAMjQ,SAAS,GAAG3F,IAAI,CAACmP,QAAD,EAAWyG,MAAM,CAACnW,SAAlB,CAAtB;;AACA,WAAKsW,aAAL,CAAmBH,MAAM,CAACrW,SAA1B,EAAqCa,QAAQ,CAACuF,SAAD,CAA7C;AACD,KAHD6N;AAIF;AAEA;AACF;AACA;AACA;AACA;;;AACEwC,EAAAA,YAAY,CAACjR,MAAD,EAAoBY,SAApB,EAAuC;AACjD,SAAKqP,QAAL,GADiD,CACjC;;;AAChB,SAAKe,aAAL,CAAmBhR,MAAnB,EAA2BY,SAA3B;AACF;AAEA;AACF;AACA;;;AACEoQ,EAAAA,aAAa,CAAChR,MAAD,EAAoBY,SAApB,EAAuC;AAClDoP,IAAAA,MAAS,CAACpP,SAAS,CAAC/D,MAAV+D,KAAqB,EAAtB,CAAToP;AAEA,UAAMrO,KAAK,GAAG,KAAKkM,UAAL,CAAgBrG,SAAhB,CAA0B0J,OAAO,IAC7ClR,MAAM,CAACjC,MAAPiC,CAAckR,OAAO,CAAC1W,SAAtBwF,CADY,CAAd;;AAGA,QAAI2B,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAI7E,KAAJ,CAAW,mBAAkBkD,MAAM,CAACpB,QAAPoB,EAAkB,EAA/C,CAAN;AACF;;AAEA,SAAK6N,UAAL,CAAgBlM,KAAhB,EAAuBf,SAAvB,GAAmCrF,MAAM,CAACE,IAAPF,CAAYqF,SAAZrF,CAAnC;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACE4V,EAAAA,gBAAgB,CAACC,oBAAD,EAA0C;AACxD,WAAO,KAAKC,iBAAL,CACL,KAAKhB,gBAAL,EADK,EAELe,oBAAoB,KAAK7T,SAAzB6T,GAAqC,IAArCA,GAA4CA,oBAFvC,CAAP;AAIF;AAEA;AACF;AACA;;;AACEC,EAAAA,iBAAiB,CACfjH,QADe,EAEfgH,oBAFe,EAGN;AACT,SAAK,MAAM;AAACxQ,MAAAA,SAAD;AAAYpG,MAAAA;AAAZ,KAAX,IAAqC,KAAKqT,UAA1C,EAAsD;AACpD,UAAIjN,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAIwQ,oBAAJ,EAA0B;AACxB,iBAAO,KAAP;AACF;AACD,OAJD,MAIO;AACL,YAAI,CAAChW,MAAM,CAACwF,SAAD,EAAYwJ,QAAZ,EAAsB5P,SAAS,CAAC0D,OAAV1D,EAAtB,CAAX,EAAuD;AACrD,iBAAO,KAAP;AACF;AACF;AACF;;AACA,WAAO,IAAP;AACF;AAEA;AACF;AACA;;;AACE2B,EAAAA,SAAS,CAACmV,MAAD,EAAmC;AAC1C,UAAM;AAACF,MAAAA,oBAAD;AAAuBD,MAAAA;AAAvB,QAA2CnV,MAAM,CAACC,MAAPD,CAC/C;AAACoV,MAAAA,oBAAoB,EAAE,IAAvB;AAA6BD,MAAAA,gBAAgB,EAAE;AAA/C,KAD+CnV,EAE/CsV,MAF+CtV,CAAjD;AAKA,UAAMoO,QAAQ,GAAG,KAAKiG,gBAAL,EAAjB;;AACA,QACEc,gBAAgB,IAChB,CAAC,KAAKE,iBAAL,CAAuBjH,QAAvB,EAAiCgH,oBAAjC,CAFH,EAGE;AACA,YAAM,IAAItU,KAAJ,CAAU,+BAAV,CAAN;AACF;;AAEA,WAAO,KAAKyU,UAAL,CAAgBnH,QAAhB,CAAP;AACF;AAEA;AACF;AACA;;;AACEmH,EAAAA,UAAU,CAACnH,QAAD,EAA2B;AACnC,UAAM;AAACyD,MAAAA;AAAD,QAAe,IAArB;AACA,UAAM2D,cAAwB,GAAG,EAAjC;AACAjI,IAAAA,YAAqB,CAACiI,cAAD,EAAiB3D,UAAU,CAAChR,MAA5B,CAArB0M;AACA,UAAMkI,iBAAiB,GACrBD,cAAc,CAAC3U,MAAf2U,GAAwB3D,UAAU,CAAChR,MAAXgR,GAAoB,EAA5C2D,GAAiDpH,QAAQ,CAACvN,MAD5D;AAEA,UAAM6U,eAAe,GAAGnW,MAAM,CAACiD,KAAPjD,CAAakW,iBAAblW,CAAxB;AACAyU,IAAAA,MAAS,CAACnC,UAAU,CAAChR,MAAXgR,GAAoB,GAArB,CAATmC;AACAzU,IAAAA,MAAM,CAACE,IAAPF,CAAYiW,cAAZjW,EAA4BkD,IAA5BlD,CAAiCmW,eAAjCnW,EAAkD,CAAlDA;AACAsS,IAAAA,UAAU,CAACvO,OAAXuO,CAAmB,CAAC;AAACjN,MAAAA;AAAD,KAAD,EAAce,KAAd,KAAwB;AACzC,UAAIf,SAAS,KAAK,IAAlB,EAAwB;AACtBoP,QAAAA,MAAS,CAACpP,SAAS,CAAC/D,MAAV+D,KAAqB,EAAtB,EAA2B,8BAA3B,CAAToP;AACAzU,QAAAA,MAAM,CAACE,IAAPF,CAAYqF,SAAZrF,EAAuBkD,IAAvBlD,CACEmW,eADFnW,EAEEiW,cAAc,CAAC3U,MAAf2U,GAAwB7P,KAAK,GAAG,EAFlCpG;AAIF;AACD,KARDsS;AASAzD,IAAAA,QAAQ,CAAC3L,IAAT2L,CACEsH,eADFtH,EAEEoH,cAAc,CAAC3U,MAAf2U,GAAwB3D,UAAU,CAAChR,MAAXgR,GAAoB,EAF9CzD;AAIA4F,IAAAA,MAAS,CACP0B,eAAe,CAAC7U,MAAhB6U,IAA0BlR,gBADnB,EAEmBkR,0BAAAA,eAAe,CAAC7U,MAAY2D,MAAAA,gBAAiB,EAFhE,CAATwP;AAIA,WAAO0B,eAAP;AACF;AAEA;AACF;AACA;AACA;;;AACU,MAAJ9U,IAAI,GAAqB;AAC3BoT,IAAAA,MAAS,CAAC,KAAKjO,YAAL,CAAkBlF,MAAlB,KAA6B,CAA9B,CAATmT;AACA,WAAO,KAAKjO,YAAL,CAAkB,CAAlB,EAAqBnF,IAArB,CAA0BG,GAA1B,CAA8B4U,MAAM,IAAIA,MAAM,CAAC3R,MAA/C,CAAP;AACF;AAEA;AACF;AACA;AACA;;;AACe,MAAThB,SAAS,GAAc;AACzBgR,IAAAA,MAAS,CAAC,KAAKjO,YAAL,CAAkBlF,MAAlB,KAA6B,CAA9B,CAATmT;AACA,WAAO,KAAKjO,YAAL,CAAkB,CAAlB,EAAqB/C,SAA5B;AACF;AAEA;AACF;AACA;AACA;;;AACU,MAAJ1C,IAAI,GAAW;AACjB0T,IAAAA,MAAS,CAAC,KAAKjO,YAAL,CAAkBlF,MAAlB,KAA6B,CAA9B,CAATmT;AACA,WAAO,KAAKjO,YAAL,CAAkB,CAAlB,EAAqBzF,IAA5B;AACF;AAEA;AACF;AACA;;;AACa,SAAJb,IAAI,CAACC,MAAD,EAA2D;AACpE;AACA,QAAI2O,SAAS,GAAG,CAAC,GAAG3O,MAAJ,CAAhB;AAEA,UAAM8V,cAAc,GAAGjI,YAAqB,CAACc,SAAD,CAA5C;AACA,QAAIwD,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiH,cAApB,EAAoCjH,CAAC,EAArC,EAAyC;AACvC,YAAM3J,SAAS,GAAGyJ,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmB3J,yBAAnB2J,CAAlB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgB3J,yBAAhB2J,CAAZA;AACAwD,MAAAA,UAAU,CAACtM,IAAXsM,CAAgBlQ,IAAI,CAACzB,MAALyB,CAAYpC,MAAM,CAACE,IAAPF,CAAYqF,SAAZrF,CAAZoC,CAAhBkQ;AACF;;AAEA,WAAOD,WAAW,CAACgE,QAAZhE,CAAqBjG,OAAO,CAAClM,IAARkM,CAAa0C,SAAb1C,CAArBiG,EAA8CC,UAA9CD,CAAP;AACF;AAEA;AACF;AACA;;;AACiB,SAARgE,QAAQ,CACb1W,OADa,EAEb2S,UAAyB,GAAG,EAFf,EAGA;AACb,UAAM1D,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACtC,eAAZsC,GAA8BjP,OAAO,CAAC2M,eAAtCsC;;AACA,QAAIjP,OAAO,CAACkL,MAARlL,CAAemL,qBAAfnL,GAAuC,CAA3C,EAA8C;AAC5CiP,MAAAA,WAAW,CAAC2D,QAAZ3D,GAAuBjP,OAAO,CAAC0M,WAAR1M,CAAoB,CAApBA,CAAvBiP;AACF;;AACA0D,IAAAA,UAAU,CAACvO,OAAXuO,CAAmB,CAACjN,SAAD,EAAYe,KAAZ,KAAsB;AACvC,YAAMkQ,aAAa,GAAG;AACpBjR,QAAAA,SAAS,EACPA,SAAS,IAAIjD,IAAI,CAACzB,MAALyB,CAAY6P,iBAAZ7P,CAAbiD,GACI,IADJA,GAEIjD,IAAI,CAACtB,MAALsB,CAAYiD,SAAZjD,CAJc;AAKpBnD,QAAAA,SAAS,EAAEU,OAAO,CAAC0M,WAAR1M,CAAoByG,KAApBzG;AALS,OAAtB;AAOAiP,MAAAA,WAAW,CAAC0D,UAAZ1D,CAAuB5I,IAAvB4I,CAA4B0H,aAA5B1H;AACD,KATD0D;AAWA3S,IAAAA,OAAO,CAAC6G,YAAR7G,CAAqBoE,OAArBpE,CAA6BkH,WAAW,IAAI;AAC1C,YAAMxF,IAAI,GAAGwF,WAAW,CAAC+F,QAAZ/F,CAAqBrF,GAArBqF,CAAyB4F,OAAO,IAAI;AAC/C,cAAMhI,MAAM,GAAG9E,OAAO,CAAC0M,WAAR1M,CAAoB8M,OAApB9M,CAAf;AACA,eAAO;AACL8E,UAAAA,MADK;AAELqF,UAAAA,QAAQ,EACN8E,WAAW,CAAC0D,UAAZ1D,CAAuB2H,IAAvB3H,CACEwH,MAAM,IAAIA,MAAM,CAACnX,SAAPmX,CAAiB/S,QAAjB+S,OAAgC3R,MAAM,CAACpB,QAAPoB,EAD5CmK,KAEKjP,OAAO,CAACsN,eAARtN,CAAwB8M,OAAxB9M,CALF;AAMLoK,UAAAA,UAAU,EAAEpK,OAAO,CAACuN,iBAARvN,CAA0B8M,OAA1B9M;AANP,SAAP;AAQD,OAVYkH,CAAb;AAYA+H,MAAAA,WAAW,CAACpI,YAAZoI,CAAyB5I,IAAzB4I,CACE,IAAIuD,sBAAJ,CAA2B;AACzB9Q,QAAAA,IADyB;AAEzBoC,QAAAA,SAAS,EAAE9D,OAAO,CAAC0M,WAAR1M,CAAoBkH,WAAW,CAACC,cAAhCnH,CAFc;AAGzBoB,QAAAA,IAAI,EAAEqB,IAAI,CAACtB,MAALsB,CAAYyE,WAAW,CAAC9F,IAAxBqB;AAHmB,OAA3B,CADFwM;AAOD,KApBDjP;AAsBAiP,IAAAA,WAAW,CAAC+D,QAAZ/D,GAAuBjP,OAAvBiP;AACAA,IAAAA,WAAW,CAACgE,KAAZhE,GAAoBA,WAAW,CAAChM,MAAZgM,EAApBA;AAEA,WAAOA,WAAP;AACF;;AAhsBuB;;ACnLlB,MAAM4H,kBAAN,CAAyB;AAK9BjW,EAAAA,WAAW,CAACiM,IAAD,EAA+B;AAAA,SAJ1CQ,QAI0C,GAJlC,KAAA,CAIkC;AAJlC,SACRxG,YADQ,GACI,KAAA,CADJ;AACI,SACZ8F,eADY,GACG,KAAA,CADH;AAIV,SAAKU,QAAL,GAAgBR,IAAI,CAACQ,QAArB;AACA,SAAKxG,YAAL,GAAoBgG,IAAI,CAAChG,YAAzB;AACA,SAAK8F,eAAL,GAAuBE,IAAI,CAACF,eAA5B;AACF;;AAEgB,SAATmK,SAAS,CACd9W,OADc,EAEd6M,IAFc,EAGM;AACpB,UAAM;AAAC3B,MAAAA,MAAD;AAAS8B,MAAAA,oBAAT;AAA+BL,MAAAA;AAA/B,QAAkD3M,OAAxD;AAEA,UAAM;AACJmL,MAAAA,qBADI;AAEJC,MAAAA,yBAFI;AAGJC,MAAAA;AAHI,QAIFH,MAJJ;AAMA,UAAM0C,yBAAyB,GAC7BzC,qBAAqB,GAAGC,yBAD1B;AAEAR,IAAAA,MAAM,CAACgD,yBAAyB,GAAG,CAA7B,EAAgC,2BAAhC,CAANhD;AAEA,UAAM+C,2BAA2B,GAC/B3N,OAAO,CAACkG,iBAARlG,CAA0B2B,MAA1B3B,GACAmL,qBADAnL,GAEAqL,2BAHF;AAIAT,IAAAA,MAAM,CAAC+C,2BAA2B,IAAI,CAAhC,EAAmC,2BAAnC,CAAN/C;AAEA,UAAM8B,WAAW,GAAG1M,OAAO,CAACmN,cAARnN,CAAuB6M,IAAvB7M,CAApB;AACA,UAAMqN,QAAQ,GAAGX,WAAW,CAAClG,GAAZkG,CAAgB,CAAhBA,CAAjB;;AACA,QAAIW,QAAQ,KAAKhL,SAAjB,EAA4B;AAC1B,YAAM,IAAIT,KAAJ,CACJ,gEADI,CAAN;AAGF;;AAEA,UAAMiF,YAAsC,GAAG,EAA/C;;AACA,SAAK,MAAMkQ,UAAX,IAAyB/J,oBAAzB,EAA+C;AAC7C,YAAMtL,IAAmB,GAAG,EAA5B;;AAEA,WAAK,MAAMuF,QAAX,IAAuB8P,UAAU,CAAC3P,iBAAlC,EAAqD;AACnD,cAAMtC,MAAM,GAAG4H,WAAW,CAAClG,GAAZkG,CAAgBzF,QAAhByF,CAAf;;AACA,YAAI5H,MAAM,KAAKzC,SAAf,EAA0B;AACxB,gBAAM,IAAIT,KAAJ,CACwCqF,4CAAAA,QAAS,EADjD,CAAN;AAGF;;AAEA,cAAMkD,QAAQ,GAAGlD,QAAQ,GAAGkE,qBAA5B;AAEA,YAAIf,UAAJ;;AACA,YAAID,QAAJ,EAAc;AACZC,UAAAA,UAAU,GAAGnD,QAAQ,GAAG2G,yBAAxBxD;AACD,SAFD,MAEO,IAAInD,QAAQ,GAAGyF,WAAW,CAACxG,iBAAZwG,CAA8B/K,MAA7C,EAAqD;AAC1DyI,UAAAA,UAAU,GACRnD,QAAQ,GAAGkE,qBAAXlE,GAAmC0G,2BADrCvD;AAED,SAHM,MAGA;AACLA,UAAAA,UAAU,GACRnD,QAAQ,GAAGyF,WAAW,CAACxG,iBAAZwG,CAA8B/K,MAAzCsF,GACA;AACAyF,UAAAA,WAAW,CAACvG,sBAAZuG,CAAoCpG,QAApCoG,CAA6C/K,MAH/CyI;AAIF;;AAEA1I,QAAAA,IAAI,CAAC2E,IAAL3E,CAAU;AACRoD,UAAAA,MADQ;AAERqF,UAAAA,QAAQ,EAAElD,QAAQ,GAAGiE,MAAM,CAACC,qBAFpB;AAGRf,UAAAA;AAHQ,SAAV1I;AAKF;;AAEA,YAAMoC,SAAS,GAAG4I,WAAW,CAAClG,GAAZkG,CAAgBqK,UAAU,CAAC5P,cAA3BuF,CAAlB;;AACA,UAAI5I,SAAS,KAAKzB,SAAlB,EAA6B;AAC3B,cAAM,IAAIT,KAAJ,CACH,kDAAiDmV,UAAU,CAAC5P,cAAe,EADxE,CAAN;AAGF;;AAEAN,MAAAA,YAAY,CAACR,IAAbQ,CACE,IAAI2L,sBAAJ,CAA2B;AACzB1O,QAAAA,SADyB;AAEzB1C,QAAAA,IAAI,EAAEjB,QAAQ,CAAC4W,UAAU,CAAC3V,IAAZ,CAFW;AAGzBM,QAAAA;AAHyB,OAA3B,CADFmF;AAOF;;AAEA,WAAO,IAAIgQ,kBAAJ,CAAuB;AAC5BxJ,MAAAA,QAD4B;AAE5BxG,MAAAA,YAF4B;AAG5B8F,MAAAA;AAH4B,KAAvB,CAAP;AAKF;;AAEAqK,EAAAA,sBAAsB,GAAY;AAChC,WAAOvK,OAAO,CAACzC,OAARyC,CAAgB;AACrBY,MAAAA,QAAQ,EAAE,KAAKA,QADM;AAErBV,MAAAA,eAAe,EAAE,KAAKA,eAFD;AAGrB9F,MAAAA,YAAY,EAAE,KAAKA;AAHE,KAAhB4F,CAAP;AAKF;;AAEAwK,EAAAA,kBAAkB,CAChBrH,0BADgB,EAEL;AACX,WAAOJ,SAAS,CAACxF,OAAVwF,CAAkB;AACvBnC,MAAAA,QAAQ,EAAE,KAAKA,QADQ;AAEvBV,MAAAA,eAAe,EAAE,KAAKA,eAFC;AAGvB9F,MAAAA,YAAY,EAAE,KAAKA,YAHI;AAIvB+I,MAAAA;AAJuB,KAAlBJ,CAAP;AAMF;;AAnH8B;ACVhC;AACA;AACA;;;AACO,MAAM0H,oBAAN,CAA2B;AAIrB,MAAPnK,OAAO,GAAuB;AAChC,WAAO,KAAK/M,OAAL,CAAa+M,OAApB;AACF;;AAEAnM,EAAAA,WAAW,CAACZ,OAAD,EAA4B2S,UAA5B,EAA4D;AAAA,SAPvEA,UAOuE,GAP7D,KAAA,CAO6D;AAP7D,SACV3S,OADU,GACH,KAAA,CADG;;AAQR,QAAI2S,UAAU,KAAKtQ,SAAnB,EAA8B;AAC5BuI,MAAAA,MAAM,CACJ+H,UAAU,CAAChR,MAAXgR,KAAsB3S,OAAO,CAACkL,MAARlL,CAAemL,qBADjC,EAEJ,6EAFI,CAANP;AAIA,WAAK+H,UAAL,GAAkBA,UAAlB;AACD,KAND,MAMO;AACL,YAAMwE,iBAAiB,GAAG,EAA1B;;AACA,WAAK,IAAI9H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrP,OAAO,CAACkL,MAARlL,CAAemL,qBAAnC,EAA0DkE,CAAC,EAA3D,EAA+D;AAC7D8H,QAAAA,iBAAiB,CAAC9Q,IAAlB8Q,CAAuB,IAAI1X,UAAJ,CAAe+F,yBAAf,CAAvB2R;AACF;;AACA,WAAKxE,UAAL,GAAkBwE,iBAAlB;AACF;;AACA,SAAKnX,OAAL,GAAeA,OAAf;AACF;;AAEAiB,EAAAA,SAAS,GAAe;AACtB,UAAM+P,iBAAiB,GAAG,KAAKhR,OAAL,CAAaiB,SAAb,EAA1B;AAEA,UAAMmW,uBAAuB,GAAGpO,KAAK,EAArC;AACAqF,IAAAA,YAAqB,CAAC+I,uBAAD,EAA0B,KAAKzE,UAAL,CAAgBhR,MAA1C,CAArB0M;AAEA,UAAMgJ,iBAAiB,GAAG9P,YAAY,CAACI,MAAbJ,CAIvB,CACDA,YAAY,CAACC,IAAbD,CACE6P,uBAAuB,CAACzV,MAD1B4F,EAEE,yBAFFA,CADC,EAKDA,YAAY,CAACuH,GAAbvH,CACEyH,SAAgB,EADlBzH,EAEE,KAAKoL,UAAL,CAAgBhR,MAFlB4F,EAGE,YAHFA,CALC,EAUDA,YAAY,CAACC,IAAbD,CAAkByJ,iBAAiB,CAACrP,MAApC4F,EAA4C,mBAA5CA,CAVC,CAJuBA,CAA1B;AAiBA,UAAM+P,qBAAqB,GAAG,IAAI7X,UAAJ,CAAe,IAAf,CAA9B;AACA,UAAM8X,2BAA2B,GAAGF,iBAAiB,CAACrW,MAAlBqW,CAClC;AACED,MAAAA,uBAAuB,EAAE,IAAI3X,UAAJ,CAAe2X,uBAAf,CAD3B;AAEEzE,MAAAA,UAAU,EAAE,KAAKA,UAFnB;AAGE3B,MAAAA;AAHF,KADkCqG,EAMlCC,qBANkCD,CAApC;AASA,WAAOC,qBAAqB,CAACrX,KAAtBqX,CAA4B,CAA5BA,EAA+BC,2BAA/BD,CAAP;AACF;;AAEkB,SAAXjW,WAAW,CAACiW,qBAAD,EAA0D;AAC1E,QAAInI,SAAS,GAAG,CAAC,GAAGmI,qBAAJ,CAAhB;AAEA,UAAM3E,UAAU,GAAG,EAAnB;AACA,UAAM6E,gBAAgB,GAAGnJ,YAAqB,CAACc,SAAD,CAA9C;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmI,gBAApB,EAAsCnI,CAAC,EAAvC,EAA2C;AACzCsD,MAAAA,UAAU,CAACtM,IAAXsM,CACE,IAAIlT,UAAJ,CAAe0P,SAAS,CAAC2C,MAAV3C,CAAiB,CAAjBA,EAAoB3J,yBAApB2J,CAAf,CADFwD;AAGF;;AAEA,UAAM3S,OAAO,GAAGmS,gBAAgB,CAAC9Q,WAAjB8Q,CAA6B,IAAI1S,UAAJ,CAAe0P,SAAf,CAA7BgD,CAAhB;AACA,WAAO,IAAI+E,oBAAJ,CAAyBlX,OAAzB,EAAkC2S,UAAlC,CAAP;AACF;;AAEA5S,EAAAA,IAAI,CAACwT,OAAD,EAAyB;AAC3B,UAAMkE,WAAW,GAAG,KAAKzX,OAAL,CAAaiB,SAAb,EAApB;AACA,UAAMyW,aAAa,GAAG,KAAK1X,OAAL,CAAakG,iBAAb,CAA+BjG,KAA/B,CACpB,CADoB,EAEpB,KAAKD,OAAL,CAAakL,MAAb,CAAoBC,qBAFA,CAAtB;;AAIA,SAAK,MAAMwK,MAAX,IAAqBpC,OAArB,EAA8B;AAC5B,YAAMoE,WAAW,GAAGD,aAAa,CAACpL,SAAdoL,CAAwB5S,MAAM,IAChDA,MAAM,CAACjC,MAAPiC,CAAc6Q,MAAM,CAACrW,SAArBwF,CADkB4S,CAApB;AAGA9M,MAAAA,MAAM,CACJ+M,WAAW,IAAI,CADX,EAEH,mCAAkChC,MAAM,CAACrW,SAAPqW,CAAiB5S,QAAjB4S,EAA4B,EAF3D,CAAN/K;AAIA,WAAK+H,UAAL,CAAgBgF,WAAhB,IAA+B5X,IAAI,CAAC0X,WAAD,EAAc9B,MAAM,CAACnW,SAArB,CAAnC;AACF;AACF;;AAEAuW,EAAAA,YAAY,CAACzW,SAAD,EAAuBoG,SAAvB,EAA8C;AACxDkF,IAAAA,MAAM,CAAClF,SAAS,CAAChF,UAAVgF,KAAyB,EAA1B,EAA8B,iCAA9B,CAANkF;AACA,UAAM8M,aAAa,GAAG,KAAK1X,OAAL,CAAakG,iBAAb,CAA+BjG,KAA/B,CACpB,CADoB,EAEpB,KAAKD,OAAL,CAAakL,MAAb,CAAoBC,qBAFA,CAAtB;AAIA,UAAMwM,WAAW,GAAGD,aAAa,CAACpL,SAAdoL,CAAwB5S,MAAM,IAChDA,MAAM,CAACjC,MAAPiC,CAAcxF,SAAdwF,CADkB4S,CAApB;AAGA9M,IAAAA,MAAM,CACJ+M,WAAW,IAAI,CADX,EAEwBrY,4BAAAA,SAAS,CAACyD,QAAVzD,EAAqB,6CAF7C,CAANsL;AAIA,SAAK+H,UAAL,CAAgBgF,WAAhB,IAA+BjS,SAA/B;AACF;;AA5GgC;;MCdrBkS,mBAAmB,GAAG,IAAIrV,SAAJ,CACjC,6CADiC,C;MAItBsV,4BAA4B,GAAG,IAAItV,SAAJ,CAC1C,6CAD0C,C;MAI/BuV,0BAA0B,GAAG,IAAIvV,SAAJ,CACxC,6CADwC,C;MAI7BwV,gCAAgC,GAAG,IAAIxV,SAAJ,CAC9C,6CAD8C,C;MAInCyV,kBAAkB,GAAG,IAAIzV,SAAJ,CAChC,6CADgC,C;MAIrB0V,qBAAqB,GAAG,IAAI1V,SAAJ,CACnC,6CADmC,C;MAIxB2V,yBAAyB,GAAG,IAAI3V,SAAJ,CACvC,6CADuC,C;MAI5B4V,0BAA0B,GAAG,IAAI5V,SAAJ,CACxC,6CADwC,C;MAI7B6V,2BAA2B,GAAG,IAAI7V,SAAJ,CACzC,6CADyC,C;AC5B3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAe8V,yBAAf,CACLhD,UADK,EAELpG,WAFK,EAGLsE,OAHK,EAIL+E,OAJK,EAS0B;AAC/B,QAAMC,WAAW,GAAGD,OAAO,IAAI;AAC7BE,IAAAA,aAAa,EAAEF,OAAO,CAACE,aADM;AAE7BC,IAAAA,mBAAmB,EAAEH,OAAO,CAACG,mBAARH,IAA+BA,OAAO,CAACI,UAF/B;AAG7BC,IAAAA,UAAU,EAAEL,OAAO,CAACK,UAHS;AAI7BvF,IAAAA,cAAc,EAAEkF,OAAO,CAAClF;AAJK,GAA/B;AAOA,QAAM1N,SAAS,GAAG,MAAM2P,UAAU,CAACuD,eAAXvD,CACtBpG,WADsBoG,EAEtB9B,OAFsB8B,EAGtBkD,WAHsBlD,CAAxB;AAMA,MAAIwD,MAAJ;;AACA,MACE5J,WAAW,CAACtC,eAAZsC,IAA+B,IAA/BA,IACAA,WAAW,CAAC4D,oBAAZ5D,IAAoC,IAFtC,EAGE;AACA4J,IAAAA,MAAM,GAAG,CACP,MAAMxD,UAAU,CAACyD,kBAAXzD,CACJ;AACE0D,MAAAA,WAAW,EAAET,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAES,WADxB;AAEErT,MAAAA,SAAS,EAAEA,SAFb;AAGE2N,MAAAA,SAAS,EAAEpE,WAAW,CAACtC,eAHzB;AAIEkG,MAAAA,oBAAoB,EAAE5D,WAAW,CAAC4D;AAJpC,KADIwC,EAOJiD,OAAO,IAAIA,OAAO,CAACI,UAPfrD,CADC,EAUPlT,KAVF0W;AAWD,GAfD,MAeO,IACL5J,WAAW,CAAC8D,mBAAZ9D,IAAmC,IAAnCA,IACAA,WAAW,CAAC6D,SAAZ7D,IAAyB,IAFpB,EAGL;AACA,UAAM;AAACqE,MAAAA;AAAD,QAAqBrE,WAAW,CAAC6D,SAAvC;AACA,UAAMkG,kBAAkB,GAAG1F,gBAAgB,CAAC5R,IAAjB4R,CAAsB,CAAtBA,EAAyBxO,MAApD;AACA+T,IAAAA,MAAM,GAAG,CACP,MAAMxD,UAAU,CAACyD,kBAAXzD,CACJ;AACE0D,MAAAA,WAAW,EAAET,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAES,WADxB;AAEE3F,MAAAA,cAAc,EAAEnE,WAAW,CAAC8D,mBAF9B;AAGEiG,MAAAA,kBAHF;AAIEC,MAAAA,UAAU,EAAEhK,WAAW,CAAC6D,SAAZ7D,CAAsBzK,KAJpC;AAKEkB,MAAAA;AALF,KADI2P,EAQJiD,OAAO,IAAIA,OAAO,CAACI,UARfrD,CADC,EAWPlT,KAXF0W;AAYD,GAlBM,MAkBA;AACL,QAAIP,CAAAA,OAAO,SAAPA,IAAAA,OAAO,WAAPA,YAAAA,OAAO,CAAES,WAATT,KAAwB,IAA5B,EAAkC;AAChCzE,MAAAA,OAAO,CAACC,IAARD,CACE,4FACE,wFADF,GAEE,0EAHJA;AAKF;;AACAgF,IAAAA,MAAM,GAAG,CACP,MAAMxD,UAAU,CAACyD,kBAAXzD,CACJ3P,SADI2P,EAEJiD,OAAO,IAAIA,OAAO,CAACI,UAFfrD,CADC,EAKPlT,KALF0W;AAMF;;AAEA,MAAIA,MAAM,CAAClU,GAAX,EAAgB;AACd,UAAM,IAAI/C,KAAJ,CACH,eAAc8D,SAAU,YAAWiO,IAAI,CAACC,SAALD,CAAekF,MAAflF,CAAuB,GADvD,CAAN;AAGF;;AAEA,SAAOjO,SAAP;AACF,C,CCjGA;;;AACO,SAASwT,KAAT,CAAeC,EAAf,EAA0C;AAC/C,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACF;ACgBA;AACA;AACA;AACA;;;AACO,SAASI,UAAT,CACL3Q,IADK,EAEL5D,MAFK,EAGG;AACR,QAAMwU,WAAW,GACf5Q,IAAI,CAACO,MAALP,CAAYR,IAAZQ,IAAoB,CAApBA,GAAwBA,IAAI,CAACO,MAALP,CAAYR,IAApCQ,GAA2CoG,QAAe,CAACpG,IAAD,EAAO5D,MAAP,CAD5D;AAEA,QAAM5D,IAAI,GAAGf,MAAM,CAACiD,KAAPjD,CAAamZ,WAAbnZ,CAAb;AACA,QAAMoZ,YAAY,GAAG3Y,MAAM,CAACC,MAAPD,CAAc;AAACoG,IAAAA,WAAW,EAAE0B,IAAI,CAACnC;AAAnB,GAAd3F,EAAyCkE,MAAzClE,CAArB;AACA8H,EAAAA,IAAI,CAACO,MAALP,CAAY5H,MAAZ4H,CAAmB6Q,YAAnB7Q,EAAiCxH,IAAjCwH;AACA,SAAOxH,IAAP;AACF;AAEA;AACA;AACA;AACA;;;AACO,SAASsY,YAAT,CACL9Q,IADK,EAELpI,MAFK,EAGO;AACZ,MAAIY,IAAJ;;AACA,MAAI;AACFA,IAAAA,IAAI,GAAGwH,IAAI,CAACO,MAALP,CAAYzH,MAAZyH,CAAmBpI,MAAnBoI,CAAPxH;AACD,GAFD,CAEE,OAAOuD,GAAP,EAAY;AACZ,UAAM,IAAI/C,KAAJ,CAAU,0BAA0B+C,GAApC,CAAN;AACF;;AAEA,MAAIvD,IAAI,CAAC8F,WAAL9F,KAAqBwH,IAAI,CAACnC,KAA9B,EAAqC;AACnC,UAAM,IAAI7E,KAAJ,CACH,mDAAkDR,IAAI,CAAC8F,WAAY,OAAM0B,IAAI,CAACnC,KAAM,EADjF,CAAN;AAGF;;AAEA,SAAOrF,IAAP;AACF;ACvDA;AACA;AACA;AACA;AACA;;;AACO,MAAMuY,mBAAmB,GAAGpS,YAAY,CAACqS,IAAbrS,CAAkB,sBAAlBA,CAA5B;AAEP;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;AACA,MAAMsS,kBAAkB,GAAGtS,YAAY,CAACI,MAAbJ,CAUzB,CACAA,YAAY,CAACK,GAAbL,CAAiB,SAAjBA,CADA,EAEAA,YAAY,CAACK,GAAbL,CAAiB,OAAjBA,CAFA,EAGAyH,SAAgB,CAAC,kBAAD,CAHhB,EAIAA,SAAgB,CAAC,OAAD,CAJhB,EAKAzH,YAAY,CAACI,MAAbJ,CACE,CAACoS,mBAAD,CADFpS,EAEE,eAFFA,CALA,CAVyBA,CAA3B;AAqBauS,MAAAA,oBAAoB,GAAGD,kBAAkB,CAACzR,IAA1C0R;AAEb;AACA;AACA;;AASA;AACA;AACA;;AACO,MAAMC,YAAN,CAAmB;AAKxB;AACF;AACA;AACEnZ,EAAAA,WAAW,CAACiM,IAAD,EAAyB;AAAA,SAPpCmN,gBAOoC,GAPpB,KAAA,CAOoB;AAPpB,SAChBxV,KADgB,GACX,KAAA,CADW;AACX,SACLyV,aADK,GACQ,KAAA,CADR;AAOH,SAAKD,gBAAL,GAAwBnN,IAAI,CAACmN,gBAA7B;AACA,SAAKxV,KAAL,GAAaqI,IAAI,CAACrI,KAAlB;AACA,SAAKyV,aAAL,GAAqBpN,IAAI,CAACoN,aAA1B;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACwB,SAAfC,eAAe,CACpB1Z,MADoB,EAEN;AACd,UAAM2Z,YAAY,GAAGN,kBAAkB,CAAC1Y,MAAnB0Y,CAA0B1Z,QAAQ,CAACK,MAAD,CAAlCqZ,EAA4C,CAA5CA,CAArB;AACA,WAAO,IAAIE,YAAJ,CAAiB;AACtBC,MAAAA,gBAAgB,EAAE,IAAIzX,SAAJ,CAAc4X,YAAY,CAACH,gBAA3B,CADI;AAEtBxV,MAAAA,KAAK,EAAE,IAAIjC,SAAJ,CAAc4X,YAAY,CAAC3V,KAA3B,EAAkCd,QAAlC,EAFe;AAGtBuW,MAAAA,aAAa,EAAEE,YAAY,CAACF;AAHN,KAAjB,CAAP;AAKF;;AA7BwB;;AC1C1B,MAAMG,YAAY,GAAOjR,MAAiB,IAAsB;AAC9D,QAAMhI,MAAM,GAAGgI,MAAM,CAAChI,MAAPgI,CAAcpB,IAAdoB,CAAmBA,MAAnBA,CAAf;AACA,QAAMnI,MAAM,GAAGmI,MAAM,CAACnI,MAAPmI,CAAcpB,IAAdoB,CAAmBA,MAAnBA,CAAf;AACA,SAAO;AAAChI,IAAAA,MAAD;AAASH,IAAAA;AAAT,GAAP;AACD,CAJD;;AAMA,MAAMqZ,MAAM,GACT1Y,MAAc,IACd2F,QAAiB,IAAqB;AACrC,QAAM6B,MAAM,GAAG3B,IAAI,CAAC7F,MAAD,EAAS2F,QAAT,CAAnB;AACA,QAAM;AAACtG,IAAAA,MAAD;AAASG,IAAAA;AAAT,MAAmBiZ,YAAY,CAACjR,MAAD,CAArC;AAEA,QAAMmR,YAAY,GAAGnR,MAArB;;AAEAmR,EAAAA,YAAY,CAACnZ,MAAbmZ,GAAsB,CAAC9Z,MAAD,EAAiBqH,MAAjB,KAAoC;AACxD,UAAM0S,GAAG,GAAGpZ,MAAM,CAACX,MAAD,EAASqH,MAAT,CAAlB;AACA,WAAO2S,UAAU,CAACna,MAAM,CAACE,IAAPF,CAAYka,GAAZla,CAAD,CAAjB;AACD,GAHDia;;AAKAA,EAAAA,YAAY,CAACtZ,MAAbsZ,GAAsB,CAACD,MAAD,EAAiB7Z,MAAjB,EAAiCqH,MAAjC,KAAoD;AACxE,UAAM0S,GAAG,GAAGE,UAAU,CAACJ,MAAD,EAAS1Y,MAAT,CAAtB;AACA,WAAOX,MAAM,CAACuZ,GAAD,EAAM/Z,MAAN,EAAcqH,MAAd,CAAb;AACD,GAHDyS;;AAKA,SAAOA,YAAP;AACD,CAnBH;;AAqBO,MAAMI,GAAG,GAAGL,MAAM,CAAC,CAAD,CAAlB;ACpBP;AACA;AACA;;AA0NA;AACA;AACA;;AACO,MAAMM,iBAAN,CAAwB;AAC7B;AACF;AACA;AACE/Z,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;;AAC8B,SAArBga,qBAAqB,CAC1B1T,WAD0B,EAEH;AACvB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AAEA,UAAMgX,qBAAqB,GAAGvT,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;AACA,UAAMwT,SAAS,GAAGD,qBAAqB,CAAC3Z,MAAtB2Z,CAA6B5T,WAAW,CAAC9F,IAAzC0Z,CAAlB;AAEA,QAAIlS,IAAJ;;AACA,SAAK,MAAM,CAACoS,MAAD,EAAS7R,MAAT,CAAX,IAA+BrI,MAAM,CAAC6J,OAAP7J,CAAema,0BAAfna,CAA/B,EAA2E;AACzE,UAAIqI,MAAM,CAAC1C,KAAP0C,IAAgB4R,SAApB,EAA+B;AAC7BnS,QAAAA,IAAI,GAAGoS,MAAPpS;AACA;AACF;AACF;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIhH,KAAJ,CAAU,qDAAV,CAAN;AACF;;AAEA,WAAOgH,IAAP;AACF;AAEA;AACF;AACA;;;AAC4B,SAAnBsS,mBAAmB,CACxBhU,WADwB,EAEH;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC0Z,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBvX,MAAAA;AAAlB,QAA+B4V,YAAU,CAC7CuB,0BAA0B,CAACK,MADkB,EAE7CpU,WAAW,CAAC9F,IAFiC,CAA/C;AAKA,WAAO;AACLma,MAAAA,UAAU,EAAErU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAEL0W,MAAAA,gBAAgB,EAAEtU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFjC;AAGLsW,MAAAA,QAHK;AAILC,MAAAA,KAJK;AAKLvX,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AALN,KAAP;AAOF;AAEA;AACF;AACA;;;AACuB,SAAd2X,cAAc,CACnBvU,WADmB,EAES;AAC5B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC0Z,MAAAA;AAAD,QAAa1B,YAAU,CAC3BuB,0BAA0B,CAACS,QADA,EAE3BxU,WAAW,CAAC9F,IAFe,CAA7B;AAKA,WAAO;AACLma,MAAAA,UAAU,EAAErU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAEL6W,MAAAA,QAAQ,EAAEzU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFzB;AAGLsW,MAAAA;AAHK,KAAP;AAKF;AAEA;AACF;AACA;;;AAC+B,SAAtBQ,sBAAsB,CAC3B1U,WAD2B,EAES;AACpC,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC0Z,MAAAA,QAAD;AAAWvX,MAAAA,IAAX;AAAiBC,MAAAA;AAAjB,QAA8B4V,YAAU,CAC5CuB,0BAA0B,CAACY,gBADiB,EAE5C3U,WAAW,CAAC9F,IAFgC,CAA9C;AAKA,WAAO;AACLma,MAAAA,UAAU,EAAErU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAELgX,MAAAA,UAAU,EAAE5U,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF3B;AAGL6W,MAAAA,QAAQ,EAAEzU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAHzB;AAILsW,MAAAA,QAJK;AAKLvX,MAAAA,IALK;AAMLC,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AANN,KAAP;AAQF;AAEA;AACF;AACA;;;AACuB,SAAdiY,cAAc,CAAC7U,WAAD,EAAsD;AACzE,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC2Z,MAAAA;AAAD,QAAU3B,YAAU,CACxBuB,0BAA0B,CAACe,QADH,EAExB9U,WAAW,CAAC9F,IAFY,CAA1B;AAKA,WAAO;AACL6a,MAAAA,aAAa,EAAE/U,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD9B;AAELuW,MAAAA;AAFK,KAAP;AAIF;AAEA;AACF;AACA;;;AAC+B,SAAtBa,sBAAsB,CAC3BhV,WAD2B,EAEH;AACxB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAACya,MAAAA,IAAD;AAAOtY,MAAAA,IAAP;AAAawX,MAAAA,KAAb;AAAoBvX,MAAAA;AAApB,QAAiC4V,YAAU,CAC/CuB,0BAA0B,CAACmB,gBADoB,EAE/ClV,WAAW,CAAC9F,IAFmC,CAAjD;AAKA,WAAO;AACL6a,MAAAA,aAAa,EAAE/U,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD9B;AAELgX,MAAAA,UAAU,EAAE,IAAIvZ,SAAJ,CAAc4Z,IAAd,CAFP;AAGLtY,MAAAA,IAHK;AAILwX,MAAAA,KAJK;AAKLvX,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AALN,KAAP;AAOF;AAEA;AACF;AACA;;;AACqB,SAAZuY,YAAY,CAACnV,WAAD,EAAoD;AACrE,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAACoC,MAAAA;AAAD,QAAc4V,YAAU,CAC5BuB,0BAA0B,CAACqB,MADC,EAE5BpV,WAAW,CAAC9F,IAFgB,CAA9B;AAKA,WAAO;AACL6a,MAAAA,aAAa,EAAE/U,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD9B;AAELhB,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AAFN,KAAP;AAIF;AAEA;AACF;AACA;;;AAC6B,SAApByY,oBAAoB,CACzBrV,WADyB,EAEH;AACtB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAACya,MAAAA,IAAD;AAAOtY,MAAAA,IAAP;AAAaC,MAAAA;AAAb,QAA0B4V,YAAU,CACxCuB,0BAA0B,CAACuB,cADa,EAExCtV,WAAW,CAAC9F,IAF4B,CAA1C;AAKA,WAAO;AACL6a,MAAAA,aAAa,EAAE/U,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD9B;AAELgX,MAAAA,UAAU,EAAE,IAAIvZ,SAAJ,CAAc4Z,IAAd,CAFP;AAGLtY,MAAAA,IAHK;AAILC,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AAJN,KAAP;AAMF;AAEA;AACF;AACA;;;AAC6B,SAApB2Y,oBAAoB,CACzBvV,WADyB,EAEI;AAC7B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAACya,MAAAA,IAAD;AAAOtY,MAAAA,IAAP;AAAauX,MAAAA,QAAb;AAAuBC,MAAAA,KAAvB;AAA8BvX,MAAAA;AAA9B,QAA2C4V,YAAU,CACzDuB,0BAA0B,CAACyB,cAD8B,EAEzDxV,WAAW,CAAC9F,IAF6C,CAA3D;AAKA,WAAO;AACLma,MAAAA,UAAU,EAAErU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAEL0W,MAAAA,gBAAgB,EAAEtU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFjC;AAGLgX,MAAAA,UAAU,EAAE,IAAIvZ,SAAJ,CAAc4Z,IAAd,CAHP;AAILtY,MAAAA,IAJK;AAKLuX,MAAAA,QALK;AAMLC,MAAAA,KANK;AAOLvX,MAAAA,SAAS,EAAE,IAAIvB,SAAJ,CAAcuB,SAAd;AAPN,KAAP;AASF;AAEA;AACF;AACA;;;AAC8B,SAArB6Y,qBAAqB,CAC1BzV,WAD0B,EAEH;AACvB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC2G,MAAAA;AAAD,QAAeqR,YAAU,CAC7BuB,0BAA0B,CAAC2B,sBADE,EAE7B1V,WAAW,CAAC9F,IAFiB,CAA/B;AAKA,WAAO;AACLyb,MAAAA,WAAW,EAAE3V,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELkV,MAAAA,gBAAgB,EAAE,IAAIzX,SAAJ,CAAc8F,UAAd;AAFb,KAAP;AAIF;AAEA;AACF;AACA;;;AAC2B,SAAlByU,kBAAkB,CACvB5V,WADuB,EAEH;AACpB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEAgY,IAAAA,YAAU,CACRuB,0BAA0B,CAAC8B,mBADnB,EAER7V,WAAW,CAAC9F,IAFJ,CAAVsY;AAKA,WAAO;AACLmD,MAAAA,WAAW,EAAE3V,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAFjC,KAAP;AAIF;AAEA;AACF;AACA;;;AAC4B,SAAnBkY,mBAAmB,CACxB9V,WADwB,EAEH;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC0Z,MAAAA;AAAD,QAAa1B,YAAU,CAC3BuB,0BAA0B,CAACgC,oBADA,EAE3B/V,WAAW,CAAC9F,IAFe,CAA7B;AAKA,WAAO;AACLyb,MAAAA,WAAW,EAAE3V,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAEL6W,MAAAA,QAAQ,EAAEzU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFzB;AAGLkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAHjC;AAILsW,MAAAA;AAJK,KAAP;AAMF;AAEA;AACF;AACA;;;AAC6B,SAApB8B,oBAAoB,CACzBhW,WADyB,EAEH;AACtB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC2G,MAAAA;AAAD,QAAeqR,YAAU,CAC7BuB,0BAA0B,CAACkC,qBADE,EAE7BjW,WAAW,CAAC9F,IAFiB,CAA/B;AAKA,WAAO;AACLyb,MAAAA,WAAW,EAAE3V,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFjC;AAGLsY,MAAAA,mBAAmB,EAAE,IAAI7a,SAAJ,CAAc8F,UAAd;AAHhB,KAAP;AAKF;AAEA;AACF;AACA;;;AACuB,SAAdwS,cAAc,CAAC/W,SAAD,EAAuB;AAC1C,QAAI,CAACA,SAAS,CAACjB,MAAViB,CAAiBuZ,aAAa,CAACvZ,SAA/BA,CAAL,EAAgD;AAC9C,YAAM,IAAIlC,KAAJ,CAAU,qDAAV,CAAN;AACF;AACF;AAEA;AACF;AACA;;;AACuB,SAAduZ,cAAc,CAACzZ,IAAD,EAAmB4b,cAAnB,EAA2C;AAC9D,QAAI5b,IAAI,CAACC,MAALD,GAAc4b,cAAlB,EAAkC;AAChC,YAAM,IAAI1b,KAAJ,CAC0BF,8BAAAA,IAAI,CAACC,MAAO,4BAA2B2b,cAAe,EADhF,CAAN;AAGF;AACF;;AAnT6B;AAsT/B;AACA;AACA;;AAuEA;AACA;AACA;AACA;;;MACarC,0BAA0B,GAAGna,MAAM,CAACyc,MAAPzc,CAIvC;AACDwa,EAAAA,MAAM,EAAE;AACN7U,IAAAA,KAAK,EAAE,CADD;AAEN0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA0D,CAChEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADgE,EAEhEA,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAFgE,EAGhEA,YAAY,CAACgB,IAAbhB,CAAkB,OAAlBA,CAHgE,EAIhEyH,SAAgB,CAAC,WAAD,CAJgD,CAA1DzH;AAFF,GADP;AAUD+U,EAAAA,MAAM,EAAE;AACN7V,IAAAA,KAAK,EAAE,CADD;AAEN0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA0D,CAChEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADgE,EAEhEyH,SAAgB,CAAC,WAAD,CAFgD,CAA1DzH;AAFF,GAVP;AAiBDmU,EAAAA,QAAQ,EAAE;AACRjV,IAAAA,KAAK,EAAE,CADC;AAER0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA4D,CAClEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADkE,EAElEmT,GAAG,CAAC,UAAD,CAF+D,CAA5DnT;AAFA,GAjBT;AAwBDmV,EAAAA,cAAc,EAAE;AACdjW,IAAAA,KAAK,EAAE,CADO;AAEd0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAkE,CACxEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADwE,EAExEyH,SAAgB,CAAC,MAAD,CAFwD,EAGxEA,UAAiB,CAAC,MAAD,CAHuD,EAIxEzH,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAJwE,EAKxEA,YAAY,CAACgB,IAAbhB,CAAkB,OAAlBA,CALwE,EAMxEyH,SAAgB,CAAC,WAAD,CANwD,CAAlEzH;AAFM,GAxBf;AAmCDwV,EAAAA,mBAAmB,EAAE;AACnBtW,IAAAA,KAAK,EAAE,CADY;AAEnB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAFMA;AAFW,GAnCpB;AAyCD0V,EAAAA,oBAAoB,EAAE;AACpBxW,IAAAA,KAAK,EAAE,CADa;AAEpB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,EAAkCA,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAAlC,CAFMA;AAFY,GAzCrB;AA+CDqV,EAAAA,sBAAsB,EAAE;AACtBnW,IAAAA,KAAK,EAAE,CADe;AAEtB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,EAAkCyH,SAAgB,CAAC,YAAD,CAAlD,CAFMzH;AAFc,GA/CvB;AAqDD4V,EAAAA,qBAAqB,EAAE;AACrB1W,IAAAA,KAAK,EAAE,CADc;AAErB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,EAAkCyH,SAAgB,CAAC,YAAD,CAAlD,CAFMzH;AAFa,GArDtB;AA2DDyU,EAAAA,QAAQ,EAAE;AACRvV,IAAAA,KAAK,EAAE,CADC;AAER0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA4D,CAClEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADkE,EAElEA,YAAY,CAACgB,IAAbhB,CAAkB,OAAlBA,CAFkE,CAA5DA;AAFA,GA3DT;AAkED6U,EAAAA,gBAAgB,EAAE;AAChB3V,IAAAA,KAAK,EAAE,CADS;AAEhB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CACN,CACEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADF,EAEEyH,SAAgB,CAAC,MAAD,CAFlB,EAGEA,UAAiB,CAAC,MAAD,CAHnB,EAIEzH,YAAY,CAACgB,IAAbhB,CAAkB,OAAlBA,CAJF,EAKEyH,SAAgB,CAAC,WAAD,CALlB,CADMzH;AAFQ,GAlEjB;AA8EDiV,EAAAA,cAAc,EAAE;AACd/V,IAAAA,KAAK,EAAE,EADO;AAEd0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAkE,CACxEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADwE,EAExEyH,SAAgB,CAAC,MAAD,CAFwD,EAGxEA,UAAiB,CAAC,MAAD,CAHuD,EAIxEA,SAAgB,CAAC,WAAD,CAJwD,CAAlEzH;AAFM,GA9Ef;AAuFDsU,EAAAA,gBAAgB,EAAE;AAChBpV,IAAAA,KAAK,EAAE,EADS;AAEhB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CACN,CACEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADF,EAEEmT,GAAG,CAAC,UAAD,CAFL,EAGE1L,UAAiB,CAAC,MAAD,CAHnB,EAIEA,SAAgB,CAAC,WAAD,CAJlB,CADMzH;AAFQ,GAvFjB;AAkGDiW,EAAAA,mBAAmB,EAAE;AACnB/W,IAAAA,KAAK,EAAE,EADY;AAEnB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAFMA;AAFW;AAlGpB,CAJuCzG,C;AA8G1C;AACA;AACA;;AACO,MAAMuc,aAAN,CAAoB;AACzB;AACF;AACA;AACEzc,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAKE;AACF;AACA;;;AACsB,SAAb6c,aAAa,CAACC,MAAD,EAAsD;AACxE,UAAM9U,IAAI,GAAGqS,0BAA0B,CAACK,MAAxC;AACA,UAAMla,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BwS,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QADW;AAE5BC,MAAAA,KAAK,EAAEqC,MAAM,CAACrC,KAFc;AAG5BvX,MAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AAHS,KAAP,CAAvB;AAMA,WAAO,IAAIlL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACnC,UAAhB;AAA4BpR,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAClC,gBAAhB;AAAkCrR,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE;AAA9D,OAFI,CAD0B;AAKhCtG,MAAAA,SAAS,EAAE,KAAKA,SALgB;AAMhC1C,MAAAA;AANgC,KAA3B,CAAP;AAQF;AAEA;AACF;AACA;;;AACiB,SAARuc,QAAQ,CACbD,MADa,EAEW;AACxB,QAAItc,IAAJ;AACA,QAAIM,IAAJ;;AACA,QAAI,gBAAgBgc,MAApB,EAA4B;AAC1B,YAAM9U,IAAI,GAAGqS,0BAA0B,CAACY,gBAAxC;AACAza,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AACtBwS,QAAAA,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAR,CADM;AAEtBvX,QAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAFS;AAGtBC,QAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AAHG,OAAP,CAAjBtc;AAKAM,MAAAA,IAAI,GAAG,CACL;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACnC,UAAhB;AAA4BpR,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OADK,EAEL;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC5B,UAAhB;AAA4B3R,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAFK,EAGL;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC/B,QAAhB;AAA0BxR,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAHK,CAAP1I;AAKD,KAZD,MAYO;AACL,YAAMkH,IAAI,GAAGqS,0BAA0B,CAACS,QAAxC;AACAta,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAACwS,QAAAA,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAR;AAAjB,OAAP,CAAjBha;AACAM,MAAAA,IAAI,GAAG,CACL;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACnC,UAAhB;AAA4BpR,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OADK,EAEL;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC/B,QAAhB;AAA0BxR,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAFK,CAAP1I;AAIF;;AAEA,WAAO,IAAI8Q,sBAAJ,CAA2B;AAChC9Q,MAAAA,IADgC;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;AAEA;AACF;AACA;;;AACe,SAANL,MAAM,CACX2c,MADW,EAEa;AACxB,QAAItc,IAAJ;AACA,QAAIM,IAAJ;;AACA,QAAI,gBAAgBgc,MAApB,EAA4B;AAC1B,YAAM9U,IAAI,GAAGqS,0BAA0B,CAACuB,cAAxC;AACApb,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AACtBuT,QAAAA,IAAI,EAAEhc,QAAQ,CAACud,MAAM,CAAC5B,UAAP4B,CAAkBvd,QAAlBud,EAAD,CADQ;AAEtB7Z,QAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAFS;AAGtBC,QAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AAHG,OAAP,CAAjBtc;AAKAM,MAAAA,IAAI,GAAG,CACL;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACzB,aAAhB;AAA+B9R,QAAAA,QAAQ,EAAE,KAAzC;AAAgDC,QAAAA,UAAU,EAAE;AAA5D,OADK,EAEL;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC5B,UAAhB;AAA4B3R,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAFK,CAAP1I;AAID,KAXD,MAWO;AACL,YAAMkH,IAAI,GAAGqS,0BAA0B,CAACqB,MAAxC;AACAlb,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AACtB9E,QAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AADG,OAAP,CAAjBtc;AAGAM,MAAAA,IAAI,GAAG,CAAC;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACzB,aAAhB;AAA+B9R,QAAAA,QAAQ,EAAE,IAAzC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAAD,CAAP1I;AACF;;AAEA,WAAO,IAAI8Q,sBAAJ,CAA2B;AAChC9Q,MAAAA,IADgC;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;AAEA;AACF;AACA;AACA;;;AAC8B,SAArByc,qBAAqB,CAC1BH,MAD0B,EAEF;AACxB,UAAM9U,IAAI,GAAGqS,0BAA0B,CAACyB,cAAxC;AACA,UAAMtb,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BuT,MAAAA,IAAI,EAAEhc,QAAQ,CAACud,MAAM,CAAC5B,UAAP4B,CAAkBvd,QAAlBud,EAAD,CADc;AAE5B7Z,MAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAFe;AAG5BuX,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QAHW;AAI5BC,MAAAA,KAAK,EAAEqC,MAAM,CAACrC,KAJc;AAK5BvX,MAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AALS,KAAP,CAAvB;AAOA,QAAIhc,IAAI,GAAG,CACT;AAACoD,MAAAA,MAAM,EAAE4Y,MAAM,CAACnC,UAAhB;AAA4BpR,MAAAA,QAAQ,EAAE,IAAtC;AAA4CC,MAAAA,UAAU,EAAE;AAAxD,KADS,EAET;AAACtF,MAAAA,MAAM,EAAE4Y,MAAM,CAAClC,gBAAhB;AAAkCrR,MAAAA,QAAQ,EAAE,KAA5C;AAAmDC,MAAAA,UAAU,EAAE;AAA/D,KAFS,CAAX;;AAIA,QAAIsT,MAAM,CAAC5B,UAAP4B,IAAqBA,MAAM,CAACnC,UAAhC,EAA4C;AAC1C7Z,MAAAA,IAAI,CAAC2E,IAAL3E,CAAU;AACRoD,QAAAA,MAAM,EAAE4Y,MAAM,CAAC5B,UADP;AAER3R,QAAAA,QAAQ,EAAE,IAFF;AAGRC,QAAAA,UAAU,EAAE;AAHJ,OAAV1I;AAKF;;AAEA,WAAO,IAAI8Q,sBAAJ,CAA2B;AAChC9Q,MAAAA,IADgC;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;AAEA;AACF;AACA;;;AAC2B,SAAlB0c,kBAAkB,CACvBJ,MADuB,EAEV;AACb,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;;AACA,QAAI,gBAAgBgL,MAAhB,IAA0B,UAAUA,MAAxC,EAAgD;AAC9CzO,MAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACQ,qBAAdR,CAAoC;AAClC9B,QAAAA,UAAU,EAAEmC,MAAM,CAACnC,UADe;AAElCC,QAAAA,gBAAgB,EAAEkC,MAAM,CAACb,WAFS;AAGlCf,QAAAA,UAAU,EAAE4B,MAAM,CAAC5B,UAHe;AAIlCjY,QAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAJqB;AAKlCuX,QAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QALiB;AAMlCC,QAAAA,KAAK,EAAEvB,oBAN2B;AAOlChW,QAAAA,SAAS,EAAE,KAAKA;AAPkB,OAApCuZ,CADFpO;AAWD,KAZD,MAYO;AACLA,MAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACI,aAAdJ,CAA4B;AAC1B9B,QAAAA,UAAU,EAAEmC,MAAM,CAACnC,UADO;AAE1BC,QAAAA,gBAAgB,EAAEkC,MAAM,CAACb,WAFC;AAG1BzB,QAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;AAI1BC,QAAAA,KAAK,EAAEvB,oBAJmB;AAK1BhW,QAAAA,SAAS,EAAE,KAAKA;AALU,OAA5BuZ,CADFpO;AASF;;AAEA,UAAM8O,UAAU,GAAG;AACjBlB,MAAAA,WAAW,EAAEa,MAAM,CAACb,WADH;AAEjB7C,MAAAA,gBAAgB,EAAE0D,MAAM,CAAC1D;AAFR,KAAnB;AAKA/K,IAAAA,WAAW,CAACuE,GAAZvE,CAAgB,KAAK+O,eAAL,CAAqBD,UAArB,CAAhB9O;AACA,WAAOA,WAAP;AACF;AAEA;AACF;AACA;;;AACwB,SAAf+O,eAAe,CACpBN,MADoB,EAEI;AACxB,UAAM9U,IAAI,GAAGqS,0BAA0B,CAAC2B,sBAAxC;AACA,UAAMxb,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BP,MAAAA,UAAU,EAAElI,QAAQ,CAACud,MAAM,CAAC1D,gBAAP0D,CAAwBvd,QAAxBud,EAAD;AADQ,KAAP,CAAvB;AAGA,UAAMO,eAAe,GAAG;AACtBvc,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACb,WAAhB;AAA6B1S,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OADI,EAEJ;AACEtF,QAAAA,MAAM,EAAEiT,gCADV;AAEE5N,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAFI,EAOJ;AAACtF,QAAAA,MAAM,EAAEkT,kBAAT;AAA6B7N,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OAPI,CADgB;AAUtBtG,MAAAA,SAAS,EAAE,KAAKA,SAVM;AAWtB1C,MAAAA;AAXsB,KAAxB;AAaA,WAAO,IAAIoR,sBAAJ,CAA2ByL,eAA3B,CAAP;AACF;AAEA;AACF;AACA;;;AACqB,SAAZC,YAAY,CAACR,MAAD,EAAqD;AACtE,UAAM9U,IAAI,GAAGqS,0BAA0B,CAAC8B,mBAAxC;AACA,UAAM3b,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AACA,UAAMqV,eAAe,GAAG;AACtBvc,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACb,WAAhB;AAA6B1S,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OADI,EAEJ;AACEtF,QAAAA,MAAM,EAAEiT,gCADV;AAEE5N,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAFI,EAOJ;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC1D,gBAAhB;AAAkC7P,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE;AAA9D,OAPI,CADgB;AAUtBtG,MAAAA,SAAS,EAAE,KAAKA,SAVM;AAWtB1C,MAAAA;AAXsB,KAAxB;AAaA,WAAO,IAAIoR,sBAAJ,CAA2ByL,eAA3B,CAAP;AACF;AAEA;AACF;AACA;;;AACsB,SAAbE,aAAa,CAACT,MAAD,EAAsD;AACxE,UAAM9U,IAAI,GAAGqS,0BAA0B,CAACgC,oBAAxC;AACA,UAAM7b,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAACwS,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC;AAAlB,KAAP,CAAvB;AAEA,WAAO,IAAI5I,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACb,WAAhB;AAA6B1S,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC/B,QAAhB;AAA0BxR,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAFI,EAGJ;AACEtF,QAAAA,MAAM,EAAEiT,gCADV;AAEE5N,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAHI,EAQJ;AACEtF,QAAAA,MAAM,EAAEkT,kBADV;AAEE7N,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OARI,EAaJ;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC1D,gBAAhB;AAAkC7P,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE;AAA9D,OAbI,CAD0B;AAgBhCtG,MAAAA,SAAS,EAAE,KAAKA,SAhBgB;AAiBhC1C,MAAAA;AAjBgC,KAA3B,CAAP;AAmBF;AAEA;AACF;AACA;AACA;;;AACuB,SAAdgd,cAAc,CAACV,MAAD,EAAuD;AAC1E,UAAM9U,IAAI,GAAGqS,0BAA0B,CAACkC,qBAAxC;AACA,UAAM/b,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BP,MAAAA,UAAU,EAAElI,QAAQ,CAACud,MAAM,CAACN,mBAAPM,CAA2Bvd,QAA3Bud,EAAD;AADQ,KAAP,CAAvB;AAIA,WAAO,IAAIlL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACb,WAAhB;AAA6B1S,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC1D,gBAAhB;AAAkC7P,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE;AAA9D,OAFI,CAD0B;AAKhCtG,MAAAA,SAAS,EAAE,KAAKA,SALgB;AAMhC1C,MAAAA;AANgC,KAA3B,CAAP;AAQF;AAEA;AACF;AACA;;;AACiB,SAARid,QAAQ,CACbX,MADa,EAEW;AACxB,QAAItc,IAAJ;AACA,QAAIM,IAAJ;;AACA,QAAI,gBAAgBgc,MAApB,EAA4B;AAC1B,YAAM9U,IAAI,GAAGqS,0BAA0B,CAACmB,gBAAxC;AACAhb,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AACtBuT,QAAAA,IAAI,EAAEhc,QAAQ,CAACud,MAAM,CAAC5B,UAAP4B,CAAkBvd,QAAlBud,EAAD,CADQ;AAEtB7Z,QAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAFS;AAGtBwX,QAAAA,KAAK,EAAEqC,MAAM,CAACrC,KAHQ;AAItBvX,QAAAA,SAAS,EAAE3D,QAAQ,CAACud,MAAM,CAAC5Z,SAAP4Z,CAAiBvd,QAAjBud,EAAD;AAJG,OAAP,CAAjBtc;AAMAM,MAAAA,IAAI,GAAG,CACL;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACzB,aAAhB;AAA+B9R,QAAAA,QAAQ,EAAE,KAAzC;AAAgDC,QAAAA,UAAU,EAAE;AAA5D,OADK,EAEL;AAACtF,QAAAA,MAAM,EAAE4Y,MAAM,CAAC5B,UAAhB;AAA4B3R,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAFK,CAAP1I;AAID,KAZD,MAYO;AACL,YAAMkH,IAAI,GAAGqS,0BAA0B,CAACe,QAAxC;AACA5a,MAAAA,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AACtByS,QAAAA,KAAK,EAAEqC,MAAM,CAACrC;AADQ,OAAP,CAAjBja;AAGAM,MAAAA,IAAI,GAAG,CAAC;AAACoD,QAAAA,MAAM,EAAE4Y,MAAM,CAACzB,aAAhB;AAA+B9R,QAAAA,QAAQ,EAAE,IAAzC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAAD,CAAP1I;AACF;;AAEA,WAAO,IAAI8Q,sBAAJ,CAA2B;AAChC9Q,MAAAA,IADgC;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;;AAnTyB;;AAAdic,aAAa,CASjBvZ,SATIuZ,GASmB,IAAI9a,SAAJ,CAC5B,kCAD4B,CATnB8a,C,CCttBb;AACA;AACA;AACA;AACA;;AACA,MAAMiB,UAAU,GAAGhZ,gBAAgB,GAAG,GAAtC;AAEA;AACA;AACA;;AACO,MAAMiZ,MAAN,CAAa;AAClB;AACF;AACA;AACE3d,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;;;AAC4B,SAAnB6d,mBAAmB,CAAChQ,UAAD,EAA6B;AACrD,WACE,MAAI;AACHiQ,IAAAA,IAAI,CAACC,IAALD,CAAUjQ,UAAU,GAAG8P,MAAM,CAACC,SAA9BE,IACC,CADDA,GACK;AACJ,KAHF,CADF,CAIM;AAJN;AAMF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,eAAJE,IAAI,CACfvJ,UADe,EAEfvL,KAFe,EAGf+U,OAHe,EAIf/a,SAJe,EAKf1C,IALe,EAMG;AAClB;AACE,YAAM0d,aAAa,GAAG,MAAMzJ,UAAU,CAAC0J,iCAAX1J,CAC1BjU,IAAI,CAACO,MADqB0T,CAA5B,CADF,CAKE;;AACA,YAAM2J,WAAW,GAAG,MAAM3J,UAAU,CAAC4J,cAAX5J,CACxBwJ,OAAO,CAACvf,SADgB+V,EAExB,WAFwBA,CAA1B;AAKA,UAAIpG,WAA+B,GAAG,IAAtC;;AACA,UAAI+P,WAAW,KAAK,IAApB,EAA0B;AACxB,YAAIA,WAAW,CAACE,UAAhB,EAA4B;AAC1BrL,UAAAA,OAAO,CAACsL,KAARtL,CAAc,oDAAdA;AACA,iBAAO,KAAP;AACF;;AAEA,YAAImL,WAAW,CAAC5d,IAAZ4d,CAAiBrd,MAAjBqd,KAA4B5d,IAAI,CAACO,MAArC,EAA6C;AAC3CsN,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIyD,WAAJ,EAA7BzD;AACAA,UAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACgB,QAAdhB,CAAuB;AACrBpB,YAAAA,aAAa,EAAE4C,OAAO,CAACvf,SADF;AAErB+b,YAAAA,KAAK,EAAEja,IAAI,CAACO;AAFS,WAAvB0b,CADFpO;AAMF;;AAEA,YAAI,CAAC+P,WAAW,CAACI,KAAZJ,CAAkBnc,MAAlBmc,CAAyBlb,SAAzBkb,CAAL,EAA0C;AACxC/P,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIyD,WAAJ,EAA7BzD;AACAA,UAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACtc,MAAdsc,CAAqB;AACnBpB,YAAAA,aAAa,EAAE4C,OAAO,CAACvf,SADJ;AAEnBwE,YAAAA;AAFmB,WAArBuZ,CADFpO;AAMF;;AAEA,YAAI+P,WAAW,CAAC5D,QAAZ4D,GAAuBF,aAA3B,EAA0C;AACxC7P,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIyD,WAAJ,EAA7BzD;AACAA,UAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACM,QAAdN,CAAuB;AACrB9B,YAAAA,UAAU,EAAEzR,KAAK,CAACxK,SADG;AAErBqc,YAAAA,QAAQ,EAAEkD,OAAO,CAACvf,SAFG;AAGrB8b,YAAAA,QAAQ,EAAE0D,aAAa,GAAGE,WAAW,CAAC5D;AAHjB,WAAvBiC,CADFpO;AAOF;AACD,OApCD,MAoCO;AACLA,QAAAA,WAAW,GAAG,IAAIyD,WAAJ,GAAkBc,GAAlB,CACZ6J,aAAa,CAACI,aAAdJ,CAA4B;AAC1B9B,UAAAA,UAAU,EAAEzR,KAAK,CAACxK,SADQ;AAE1Bkc,UAAAA,gBAAgB,EAAEqD,OAAO,CAACvf,SAFA;AAG1B8b,UAAAA,QAAQ,EAAE0D,aAAa,GAAG,CAAhBA,GAAoBA,aAApBA,GAAoC,CAHpB;AAI1BzD,UAAAA,KAAK,EAAEja,IAAI,CAACO,MAJc;AAK1BmC,UAAAA;AAL0B,SAA5BuZ,CADY,CAAdpO;AASF,OA1DF,CA4DE;AACA;;;AACA,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,cAAMoJ,yBAAyB,CAC7BhD,UAD6B,EAE7BpG,WAF6B,EAG7B,CAACnF,KAAD,EAAQ+U,OAAR,CAH6B,EAI7B;AACEnG,UAAAA,UAAU,EAAE;AADd,SAJ6B,CAA/B;AAQF;AACF;AAEA,UAAM2G,UAAU,GAAG9X,YAAY,CAACI,MAAbJ,CAQjB,CACAA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADA,EAEAA,YAAY,CAACK,GAAbL,CAAiB,QAAjBA,CAFA,EAGAA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAHA,EAIAA,YAAY,CAACK,GAAbL,CAAiB,oBAAjBA,CAJA,EAKAA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACkB,EAAblB,CAAgB,MAAhBA,CADFA,EAEEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CAFFA,EAGE,OAHFA,CALA,CARiBA,CAAnB;AAoBA,UAAMiX,SAAS,GAAGD,MAAM,CAACC,SAAzB;AACA,QAAI3W,MAAM,GAAG,CAAb;AACA,QAAIyX,KAAK,GAAGle,IAAZ;AACA,QAAIme,YAAY,GAAG,EAAnB;;AACA,WAAOD,KAAK,CAAC3d,MAAN2d,GAAe,CAAtB,EAAyB;AACvB,YAAMjW,KAAK,GAAGiW,KAAK,CAACrf,KAANqf,CAAY,CAAZA,EAAed,SAAfc,CAAd;AACA,YAAMle,IAAI,GAAGf,MAAM,CAACiD,KAAPjD,CAAame,SAAS,GAAG,EAAzBne,CAAb;AACAgf,MAAAA,UAAU,CAACre,MAAXqe,CACE;AACEnY,QAAAA,WAAW,EAAE,CADf;AACkB;AAChBW,QAAAA,MAFF;AAGEwB,QAAAA,KAAK,EAAEA,KAHT;AAIEmW,QAAAA,WAAW,EAAE,CAJf;AAKEC,QAAAA,kBAAkB,EAAE;AALtB,OADFJ,EAQEje,IARFie;AAWA,YAAMpQ,WAAW,GAAG,IAAIyD,WAAJ,GAAkBc,GAAlB,CAAsB;AACxC9R,QAAAA,IAAI,EAAE,CAAC;AAACoD,UAAAA,MAAM,EAAE+Z,OAAO,CAACvf,SAAjB;AAA4B6K,UAAAA,QAAQ,EAAE,IAAtC;AAA4CC,UAAAA,UAAU,EAAE;AAAxD,SAAD,CADkC;AAExCtG,QAAAA,SAFwC;AAGxC1C,QAAAA;AAHwC,OAAtB,CAApB;AAKAme,MAAAA,YAAY,CAAClZ,IAAbkZ,CACElH,yBAAyB,CAAChD,UAAD,EAAapG,WAAb,EAA0B,CAACnF,KAAD,EAAQ+U,OAAR,CAA1B,EAA4C;AACnEnG,QAAAA,UAAU,EAAE;AADuD,OAA5C,CAD3B6G,EAnBuB,CAyBvB;;AACA,UAAIlK,UAAU,CAACqK,YAAXrK,CAAwBrB,QAAxBqB,CAAiC,YAAjCA,CAAJ,EAAoD;AAClD,cAAMsK,mBAAmB,GAAG,CAA5B;AACA,cAAMzG,KAAK,CAAC,OAAOyG,mBAAR,CAAX;AACF;;AAEA9X,MAAAA,MAAM,IAAI2W,SAAV3W;AACAyX,MAAAA,KAAK,GAAGA,KAAK,CAACrf,KAANqf,CAAYd,SAAZc,CAARA;AACF;;AACA,UAAMlG,OAAO,CAACwG,GAARxG,CAAYmG,YAAZnG,CAAN,CArIkB,CAuIlB;;AACA;AACE,YAAMiG,UAAU,GAAG9X,YAAY,CAACI,MAAbJ,CAA2C,CAC5DA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD4D,CAA3CA,CAAnB;AAIA,YAAMnG,IAAI,GAAGf,MAAM,CAACiD,KAAPjD,CAAagf,UAAU,CAACjX,IAAxB/H,CAAb;AACAgf,MAAAA,UAAU,CAACre,MAAXqe,CACE;AACEnY,QAAAA,WAAW,EAAE,CADf,CACgB;;AADhB,OADFmY,EAIEje,IAJFie;AAOA,YAAMpQ,WAAW,GAAG,IAAIyD,WAAJ,GAAkBc,GAAlB,CAAsB;AACxC9R,QAAAA,IAAI,EAAE,CACJ;AAACoD,UAAAA,MAAM,EAAE+Z,OAAO,CAACvf,SAAjB;AAA4B6K,UAAAA,QAAQ,EAAE,IAAtC;AAA4CC,UAAAA,UAAU,EAAE;AAAxD,SADI,EAEJ;AAACtF,UAAAA,MAAM,EAAEkT,kBAAT;AAA6B7N,UAAAA,QAAQ,EAAE,KAAvC;AAA8CC,UAAAA,UAAU,EAAE;AAA1D,SAFI,CADkC;AAKxCtG,QAAAA,SALwC;AAMxC1C,QAAAA;AANwC,OAAtB,CAApB;AAQA,YAAMiX,yBAAyB,CAC7BhD,UAD6B,EAE7BpG,WAF6B,EAG7B,CAACnF,KAAD,EAAQ+U,OAAR,CAH6B,EAI7B;AACEnG,QAAAA,UAAU,EAAE;AADd,OAJ6B,CAA/B;AAQF,KArKkB,CAuKlB;;AACA,WAAO,IAAP;AACF;;AAnNkB;;AAAP6F,MAAM,CASVC,SATID,GASgBD,UAThBC;MChBAsB,qBAAqB,GAAG,IAAItd,SAAJ,CACnC,6CADmC,C;AAIrC;AACA;AACA;;AACO,MAAMud,SAAN,CAAgB;AACrB;AACF;AACA;AACA;AACA;AACA;AAC4B,SAAnBrB,mBAAmB,CAAChQ,UAAD,EAA6B;AACrD,WAAO8P,MAAM,CAACE,mBAAPF,CAA2B9P,UAA3B8P,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACa,SAAJK,IAAI,CACTvJ,UADS,EAETvL,KAFS,EAGT+U,OAHS,EAITkB,GAJS,EAKTC,eALS,EAMS;AAClB,WAAOzB,MAAM,CAACK,IAAPL,CAAYlJ,UAAZkJ,EAAwBzU,KAAxByU,EAA+BM,OAA/BN,EAAwCyB,eAAxCzB,EAAyDwB,GAAzDxB,CAAP;AACF;;AA7BqB;;ACdvB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAnC;;AACA,IAAI,OAAO,GAAG,MAAM,CAAC,IAAP,IAAe,UAAS,GAAT,EAAc;AACzC,MAAI,IAAI,GAAG,EAAX;;AACA,OAAK,IAAI,IAAT,IAAiB,GAAjB,EAAsB;AACrB,IAAA,IAAI,CAAC,IAAL,CAAU,IAAV;AACA;;AACD,SAAO,IAAP;AACA,CANF;;AAQA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,WAAxB,EAAqC;AACpC,MAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,OAA5B,EAAqC,KAArC;;AACA,MAAI,GAAG,KAAK,IAAZ,EAAkB;AACjB,WAAO,MAAP;AACA;;AACD,MAAI,GAAG,KAAK,KAAZ,EAAmB;AAClB,WAAO,OAAP;AACA;;AACD,UAAQ,OAAO,GAAf;AACC,SAAK,QAAL;AACC,UAAI,GAAG,KAAK,IAAZ,EAAkB;AACjB,eAAO,IAAP;AACA,OAFD,MAEO,IAAI,GAAG,CAAC,MAAJ,IAAc,OAAO,GAAG,CAAC,MAAX,KAAsB,UAAxC,EAAoD;AAC1D,eAAO,SAAS,CAAC,GAAG,CAAC,MAAJ,EAAD,EAAe,WAAf,CAAhB;AACA,OAFM,MAEA;AACN,QAAA,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAR;;AACA,YAAI,KAAK,KAAK,gBAAd,EAAgC;AAC/B,UAAA,GAAG,GAAG,GAAN;AACA,UAAA,GAAG,GAAG,GAAG,CAAC,MAAJ,GAAa,CAAnB;;AACA,eAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,GAAf,EAAoB,CAAC,EAArB,EAAyB;AACxB,YAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAT,GAA0B,GAAjC;AACA;;AACD,cAAI,GAAG,GAAG,CAAC,CAAX,EAAc;AACb,YAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAhB;AACA;;AACD,iBAAO,GAAG,GAAG,GAAb;AACA,SAVD,MAUO,IAAI,KAAK,KAAK,iBAAd,EAAiC;AAC5C;AACK,UAAA,IAAI,GAAG,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,EAAP;AACA,UAAA,GAAG,GAAG,IAAI,CAAC,MAAX;AACA,UAAA,GAAG,GAAG,EAAN;AACA,UAAA,CAAC,GAAG,CAAJ;;AACA,iBAAO,CAAC,GAAG,GAAX,EAAgB;AACf,YAAA,GAAG,GAAG,IAAI,CAAC,CAAD,CAAV;AACA,YAAA,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,GAAD,CAAJ,EAAW,KAAX,CAAnB;;AACA,gBAAI,OAAO,KAAK,SAAhB,EAA2B;AAC1B,kBAAI,GAAJ,EAAS;AACR,gBAAA,GAAG,IAAI,GAAP;AACA;;AACD,cAAA,GAAG,IAAI,IAAI,CAAC,SAAL,CAAe,GAAf,IAAsB,GAAtB,GAA4B,OAAnC;AACA;;AACD,YAAA,CAAC;AACD;;AACD,iBAAO,MAAM,GAAN,GAAY,GAAnB;AACA,SAlBM,MAkBA;AACN,iBAAO,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP;AACA;AACD;;AACF,SAAK,UAAL;AACA,SAAK,WAAL;AACC,aAAO,WAAW,GAAG,IAAH,GAAU,SAA5B;;AACD,SAAK,QAAL;AACC,aAAO,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP;;AACD;AACC,aAAO,QAAQ,CAAC,GAAD,CAAR,GAAgB,GAAhB,GAAsB,IAA7B;AA9CF;AAgDA;;IAED,mBAAc,GAAG,UAAS,GAAT,EAAc;AAC9B,MAAI,SAAS,GAAG,SAAS,CAAC,GAAD,EAAM,KAAN,CAAzB;;AACA,MAAI,SAAS,KAAK,SAAlB,EAA6B;AAC5B,WAAO,KAAI,SAAX;AACA;AACD,C;;;ACxED,MAAM0B,sBAAsB,GAAG,EAA/B,C,CAEA;;AACA,SAASC,aAAT,CAAuBC,CAAvB,EAAkC;AAChC,MAAID,aAAa,GAAG,CAApB;;AACA,SAAOC,CAAC,GAAG,CAAX,EAAc;AACZA,IAAAA,CAAC,IAAI,CAALA;AACAD,IAAAA,aAAa;AACf;;AACA,SAAOA,aAAP;AACF,C,CAEA;;;AACA,SAASE,cAAT,CAAwBD,CAAxB,EAAmC;AACjC,MAAIA,CAAC,KAAK,CAAV,EAAa,OAAO,CAAP;AACbA,EAAAA,CAAC;AACDA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,CAAVA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,EAAVA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAAI,EAAVA;AACA,SAAOA,CAAC,GAAG,CAAX;AACF;AAEA;AACA;AACA;AACA;AACA;;;AACO,MAAME,aAAN,CAAoB;AACzB;;AAEA;;AAEA;;AAEA;;AAEA;AAGAzf,EAAAA,WAAW,CACT0f,aADS,EAETC,wBAFS,EAGTC,MAHS,EAITC,gBAJS,EAKTC,eALS,EAMT;AAAA,SAhBKJ,aAgBL,GAhBkB,KAAA,CAgBlB;AAhBkB,SAEbC,wBAFa,GAEW,KAAA,CAFX;AAEW,SAExBC,MAFwB,GAElB,KAAA,CAFkB;AAElB,SAENC,gBAFM,GAEU,KAAA,CAFV;AAEU,SAEhBC,eAFgB,GAED,KAAA,CAFC;AAWrB,SAAKJ,aAAL,GAAqBA,aAArB;AACA,SAAKC,wBAAL,GAAgCA,wBAAhC;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACF;;AAEAC,EAAAA,QAAQ,CAACC,IAAD,EAAuB;AAC7B,WAAO,KAAKC,oBAAL,CAA0BD,IAA1B,EAAgC,CAAhC,CAAP;AACF;;AAEAC,EAAAA,oBAAoB,CAACD,IAAD,EAAiC;AACnD,QAAIA,IAAI,GAAG,KAAKF,eAAhB,EAAiC;AAC/B,YAAMI,KAAK,GACTZ,aAAa,CAACE,cAAc,CAACQ,IAAI,GAAGX,sBAAPW,GAAgC,CAAjC,CAAf,CAAbV,GACAA,aAAa,CAACD,sBAAD,CADbC,GAEA,CAHF;AAKA,YAAMa,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,KAArB,CAAjB;AACA,YAAMG,SAAS,GAAGL,IAAI,IAAIG,QAAQ,GAAGd,sBAAf,CAAtB;AACA,aAAO,CAACa,KAAD,EAAQG,SAAR,CAAP;AACD,KATD,MASO;AACL,YAAMC,eAAe,GAAGN,IAAI,GAAG,KAAKF,eAApC;AACA,YAAMS,gBAAgB,GAAGzC,IAAI,CAAC0C,KAAL1C,CAAWwC,eAAe,GAAG,KAAKZ,aAAlC5B,CAAzB;AACA,YAAMoC,KAAK,GAAG,KAAKL,gBAAL,GAAwBU,gBAAtC;AACA,YAAMF,SAAS,GAAGC,eAAe,GAAG,KAAKZ,aAAzC;AACA,aAAO,CAACQ,KAAD,EAAQG,SAAR,CAAP;AACF;AACF;;AAEAI,EAAAA,mBAAmB,CAACP,KAAD,EAAwB;AACzC,QAAIA,KAAK,IAAI,KAAKL,gBAAlB,EAAoC;AAClC,aAAO,CAAC/B,IAAI,CAAC4C,GAAL5C,CAAS,CAATA,EAAYoC,KAAZpC,IAAqB,CAAtB,IAA2BuB,sBAAlC;AACD,KAFD,MAEO;AACL,aACE,CAACa,KAAK,GAAG,KAAKL,gBAAd,IAAkC,KAAKH,aAAvC,GACA,KAAKI,eAFP;AAIF;AACF;;AAEAa,EAAAA,kBAAkB,CAACT,KAAD,EAAwB;AACxC,WAAO,KAAKO,mBAAL,CAAyBP,KAAzB,IAAkC,KAAKE,eAAL,CAAqBF,KAArB,CAAlC,GAAgE,CAAvE;AACF;;AAEAE,EAAAA,eAAe,CAACF,KAAD,EAAgB;AAC7B,QAAIA,KAAK,GAAG,KAAKL,gBAAjB,EAAmC;AACjC,aAAO/B,IAAI,CAAC4C,GAAL5C,CAAS,CAATA,EAAYoC,KAAK,GAAGZ,aAAa,CAACD,sBAAD,CAAjCvB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAK4B,aAAZ;AACF;AACF;;AAtEyB;;AC9BpB,MAAMkB,oBAAN,SAAmC5f,KAAnC,CAAyC;AAG9ChB,EAAAA,WAAW,CAACZ,OAAD,EAAkByhB,IAAlB,EAAmC;AAC5C,UAAMzhB,OAAN;AAAe,SAHjByhB,IAGiB,GAHb,KAAA,CAGa;AAEf,SAAKA,IAAL,GAAYA,IAAZ;AACF;;AAP8C,C,CAUhD;AACA;;;AACO,MAAMC,sBAAsB,GAAG;AACpCC,EAAAA,sCAAsC,EAAE,CAAC,KADL;AAEpCC,EAAAA,wDAAwD,EAAE,CAAC,KAFvB;AAGpCC,EAAAA,gEAAgE,EAAE,CAAC,KAH/B;AAIpCC,EAAAA,yCAAyC,EAAE,CAAC,KAJR;AAKpCC,EAAAA,oCAAoC,EAAE,CAAC,KALH;AAMpCC,EAAAA,iEAAiE,EAAE,CAAC,KANhC;AAOpCC,EAAAA,kCAAkC,EAAE,CAAC,KAPD;AAQpCC,EAAAA,iCAAiC,EAAE,CAAC,KARA;AASpCC,EAAAA,oDAAoD,EAAE,CAAC,KATnB;AAUpCC,EAAAA,uDAAuD,EAAE,CAAC,KAVtB;AAWpCC,EAAAA,uDAAuD,EAAE,CAAC,KAXtB;AAYpCC,EAAAA,mBAAmB,EAAE,CAAC,KAZc;AAapCC,EAAAA,wDAAwD,EAAE,CAAC,KAbvB;AAcpCC,EAAAA,oDAAoD,EAAE,CAAC,KAdnB;AAepCC,EAAAA,qDAAqD,EAAE,CAAC,KAfpB;AAgBpCC,EAAAA,kDAAkD,EAAE,CAAC;AAhBjB,CAA/B;;AAqBA,MAAMC,kBAAN,SAAiC/gB,KAAjC,CAAuC;AAG5ChB,EAAAA,WAAW,CACT;AACEgiB,IAAAA,IADF;AAEE5iB,IAAAA,OAFF;AAGEoB,IAAAA;AAHF,GADS,EAMTyhB,aANS,EAOT;AACA,UAAMA,aAAa,IAAI,IAAjBA,GAAyB,GAAEA,aAAc,KAAI7iB,OAAQ,EAArD6iB,GAAyD7iB,OAA/D;AAAwE,SAV1E4iB,IAU0E,GAVtE,KAAA,CAUsE;AAVtE,SACJxhB,IADI,GACA,KAAA,CADA;AAWF,SAAKwhB,IAAL,GAAYA,IAAZ;AACA,SAAKxhB,IAAL,GAAYA,IAAZ;AACA,SAAK0hB,IAAL,GAAY,oBAAZ;AACF;;AAf4C;;AC9B9C,IAAA,SAAA,GAAeC,UAAU,CAACC,KAA1B;;ACYe,MAAMC,kBAAN,SAAiCC,wBAAjC,CAA0D;AAEvEtiB,EAAAA,WAAW,CACT6D,OADS,EAET6T,OAFS,EAGT8K,mBAHS,EAOT;AACA,UAAMC,gBAAgB,GAAIC,GAAW,IAAK;AACxC,YAAMC,GAAG,GAAGC,SAAS,CAACF,GAAD,EAAM;AACzBG,QAAAA,WAAW,EAAE,IADY;AAEzBC,QAAAA,cAAc,EAAE,CAFS;AAGzBC,QAAAA,SAAS,EAAE,IAHc;AAIzBC,QAAAA,kBAAkB,EAAE,IAJK;AAKzB,WAAGtL;AALsB,OAAN,CAArB;;AAOA,UAAI,YAAYiL,GAAhB,EAAqB;AACnB,aAAKJ,gBAAL,GACEI,GAAG,CACHM,MAFF;AAGD,OAJD,MAIO;AACL,aAAKV,gBAAL,GAAwBI,GAAxB;AACF;;AACA,aAAOA,GAAP;AACD,KAhBD;;AAiBA,UAAMF,gBAAN,EAAwB5e,OAAxB,EAAiC6T,OAAjC,EAA0C8K,mBAA1C;AAA+D,SA1BzDD,gBA0ByD,GA1BzC,KAAA,CA0ByC;AACjE;;AACAhQ,EAAAA,IAAI,CACF,GAAGtG,IADD,EAE4C;AAAA;;AAC9C,UAAMiX,UAAU,4BAAG,KAAKX,gBAAR,0DAAG,sBAAuBW,UAA1C;;AACA,QAAIA,UAAU,KAAK;AAAC;AAApB,MAA2C;AACzC,eAAO,MAAM3Q,IAAN,CAAW,GAAGtG,IAAd,CAAP;AACF;;AACA,WAAOuM,OAAO,CAAC2K,MAAR3K,CACL,IAAIxX,KAAJ,CACE,sCACEiL,IAAI,CAAC,CAAD,CADN,GAEE,oEAFF,GAGEiX,UAHF,GAIE,GALJ,CADK1K,CAAP;AASF;;AACA4K,EAAAA,MAAM,CACJ,GAAGnX,IADC,EAE4C;AAAA;;AAChD,UAAMiX,UAAU,6BAAG,KAAKX,gBAAR,2DAAG,uBAAuBW,UAA1C;;AACA,QAAIA,UAAU,KAAK;AAAC;AAApB,MAA2C;AACzC,eAAO,MAAME,MAAN,CAAa,GAAGnX,IAAhB,CAAP;AACF;;AACA,WAAOuM,OAAO,CAAC2K,MAAR3K,CACL,IAAIxX,KAAJ,CACE,4CACEiL,IAAI,CAAC,CAAD,CADN,GAEE,oEAFF,GAGEiX,UAHF,GAIE,GALJ,CADK1K,CAAP;AASF;;AA9DuE,C,CCfzE;AACA;;AAEA;AACA;AACA;;;AACO,MAAM6K,oBAAoB,GAAG,GAA7B;AAEP;AACA;AACA;;AACO,MAAMC,sBAAsB,GAAG,EAA/B;AAEP;AACA;AACA;;AACO,MAAMC,oBAAoB,GAC/BF,oBAAoB,GAAGC,sBADlB;AAGP;AACA;AACA;;AACO,MAAME,WAAW,GAAG,OAAOD,oBAA3B;AChBP;AACA;AACA;;AAQA;AACA;AACA;AACA;;AACO,SAASzK,UAAT,CACL9Q,IADK,EAELxH,IAFK,EAGc;AACnB,MAAIoB,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGoG,IAAI,CAACO,MAALP,CAAYzH,MAAZyH,CAAmBxH,IAAnBwH,CAAVpG;AACD,GAFD,CAEE,OAAOmC,GAAP,EAAY;AACZ,UAAM,IAAI/C,KAAJ,CAAU,0BAA0B+C,GAApC,CAAN;AACF;;AAEA,MAAInC,OAAO,CAACuY,SAARvY,KAAsBoG,IAAI,CAACnC,KAA/B,EAAsC;AACpC,UAAM,IAAI7E,KAAJ,CACH,+CAA8CY,OAAO,CAACuY,SAAU,OAAMnS,IAAI,CAACnC,KAAM,EAD9E,CAAN;AAGF;;AAEA,SAAOjE,OAAP;AACF,C,CCjBA;;;AACA,MAAM6hB,sBAAsB,GAAG,EAA/B;;AAEO,MAAMC,yBAAN,CAAgC;AAIrC1jB,EAAAA,WAAW,CAACiM,IAAD,EAAsC;AAAA,SAHjD/K,GAGiD,GAH9C,KAAA,CAG8C;AAH9C,SACH8J,KADG,GACE,KAAA,CADF;AAID,SAAK9J,GAAL,GAAW+K,IAAI,CAAC/K,GAAhB;AACA,SAAK8J,KAAL,GAAaiB,IAAI,CAACjB,KAAlB;AACF;;AAEA2Y,EAAAA,QAAQ,GAAY;AAClB,UAAMC,OAAO,GAAG5G,MAAM,CAAC,oBAAD,CAAtB;AACA,WAAO,KAAKhS,KAAL,CAAW6Y,gBAAX,KAAgCD,OAAvC;AACF;;AAEkB,SAAXnjB,WAAW,CAACqjB,WAAD,EAAmD;AACnE,UAAMrd,IAAI,GAAGqS,UAAU,CAACiL,qBAAD,EAAwBD,WAAxB,CAAvB;AAEA,UAAME,sBAAsB,GAAGF,WAAW,CAAC/iB,MAAZ+iB,GAAqBL,sBAApD;AACAzZ,IAAAA,MAAM,CAACga,sBAAsB,IAAI,CAA3B,EAA8B,yBAA9B,CAANha;AACAA,IAAAA,MAAM,CAACga,sBAAsB,GAAG,EAAzBA,KAAgC,CAAjC,EAAoC,yBAApC,CAANha;AAEA,UAAMia,sBAAsB,GAAGD,sBAAsB,GAAG,EAAxD;AACA,UAAM;AAAC/Y,MAAAA;AAAD,QAActE,YAAY,CAACI,MAAbJ,CAAoD,CACtEA,YAAY,CAACuH,GAAbvH,CAAiByH,SAAgB,EAAjCzH,EAAqCsd,sBAArCtd,EAA6D,WAA7DA,CADsE,CAApDA,EAEjBpG,MAFiBoG,CAEVmd,WAAW,CAACzkB,KAAZykB,CAAkBL,sBAAlBK,CAFUnd,CAApB;AAIA,WAAO;AACLkd,MAAAA,gBAAgB,EAAEpd,IAAI,CAACod,gBADlB;AAELK,MAAAA,gBAAgB,EAAEzd,IAAI,CAACyd,gBAFlB;AAGLC,MAAAA,0BAA0B,EAAE1d,IAAI,CAAC2d,sBAH5B;AAILC,MAAAA,SAAS,EACP5d,IAAI,CAAC4d,SAAL5d,CAAe1F,MAAf0F,KAA0B,CAA1BA,GACI,IAAI9E,SAAJ,CAAc8E,IAAI,CAAC4d,SAAL5d,CAAe,CAAfA,CAAd,CADJA,GAEIhF,SAPD;AAQLwJ,MAAAA,SAAS,EAAEA,SAAS,CAAChK,GAAVgK,CAAcpH,OAAO,IAAI,IAAIlC,SAAJ,CAAckC,OAAd,CAAzBoH;AARN,KAAP;AAUF;;AApCqC;;AAuCvC,MAAM8Y,qBAAqB,GAAG;AAC5Ble,EAAAA,KAAK,EAAE,CADqB;AAE5B0C,EAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAML,CACDA,YAAY,CAACK,GAAbL,CAAiB,WAAjBA,CADC,EAEDmT,GAAG,CAAC,kBAAD,CAFF,EAGDnT,YAAY,CAACqS,IAAbrS,CAAkB,kBAAlBA,CAHC,EAIDA,YAAY,CAACkB,EAAblB,CAAgB,wBAAhBA,CAJC,EAKDA,YAAY,CAACkB,EAAblB,EALC,EAKkB;AACnBA,EAAAA,YAAY,CAACuH,GAAbvH,CACEyH,SAAgB,EADlBzH,EAEEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACkB,EAAblB,EAApBA,EAAuC,CAAC,CAAxCA,CAFFA,EAGE,WAHFA,CANC,CANKA;AAFoB,CAA9B;AC/DA,MAAM2d,MAAM,GAAG,4CAAf;;AAEO,SAASC,gBAAT,CAA0BC,QAA1B,EAA4C;AACjD,QAAMC,OAAO,GAAGD,QAAQ,CAACE,KAATF,CAAeF,MAAfE,CAAhB;;AACA,MAAIC,OAAO,IAAI,IAAf,EAAqB;AACnB,UAAMhhB,SAAS,CAAsC+gB,qCAAAA,QAAS,IAA/C,CAAf;AACF;;AACA,QAAM,CACJlX,CADI,EACD;AACHqX,EAAAA,OAFI,EAGJC,aAHI,EAIJC,IAJI,IAKFJ,OALJ;AAMA,QAAMK,QAAQ,GAAGN,QAAQ,CAACO,UAATP,CAAoB,QAApBA,IAAgC,MAAhCA,GAAyC,KAA1D;AACA,QAAMQ,SAAS,GACbJ,aAAa,IAAI,IAAjBA,GAAwB,IAAxBA,GAA+BK,QAAQ,CAACL,aAAa,CAACvlB,KAAdulB,CAAoB,CAApBA,CAAD,EAAyB,EAAzB,CADzC;AAEA,QAAMM,aAAa,GACjB;AACA;AACA;AACA;AACA;AACA;AACAF,EAAAA,SAAS,IAAI,IAAbA,GAAoB,EAApBA,GAA6BA,IAAAA,SAAS,GAAG,CAAG,EAP9C;AAQA,SAAQ,GAAEF,QAAaH,KAAAA,OAAQ,GAAEO,aAAc,GAAEL,IAAM,EAAvD;AACF;;ACoCA,MAAMM,mBAAmB,GAAGC,MAAM,CAChCC,QAAQ,CAAC1jB,SAAD,CADwB,EAEhC2jB,MAAM,EAF0B,EAGhC/jB,KAAK,IAAI,IAAII,SAAJ,CAAcJ,KAAd,CAHuB,CAAlC;AAMA,MAAMgkB,oBAAoB,GAAGC,KAAK,CAAC,CAACF,MAAM,EAAP,EAAWG,OAAO,CAAC,QAAD,CAAlB,CAAD,CAAlC;AAEA,MAAMC,wBAAwB,GAAGN,MAAM,CACrCC,QAAQ,CAAC5lB,MAAD,CAD6B,EAErC8lB,oBAFqC,EAGrChkB,KAAK,IAAI9B,MAAM,CAACE,IAAPF,CAAY8B,KAAK,CAAC,CAAD,CAAjB9B,EAAsB,QAAtBA,CAH4B,CAAvC;AAMA;AACA;AACA;AACA;;AACakmB,MAAAA,0BAA0B,GAAG,KAAK,IAAlCA;AAEb;AACA;AACA;AACA;AACA;AACA;;AAgRA;;AACA,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AAC9C,MAAI,WAAWC,IAAX,CAAgBD,WAAhB,MAAiC,KAArC,EAA4C;AAC1C,UAAM,IAAIpiB,SAAJ,CAAc,mDAAd,CAAN;AACF;;AACA,SAAOoiB,WAAP;AACF;AAEA;;;AACA,SAASE,2BAAT,CACEC,kBADF,EAEE;AACA,MAAIlO,UAAJ;AACA,MAAItC,MAAJ;;AACA,MAAI,OAAOwQ,kBAAP,KAA8B,QAAlC,EAA4C;AAC1ClO,IAAAA,UAAU,GAAGkO,kBAAblO;AACD,GAFD,MAEO,IAAIkO,kBAAJ,EAAwB;AAC7B,UAAM;AAAClO,MAAAA,UAAU,EAAEmO,mBAAb;AAAkC,SAAGC;AAArC,QACJF,kBADF;AAEAlO,IAAAA,UAAU,GAAGmO,mBAAbnO;AACAtC,IAAAA,MAAM,GAAG0Q,eAAT1Q;AACF;;AACA,SAAO;AAACsC,IAAAA,UAAD;AAAatC,IAAAA;AAAb,GAAP;AACF;AAEA;AACA;AACA;;;AACA,SAAS2Q,eAAT,CAA+BC,MAA/B,EAAqD;AACnD,SAAOC,KAAK,CAAC,CACXC,IAAI,CAAC;AACHC,IAAAA,OAAO,EAAEd,OAAO,CAAC,KAAD,CADb;AAEHe,IAAAA,EAAE,EAAElB,MAAM,EAFP;AAGHc,IAAAA;AAHG,GAAD,CADO,EAMXE,IAAI,CAAC;AACHC,IAAAA,OAAO,EAAEd,OAAO,CAAC,KAAD,CADb;AAEHe,IAAAA,EAAE,EAAElB,MAAM,EAFP;AAGH/G,IAAAA,KAAK,EAAE+H,IAAI,CAAC;AACVtE,MAAAA,IAAI,EAAEyE,OAAO,EADH;AAEVrnB,MAAAA,OAAO,EAAEkmB,MAAM,EAFL;AAGV9kB,MAAAA,IAAI,EAAEkmB,QAAQ,CAACC,GAAG,EAAJ;AAHJ,KAAD;AAHR,GAAD,CANO,CAAD,CAAZ;AAgBF;;AAEA,MAAMC,gBAAgB,GAAGT,eAAe,CAACM,OAAO,EAAR,CAAxC;AAEA;AACA;AACA;;AACA,SAASI,aAAT,CAA6BC,MAA7B,EAAmD;AACjD,SAAO1B,MAAM,CAACe,eAAe,CAACW,MAAD,CAAhB,EAA0BF,gBAA1B,EAA4CrlB,KAAK,IAAI;AAChE,QAAI,WAAWA,KAAf,EAAsB;AACpB,aAAOA,KAAP;AACD,KAFD,MAEO;AACL,aAAO,EACL,GAAGA,KADE;AAEL6kB,QAAAA,MAAM,EAAEW,MAAM,CAACxlB,KAAK,CAAC6kB,MAAP,EAAeU,MAAf;AAFT,OAAP;AAIF;AACD,GATY,CAAb;AAUF;AAEA;AACA;AACA;;;AACA,SAASE,uBAAT,CAAuCzlB,KAAvC,EAA4D;AAC1D,SAAOslB,aAAa,CAClBP,IAAI,CAAC;AACHW,IAAAA,OAAO,EAAEX,IAAI,CAAC;AACZtG,MAAAA,IAAI,EAAEkH,MAAM;AADA,KAAD,CADV;AAIH3lB,IAAAA;AAJG,GAAD,CADc,CAApB;AAQF;AAEA;AACA;AACA;;;AACA,SAAS4lB,4BAAT,CAA4C5lB,KAA5C,EAAiE;AAC/D,SAAO+kB,IAAI,CAAC;AACVW,IAAAA,OAAO,EAAEX,IAAI,CAAC;AACZtG,MAAAA,IAAI,EAAEkH,MAAM;AADA,KAAD,CADH;AAIV3lB,IAAAA;AAJU,GAAD,CAAX;AAMF;AAEA;AACA;AACA;;;AACA,SAAS6lB,4BAAT,CACEjb,OADF,EAEEkb,QAFF,EAGoB;AAClB,MAAIlb,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAO,IAAIyC,SAAJ,CAAc;AACnBtE,MAAAA,MAAM,EAAE+c,QAAQ,CAAC/c,MADE;AAEnBhF,MAAAA,iBAAiB,EAAE+hB,QAAQ,CAACvb,WAATub,CAAqBpmB,GAArBomB,CACjBjc,UAAU,IAAI,IAAIzJ,SAAJ,CAAcyJ,UAAd,CADGic,CAFA;AAKnBtb,MAAAA,eAAe,EAAEsb,QAAQ,CAACtb,eALP;AAMnBK,MAAAA,oBAAoB,EAAEib,QAAQ,CAACphB,YAATohB,CAAsBpmB,GAAtBomB,CAA0B1d,EAAE,KAAK;AACrDpD,QAAAA,cAAc,EAAEoD,EAAE,CAACpD,cADkC;AAErDC,QAAAA,iBAAiB,EAAEmD,EAAE,CAAC0C,QAF+B;AAGrD7L,QAAAA,IAAI,EAAEqB,IAAI,CAACtB,MAALsB,CAAY8H,EAAE,CAACnJ,IAAfqB;AAH+C,OAAL,CAA5BwlB,CANH;AAWnB/a,MAAAA,mBAAmB,EAAE+a,QAAQ,CAAC/a;AAXX,KAAd,CAAP;AAaD,GAdD,MAcO;AACL,WAAO,IAAIT,OAAJ,CAAYwb,QAAZ,CAAP;AACF;AACF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA2QA,MAAMC,0BAA0B,GAAGhB,IAAI,CAAC;AACtCiB,EAAAA,UAAU,EAAEL,MAAM,EADoB;AAEtCM,EAAAA,cAAc,EAAEN,MAAM,EAFgB;AAGtCO,EAAAA,OAAO,EAAEP,MAAM,EAHuB;AAItCQ,EAAAA,KAAK,EAAER,MAAM,EAJyB;AAKtCS,EAAAA,QAAQ,EAAET,MAAM;AALsB,CAAD,CAAvC;AAQA;AACA;AACA;;AAcA;AACA;AACA;;AACA,MAAMU,wBAAwB,GAAGf,aAAa,CAC5CnI,KAAK,CACHmJ,QAAQ,CACNvB,IAAI,CAAC;AACHpG,EAAAA,KAAK,EAAEgH,MAAM,EADV;AAEHY,EAAAA,aAAa,EAAEZ,MAAM,EAFlB;AAGHa,EAAAA,MAAM,EAAEb,MAAM,EAHX;AAIHc,EAAAA,WAAW,EAAEd,MAAM,EAJhB;AAKHe,EAAAA,UAAU,EAAEvB,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT;AALjB,CAAD,CADE,CADL,CADuC,CAA9C;AAgCA;AACA;AACA;;AACA,MAAMgB,iCAAiC,GAAGxJ,KAAK,CAC7C4H,IAAI,CAAC;AACHtG,EAAAA,IAAI,EAAEkH,MAAM,EADT;AAEHiB,EAAAA,iBAAiB,EAAEjB,MAAM;AAFtB,CAAD,CADyC,CAA/C;AAkBA;AACA;AACA;;AACA,MAAMkB,sBAAsB,GAAG9B,IAAI,CAAC;AAClC+B,EAAAA,KAAK,EAAEnB,MAAM,EADqB;AAElCoB,EAAAA,SAAS,EAAEpB,MAAM,EAFiB;AAGlCK,EAAAA,UAAU,EAAEL,MAAM,EAHgB;AAIlChH,EAAAA,KAAK,EAAEgH,MAAM;AAJqB,CAAD,CAAnC;AAOA;AACA;AACA;;AAUA,MAAMqB,kBAAkB,GAAGjC,IAAI,CAAC;AAC9BpG,EAAAA,KAAK,EAAEgH,MAAM,EADiB;AAE9B7G,EAAAA,SAAS,EAAE6G,MAAM,EAFa;AAG9BsB,EAAAA,YAAY,EAAEtB,MAAM,EAHU;AAI9BuB,EAAAA,YAAY,EAAEvB,MAAM,EAJU;AAK9BwB,EAAAA,WAAW,EAAEhC,QAAQ,CAACQ,MAAM,EAAP,CALS;AAM9ByB,EAAAA,gBAAgB,EAAEjC,QAAQ,CAACQ,MAAM,EAAP;AANI,CAAD,CAA/B;AASA,MAAM0B,sBAAsB,GAAGtC,IAAI,CAAC;AAClC5G,EAAAA,aAAa,EAAEwH,MAAM,EADa;AAElCvH,EAAAA,wBAAwB,EAAEuH,MAAM,EAFE;AAGlCtH,EAAAA,MAAM,EAAEiJ,OAAO,EAHmB;AAIlChJ,EAAAA,gBAAgB,EAAEqH,MAAM,EAJU;AAKlCpH,EAAAA,eAAe,EAAEoH,MAAM;AALW,CAAD,CAAnC;AAQA;AACA;AACA;AACA;;AAKA,MAAM4B,uBAAuB,GAAGC,MAAM,CAACzD,MAAM,EAAP,EAAW5G,KAAK,CAACwI,MAAM,EAAP,CAAhB,CAAtC;AAEA;AACA;AACA;;AACA,MAAM8B,sBAAsB,GAAGnB,QAAQ,CAACxB,KAAK,CAAC,CAACC,IAAI,CAAC,EAAD,CAAL,EAAWhB,MAAM,EAAjB,CAAD,CAAN,CAAvC;AAEA;AACA;AACA;;AACA,MAAM2D,qBAAqB,GAAG3C,IAAI,CAAC;AACjCviB,EAAAA,GAAG,EAAEilB;AAD4B,CAAD,CAAlC;AAIA;AACA;AACA;;AACA,MAAME,uBAAuB,GAAGzD,OAAO,CAAC,mBAAD,CAAvC;AAEA;AACA;AACA;;AAOA,MAAM0D,aAAa,GAAG7C,IAAI,CAAC;AACzB,iBAAehB,MAAM,EADI;AAEzB,iBAAeoB,QAAQ,CAACQ,MAAM,EAAP;AAFE,CAAD,CAA1B;AAgDA,MAAMkC,kCAAkC,GAAGpC,uBAAuB,CAChEV,IAAI,CAAC;AACHviB,EAAAA,GAAG,EAAE8jB,QAAQ,CAACxB,KAAK,CAAC,CAACC,IAAI,CAAC,EAAD,CAAL,EAAWhB,MAAM,EAAjB,CAAD,CAAN,CADV;AAEHzE,EAAAA,IAAI,EAAEgH,QAAQ,CAACnJ,KAAK,CAAC4G,MAAM,EAAP,CAAN,CAFX;AAGHjZ,EAAAA,QAAQ,EAAEqa,QAAQ,CAChBmB,QAAQ,CACNnJ,KAAK,CACHmJ,QAAQ,CACNvB,IAAI,CAAC;AACHhI,IAAAA,UAAU,EAAEuK,OAAO,EADhB;AAEHrK,IAAAA,KAAK,EAAE8G,MAAM,EAFV;AAGH9K,IAAAA,QAAQ,EAAE0M,MAAM,EAHb;AAIH1mB,IAAAA,IAAI,EAAEke,KAAK,CAAC4G,MAAM,EAAP,CAJR;AAKH+D,IAAAA,SAAS,EAAE3C,QAAQ,CAACQ,MAAM,EAAP;AALhB,GAAD,CADE,CADL,CADC,CADQ,CAHf;AAkBHoC,EAAAA,aAAa,EAAE5C,QAAQ,CAACQ,MAAM,EAAP,CAlBpB;AAmBHqC,EAAAA,UAAU,EAAE7C,QAAQ,CAClBmB,QAAQ,CACNvB,IAAI,CAAC;AACHpjB,IAAAA,SAAS,EAAEoiB,MAAM,EADd;AAEH9kB,IAAAA,IAAI,EAAEglB,KAAK,CAAC,CAACF,MAAM,EAAP,EAAWG,OAAO,CAAC,QAAD,CAAlB,CAAD;AAFR,GAAD,CADE,CADU;AAnBjB,CAAD,CAD4D,CAAlE;AAyhBA;AACA;AACA;;AACA,MAAM+D,6BAA6B,GAAGxC,uBAAuB,CAC3DV,IAAI,CAAC;AACHmD,EAAAA,UAAU,EAAEV,MAAM,CAACzD,MAAM,EAAP,EAAW5G,KAAK,CAACwI,MAAM,EAAP,CAAhB,CADf;AAEHwC,EAAAA,KAAK,EAAEpD,IAAI,CAAC;AACVqD,IAAAA,SAAS,EAAEzC,MAAM,EADP;AAEV0C,IAAAA,QAAQ,EAAE1C,MAAM;AAFN,GAAD;AAFR,CAAD,CADuD,CAA7D;AAUA;AACA;AACA;;AAYA,SAAS2C,eAAT,CACEnH,GADF,EAEEoH,WAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,uBALF,EAMEC,SANF,EAOa;AACX,QAAM9H,KAAK,GAAG2H,WAAW,GAAGA,WAAH,GAAiBI,SAA1C;AACA,MAAIC,KAAJ;AACyB;AACvB,QAAIF,SAAS,IAAI,IAAjB,EAAuB;AACrBjX,MAAAA,OAAO,CAACC,IAARD,CACE,4FACE,qEAFJA;AAIF;AAsCF;AAEA,MAAIoX,mBAAJ;;AAEA,MAAIL,eAAJ,EAAqB;AACnBK,IAAAA,mBAAmB,GAAG,OAAOC,IAAP,EAAaC,IAAb,KAAsB;AAC1C,YAAMC,iBAAiB,GAAG,MAAM,IAAIhS,OAAJ,CAC9B,CAACC,OAAD,EAAU0K,MAAV,KAAqB;AACnB,YAAI;AACF6G,UAAAA,eAAe,CAACM,IAAD,EAAOC,IAAP,EAAa,CAACE,YAAD,EAAeC,YAAf,KAC1BjS,OAAO,CAAC,CAACgS,YAAD,EAAeC,YAAf,CAAD,CADM,CAAfV;AAGD,SAJD,CAIE,OAAOzL,KAAP,EAAc;AACd4E,UAAAA,MAAM,CAAC5E,KAAD,CAAN4E;AACF;AACD,OAT6B,CAAhC;AAWA,aAAO,MAAMf,KAAK,CAAC,GAAGoI,iBAAJ,CAAlB;AACD,KAbDH;AAcF;;AAEA,QAAMM,aAAa,GAAG,IAAIC,SAAJ,CAAc,OAAOC,OAAP,EAAgBC,QAAhB,KAA6B;AAC/D,UAAMpT,OAAO,GAAG;AACdqT,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,IAAI,EAAEH,OAFQ;AAGdT,MAAAA,KAHc;AAIda,MAAAA,OAAO,EAAE/qB,MAAM,CAACC,MAAPD,CACP;AACE,wBAAgB;AADlB,OADOA,EAIP4pB,WAAW,IAAI,EAJR5pB,EAKPgrB,mBALOhrB;AAJK,KAAhB;;AAaA,QAAI;AACF,UAAIirB,yBAAyB,GAAG,CAAhC;AACA,UAAIC,GAAJ;AACA,UAAIC,QAAQ,GAAG,GAAf;;AACA,eAAS;AACP,YAAIhB,mBAAJ,EAAyB;AACvBe,UAAAA,GAAG,GAAG,MAAMf,mBAAmB,CAAC3H,GAAD,EAAMhL,OAAN,CAA/B0T;AACD,SAFD,MAEO;AACLA,UAAAA,GAAG,GAAG,MAAMhJ,KAAK,CAACM,GAAD,EAAMhL,OAAN,CAAjB0T;AACF;;AAEA,YAAIA,GAAG,CAACnT,MAAJmT,KAAe;AAAG;AAAtB,UAAgD;AAC9C;AACF;;AACA,YAAInB,uBAAuB,KAAK,IAAhC,EAAsC;AACpC;AACF;;AACAkB,QAAAA,yBAAyB,IAAI,CAA7BA;;AACA,YAAIA,yBAAyB,KAAK,CAAlC,EAAqC;AACnC;AACF;;AACAlY,QAAAA,OAAO,CAACqY,GAARrY,CACG,yBAAwBmY,GAAG,CAACnT,MAAUmT,IAAAA,GAAG,CAACG,UAA+BF,qBAAAA,QAAS,aADrFpY;AAGA,cAAMqF,KAAK,CAAC+S,QAAD,CAAX;AACAA,QAAAA,QAAQ,IAAI,CAAZA;AACF;;AAEA,YAAMG,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAJJ,EAAnB;;AACA,UAAIA,GAAG,CAACK,EAAR,EAAY;AACVX,QAAAA,QAAQ,CAAC,IAAD,EAAOU,IAAP,CAARV;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAAC,IAAI9pB,KAAJ,CAAW,GAAEoqB,GAAG,CAACnT,MAAUmT,IAAAA,GAAG,CAACG,UAAW,KAAIC,IAAK,EAAnD,CAAD,CAARV;AACF;AACD,KAlCD,CAkCE,OAAO/mB,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAY/C,KAAnB,EAA0B8pB,QAAQ,CAAC/mB,GAAD,CAAR+mB;AAC5B;AACD,GAnDqB,EAmDnB,EAnDmB,CAAtB;AAqDA,SAAOH,aAAP;AACF;;AAEA,SAASe,gBAAT,CAA0BC,MAA1B,EAAyD;AACvD,SAAO,CAACZ,MAAD,EAAS9e,IAAT,KAAkB;AACvB,WAAO,IAAIuM,OAAJ,CAAY,CAACC,OAAD,EAAU0K,MAAV,KAAqB;AACtCwI,MAAAA,MAAM,CAACd,OAAPc,CAAeZ,MAAfY,EAAuB1f,IAAvB0f,EAA6B,CAAC5nB,GAAD,EAAWsjB,QAAX,KAA6B;AACxD,YAAItjB,GAAJ,EAAS;AACPof,UAAAA,MAAM,CAACpf,GAAD,CAANof;AACA;AACF;;AACA1K,QAAAA,OAAO,CAAC4O,QAAD,CAAP5O;AACD,OANDkT;AAOD,KARM,CAAP;AASD,GAVD;AAWF;;AAEA,SAASC,qBAAT,CAA+BD,MAA/B,EAAmE;AACjE,SAAQE,QAAqB,IAAK;AAChC,WAAO,IAAIrT,OAAJ,CAAY,CAACC,OAAD,EAAU0K,MAAV,KAAqB;AACtC;AACA,UAAI0I,QAAQ,CAAC9qB,MAAT8qB,KAAoB,CAAxB,EAA2BpT,OAAO,CAAC,EAAD,CAAPA;AAE3B,YAAMqT,KAAK,GAAGD,QAAQ,CAAC5qB,GAAT4qB,CAAc/O,MAAiB,IAAK;AAChD,eAAO6O,MAAM,CAACd,OAAPc,CAAe7O,MAAM,CAACiP,UAAtBJ,EAAkC7O,MAAM,CAAC7Q,IAAzC0f,CAAP;AACD,OAFaE,CAAd;AAIAF,MAAAA,MAAM,CAACd,OAAPc,CAAeG,KAAfH,EAAsB,CAAC5nB,GAAD,EAAWsjB,QAAX,KAA6B;AACjD,YAAItjB,GAAJ,EAAS;AACPof,UAAAA,MAAM,CAACpf,GAAD,CAANof;AACA;AACF;;AACA1K,QAAAA,OAAO,CAAC4O,QAAD,CAAP5O;AACD,OANDkT;AAOD,KAfM,CAAP;AAgBD,GAjBD;AAkBF;AAEA;AACA;AACA;;;AACA,MAAMK,6BAA6B,GAAGnF,aAAa,CAACS,0BAAD,CAAnD;AAEA;AACA;AACA;;AACA,MAAM2E,yBAAyB,GAAGpF,aAAa,CAACuB,sBAAD,CAA/C;AAEA;AACA;AACA;;AACA,MAAM8D,oCAAoC,GAAGrF,aAAa,CACxDqB,iCADwD,CAA1D;AAIA;AACA;AACA;;AACA,MAAMiE,qBAAqB,GAAGtF,aAAa,CAAC0B,kBAAD,CAA3C;AAEA;AACA;AACA;;AACA,MAAM6D,yBAAyB,GAAGvF,aAAa,CAAC+B,sBAAD,CAA/C;AAEA;AACA;AACA;;AACA,MAAMyD,0BAA0B,GAAGxF,aAAa,CAACiC,uBAAD,CAAhD;AAEA;AACA;AACA;;AACA,MAAMwD,aAAa,GAAGzF,aAAa,CAACK,MAAM,EAAP,CAAnC;AAEA;AACA;AACA;;AAYA;AACA;AACA;;AACA,MAAMqF,kBAAkB,GAAGvF,uBAAuB,CAChDV,IAAI,CAAC;AACH+B,EAAAA,KAAK,EAAEnB,MAAM,EADV;AAEHsF,EAAAA,WAAW,EAAEtF,MAAM,EAFhB;AAGHuF,EAAAA,cAAc,EAAEvF,MAAM,EAHnB;AAIHwF,EAAAA,sBAAsB,EAAEhO,KAAK,CAACyG,mBAAD;AAJ1B,CAAD,CAD4C,CAAlD;AASA;AACA;AACA;AACA;;AAYA;AACA;AACA;;AACA,MAAMwH,iBAAiB,GAAGrG,IAAI,CAAC;AAC7ByB,EAAAA,MAAM,EAAEzC,MAAM,EADe;AAE7BsH,EAAAA,QAAQ,EAAE/E,QAAQ,CAACX,MAAM,EAAP,CAFW;AAG7B2F,EAAAA,QAAQ,EAAE3F,MAAM,EAHa;AAI7B4F,EAAAA,cAAc,EAAEpG,QAAQ,CAACpB,MAAM,EAAP;AAJK,CAAD,CAA9B;AAOA;AACA;AACA;;AAcA;AACA;AACA;;AACA,MAAMyH,6BAA6B,GAAG/F,uBAAuB,CAC3DtI,KAAK,CACH4H,IAAI,CAAC;AACHziB,EAAAA,OAAO,EAAEshB,mBADN;AAEH4C,EAAAA,MAAM,EAAEzC,MAAM,EAFX;AAGHsH,EAAAA,QAAQ,EAAE/E,QAAQ,CAACX,MAAM,EAAP,CAHf;AAIH2F,EAAAA,QAAQ,EAAE3F,MAAM,EAJb;AAKH4F,EAAAA,cAAc,EAAEpG,QAAQ,CAACpB,MAAM,EAAP;AALrB,CAAD,CADD,CADsD,CAA7D;AAYA;AACA;AACA;;AACA,MAAM0H,uBAAuB,GAAGhG,uBAAuB,CACrDtI,KAAK,CACH4H,IAAI,CAAC;AACHpiB,EAAAA,MAAM,EAAEihB,mBADL;AAEHjZ,EAAAA,OAAO,EAAEoa,IAAI,CAAC;AACZhI,IAAAA,UAAU,EAAEuK,OAAO,EADP;AAEZrK,IAAAA,KAAK,EAAE2G,mBAFK;AAGZ3K,IAAAA,QAAQ,EAAE0M,MAAM,EAHJ;AAIZ1mB,IAAAA,IAAI,EAAEklB,wBAJM;AAKZ2D,IAAAA,SAAS,EAAEnC,MAAM;AALL,GAAD;AAFV,CAAD,CADD,CADgD,CAAvD;AAeA,MAAM+F,uBAAuB,GAAG3G,IAAI,CAAC;AACnCrI,EAAAA,OAAO,EAAEqH,MAAM,EADoB;AAEnC4H,EAAAA,MAAM,EAAEzG,OAAO,EAFoB;AAGnChM,EAAAA,KAAK,EAAEyM,MAAM;AAHsB,CAAD,CAApC;AAMA;AACA;AACA;;AACA,MAAMiG,6BAA6B,GAAGnG,uBAAuB,CAC3DtI,KAAK,CACH4H,IAAI,CAAC;AACHpiB,EAAAA,MAAM,EAAEihB,mBADL;AAEHjZ,EAAAA,OAAO,EAAEoa,IAAI,CAAC;AACZhI,IAAAA,UAAU,EAAEuK,OAAO,EADP;AAEZrK,IAAAA,KAAK,EAAE2G,mBAFK;AAGZ3K,IAAAA,QAAQ,EAAE0M,MAAM,EAHJ;AAIZ1mB,IAAAA,IAAI,EAAEysB,uBAJM;AAKZ5D,IAAAA,SAAS,EAAEnC,MAAM;AALL,GAAD;AAFV,CAAD,CADD,CADsD,CAA7D;AAeA;AACA;AACA;;AAMA;AACA;AACA;;AACA,MAAMkG,2BAA2B,GAAGpG,uBAAuB,CACzDtI,KAAK,CACH4H,IAAI,CAAC;AACH9L,EAAAA,QAAQ,EAAE0M,MAAM,EADb;AAEHrjB,EAAAA,OAAO,EAAEshB;AAFN,CAAD,CADD,CADoD,CAA3D;AASA;AACA;AACA;;AACA,MAAMkI,iBAAiB,GAAG/G,IAAI,CAAC;AAC7BhI,EAAAA,UAAU,EAAEuK,OAAO,EADU;AAE7BrK,EAAAA,KAAK,EAAE2G,mBAFsB;AAG7B3K,EAAAA,QAAQ,EAAE0M,MAAM,EAHa;AAI7B1mB,EAAAA,IAAI,EAAEklB,wBAJuB;AAK7B2D,EAAAA,SAAS,EAAEnC,MAAM;AALY,CAAD,CAA9B;AAQA;AACA;AACA;;AACA,MAAMoG,sBAAsB,GAAGhH,IAAI,CAAC;AAClCpiB,EAAAA,MAAM,EAAEihB,mBAD0B;AAElCjZ,EAAAA,OAAO,EAAEmhB;AAFyB,CAAD,CAAnC;AAKA,MAAME,sBAAsB,GAAGnI,MAAM,CACnCiB,KAAK,CAAC,CAAChB,QAAQ,CAAC5lB,MAAD,CAAT,EAAmBwtB,uBAAnB,CAAD,CAD8B,EAEnC5G,KAAK,CAAC,CAACd,oBAAD,EAAuB0H,uBAAvB,CAAD,CAF8B,EAGnC1rB,KAAK,IAAI;AACP,MAAI6G,KAAK,CAACC,OAAND,CAAc7G,KAAd6G,CAAJ,EAA0B;AACxB,WAAO2e,MAAM,CAACxlB,KAAD,EAAQmkB,wBAAR,CAAb;AACD,GAFD,MAEO;AACL,WAAOnkB,KAAP;AACF;AACD,CATkC,CAArC;AAYA;AACA;AACA;;AACA,MAAMisB,uBAAuB,GAAGlH,IAAI,CAAC;AACnChI,EAAAA,UAAU,EAAEuK,OAAO,EADgB;AAEnCrK,EAAAA,KAAK,EAAE2G,mBAF4B;AAGnC3K,EAAAA,QAAQ,EAAE0M,MAAM,EAHmB;AAInC1mB,EAAAA,IAAI,EAAE+sB,sBAJ6B;AAKnClE,EAAAA,SAAS,EAAEnC,MAAM;AALkB,CAAD,CAApC;AAQA,MAAMuG,4BAA4B,GAAGnH,IAAI,CAAC;AACxCpiB,EAAAA,MAAM,EAAEihB,mBADgC;AAExCjZ,EAAAA,OAAO,EAAEshB;AAF+B,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,MAAME,qBAAqB,GAAGpH,IAAI,CAAC;AACjCtb,EAAAA,KAAK,EAAEqb,KAAK,CAAC,CACXZ,OAAO,CAAC,QAAD,CADI,EAEXA,OAAO,CAAC,UAAD,CAFI,EAGXA,OAAO,CAAC,YAAD,CAHI,EAIXA,OAAO,CAAC,cAAD,CAJI,CAAD,CADqB;AAOjCkI,EAAAA,MAAM,EAAEzG,MAAM,EAPmB;AAQjC0G,EAAAA,QAAQ,EAAE1G,MAAM;AARiB,CAAD,CAAlC;AAWA;AACA;AACA;;AAEA,MAAM2G,0CAA0C,GAAGhH,aAAa,CAC9DnI,KAAK,CACH4H,IAAI,CAAC;AACHxhB,EAAAA,SAAS,EAAEwgB,MAAM,EADd;AAEHtF,EAAAA,IAAI,EAAEkH,MAAM,EAFT;AAGHnjB,EAAAA,GAAG,EAAEilB,sBAHF;AAIH8E,EAAAA,IAAI,EAAEjG,QAAQ,CAACvC,MAAM,EAAP,CAJX;AAKHyI,EAAAA,SAAS,EAAErH,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT;AALhB,CAAD,CADD,CADyD,CAAhE;AAYA;AACA;AACA;;AACA,MAAM8G,gCAAgC,GAAGnH,aAAa,CACpDnI,KAAK,CACH4H,IAAI,CAAC;AACHxhB,EAAAA,SAAS,EAAEwgB,MAAM,EADd;AAEHtF,EAAAA,IAAI,EAAEkH,MAAM,EAFT;AAGHnjB,EAAAA,GAAG,EAAEilB,sBAHF;AAIH8E,EAAAA,IAAI,EAAEjG,QAAQ,CAACvC,MAAM,EAAP,CAJX;AAKHyI,EAAAA,SAAS,EAAErH,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT;AALhB,CAAD,CADD,CAD+C,CAAtD;AAYA;AACA;AACA;;AACA,MAAM+G,yBAAyB,GAAG3H,IAAI,CAAC;AACrC4H,EAAAA,YAAY,EAAEhH,MAAM,EADiB;AAErCd,EAAAA,MAAM,EAAEe,4BAA4B,CAACkG,iBAAD;AAFC,CAAD,CAAtC;AAKA;AACA;AACA;;AACA,MAAMc,wBAAwB,GAAG7H,IAAI,CAAC;AACpCpiB,EAAAA,MAAM,EAAEihB,mBAD4B;AAEpCjZ,EAAAA,OAAO,EAAEmhB;AAF2B,CAAD,CAArC;AAKA;AACA;AACA;;AACA,MAAMe,gCAAgC,GAAG9H,IAAI,CAAC;AAC5C4H,EAAAA,YAAY,EAAEhH,MAAM,EADwB;AAE5Cd,EAAAA,MAAM,EAAEe,4BAA4B,CAACgH,wBAAD;AAFQ,CAAD,CAA7C;AAKA;AACA;AACA;;AACA,MAAME,cAAc,GAAG/H,IAAI,CAAC;AAC1BgI,EAAAA,MAAM,EAAEpH,MAAM,EADY;AAE1BlH,EAAAA,IAAI,EAAEkH,MAAM,EAFc;AAG1BqH,EAAAA,IAAI,EAAErH,MAAM;AAHc,CAAD,CAA3B;AAMA;AACA;AACA;;AACA,MAAMsH,sBAAsB,GAAGlI,IAAI,CAAC;AAClC4H,EAAAA,YAAY,EAAEhH,MAAM,EADc;AAElCd,EAAAA,MAAM,EAAEiI;AAF0B,CAAD,CAAnC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AACA;AACA;;AACA,MAAMI,gBAAgB,GAAGpI,KAAK,CAAC,CAC7BC,IAAI,CAAC;AACHte,EAAAA,IAAI,EAAEqe,KAAK,CAAC,CACVZ,OAAO,CAAC,oBAAD,CADG,EAEVA,OAAO,CAAC,WAAD,CAFG,EAGVA,OAAO,CAAC,wBAAD,CAHG,EAIVA,OAAO,CAAC,MAAD,CAJG,CAAD,CADR;AAOHzF,EAAAA,IAAI,EAAEkH,MAAM,EAPT;AAQHwH,EAAAA,SAAS,EAAExH,MAAM;AARd,CAAD,CADyB,EAW7BZ,IAAI,CAAC;AACHte,EAAAA,IAAI,EAAEyd,OAAO,CAAC,aAAD,CADV;AAEH6I,EAAAA,MAAM,EAAEpH,MAAM,EAFX;AAGHlH,EAAAA,IAAI,EAAEkH,MAAM,EAHT;AAIHwH,EAAAA,SAAS,EAAExH,MAAM;AAJd,CAAD,CAXyB,EAiB7BZ,IAAI,CAAC;AACHte,EAAAA,IAAI,EAAEyd,OAAO,CAAC,QAAD,CADV;AAEHzF,EAAAA,IAAI,EAAEkH,MAAM,EAFT;AAGHwH,EAAAA,SAAS,EAAExH,MAAM,EAHd;AAIHyH,EAAAA,KAAK,EAAErI,IAAI,CAAC;AACVsI,IAAAA,qBAAqB,EAAE1H,MAAM,EADnB;AAEV2H,IAAAA,yBAAyB,EAAE3H,MAAM,EAFvB;AAGV4H,IAAAA,qBAAqB,EAAE5H,MAAM,EAHnB;AAIV6H,IAAAA,uBAAuB,EAAE7H,MAAM;AAJrB,GAAD;AAJR,CAAD,CAjByB,EA4B7BZ,IAAI,CAAC;AACHte,EAAAA,IAAI,EAAEyd,OAAO,CAAC,MAAD,CADV;AAEHzF,EAAAA,IAAI,EAAEkH,MAAM,EAFT;AAGHwH,EAAAA,SAAS,EAAExH,MAAM,EAHd;AAIHnjB,EAAAA,GAAG,EAAEuhB,MAAM;AAJR,CAAD,CA5ByB,CAAD,CAA9B;AAoCA;AACA;AACA;;AACA,MAAM0J,4BAA4B,GAAG1I,IAAI,CAAC;AACxC4H,EAAAA,YAAY,EAAEhH,MAAM,EADoB;AAExCd,EAAAA,MAAM,EAAEqI;AAFgC,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,MAAMQ,2BAA2B,GAAG3I,IAAI,CAAC;AACvC4H,EAAAA,YAAY,EAAEhH,MAAM,EADmB;AAEvCd,EAAAA,MAAM,EAAEe,4BAA4B,CAClCd,KAAK,CAAC,CAAC4C,qBAAD,EAAwBC,uBAAxB,CAAD,CAD6B;AAFG,CAAD,CAAxC;AAOA;AACA;AACA;;AACA,MAAMgG,sBAAsB,GAAG5I,IAAI,CAAC;AAClC4H,EAAAA,YAAY,EAAEhH,MAAM,EADc;AAElCd,EAAAA,MAAM,EAAEc,MAAM;AAFoB,CAAD,CAAnC;AAKA,MAAMiI,iBAAiB,GAAG7I,IAAI,CAAC;AAC7BpiB,EAAAA,MAAM,EAAEohB,MAAM,EADe;AAE7B8J,EAAAA,MAAM,EAAEvH,QAAQ,CAACvC,MAAM,EAAP,CAFa;AAG7B+J,EAAAA,GAAG,EAAExH,QAAQ,CAACvC,MAAM,EAAP,CAHgB;AAI7B3C,EAAAA,GAAG,EAAEkF,QAAQ,CAACvC,MAAM,EAAP,CAJgB;AAK7BnZ,EAAAA,OAAO,EAAE0b,QAAQ,CAACvC,MAAM,EAAP;AALY,CAAD,CAA9B;AAQA,MAAMgK,qBAAqB,GAAGhJ,IAAI,CAAC;AACjCiJ,EAAAA,UAAU,EAAEjK,MAAM,EADe;AAEjCkK,EAAAA,UAAU,EAAElK,MAAM,EAFe;AAGjCmK,EAAAA,cAAc,EAAEvI,MAAM,EAHW;AAIjCwI,EAAAA,gBAAgB,EAAE7G,OAAO,EAJQ;AAKjC8G,EAAAA,YAAY,EAAEjR,KAAK,CAAC8G,KAAK,CAAC,CAAC0B,MAAM,EAAP,EAAWA,MAAM,EAAjB,EAAqBA,MAAM,EAA3B,CAAD,CAAN,CALc;AAMjCe,EAAAA,UAAU,EAAEf,MAAM,EANe;AAOjC0I,EAAAA,QAAQ,EAAE1I,MAAM,EAPiB;AAQjC2I,EAAAA,QAAQ,EAAEhI,QAAQ,CAACX,MAAM,EAAP;AARe,CAAD,CAAlC;AAWA;AACA;AACA;;AACA,MAAM4I,eAAe,GAAGjJ,aAAa,CACnCP,IAAI,CAAC;AACHyJ,EAAAA,OAAO,EAAErR,KAAK,CAAC4Q,qBAAD,CADX;AAEHU,EAAAA,UAAU,EAAEtR,KAAK,CAAC4Q,qBAAD;AAFd,CAAD,CAD+B,CAArC;AAOA,MAAMW,kBAAkB,GAAG5J,KAAK,CAAC,CAC/BZ,OAAO,CAAC,WAAD,CADwB,EAE/BA,OAAO,CAAC,WAAD,CAFwB,EAG/BA,OAAO,CAAC,WAAD,CAHwB,CAAD,CAAhC;AAMA,MAAMyK,uBAAuB,GAAG5J,IAAI,CAAC;AACnCtG,EAAAA,IAAI,EAAEkH,MAAM,EADuB;AAEnCiJ,EAAAA,aAAa,EAAEtI,QAAQ,CAACX,MAAM,EAAP,CAFY;AAGnCnjB,EAAAA,GAAG,EAAEilB,sBAH8B;AAInCoH,EAAAA,kBAAkB,EAAE1J,QAAQ,CAACuJ,kBAAD;AAJO,CAAD,CAApC;AAOA;AACA;AACA;;AACA,MAAMI,6BAA6B,GAAGrJ,uBAAuB,CAC3DtI,KAAK,CAACmJ,QAAQ,CAACqI,uBAAD,CAAT,CADsD,CAA7D;AAIA;AACA;AACA;;AACA,MAAMI,0CAA0C,GAAGzJ,aAAa,CAACK,MAAM,EAAP,CAAhE;AAEA,MAAMqJ,wBAAwB,GAAGjK,IAAI,CAAC;AACpClb,EAAAA,UAAU,EAAE+Z,mBADwB;AAEpCta,EAAAA,eAAe,EAAE6T,KAAK,CAACwI,MAAM,EAAP,CAFc;AAGpChc,EAAAA,eAAe,EAAEwT,KAAK,CAACwI,MAAM,EAAP;AAHc,CAAD,CAArC;AAMA,MAAMsJ,0BAA0B,GAAGlK,IAAI,CAAC;AACtCvU,EAAAA,UAAU,EAAE2M,KAAK,CAAC4G,MAAM,EAAP,CADqB;AAEtClmB,EAAAA,OAAO,EAAEknB,IAAI,CAAC;AACZxa,IAAAA,WAAW,EAAE4S,KAAK,CAAC4G,MAAM,EAAP,CADN;AAEZhb,IAAAA,MAAM,EAAEgc,IAAI,CAAC;AACX/b,MAAAA,qBAAqB,EAAE2c,MAAM,EADlB;AAEX1c,MAAAA,yBAAyB,EAAE0c,MAAM,EAFtB;AAGXzc,MAAAA,2BAA2B,EAAEyc,MAAM;AAHxB,KAAD,CAFA;AAOZjhB,IAAAA,YAAY,EAAEyY,KAAK,CACjB4H,IAAI,CAAC;AACHja,MAAAA,QAAQ,EAAEqS,KAAK,CAACwI,MAAM,EAAP,CADZ;AAEH1mB,MAAAA,IAAI,EAAE8kB,MAAM,EAFT;AAGH/e,MAAAA,cAAc,EAAE2gB,MAAM;AAHnB,KAAD,CADa,CAPP;AAcZnb,IAAAA,eAAe,EAAEuZ,MAAM,EAdX;AAeZhZ,IAAAA,mBAAmB,EAAEoa,QAAQ,CAAChI,KAAK,CAAC6R,wBAAD,CAAN;AAfjB,GAAD;AAFyB,CAAD,CAAvC;AAqBA,MAAME,mBAAmB,GAAGnK,IAAI,CAAC;AAC/BpiB,EAAAA,MAAM,EAAEihB,mBADuB;AAE/BpQ,EAAAA,MAAM,EAAE8T,OAAO,EAFgB;AAG/BnjB,EAAAA,QAAQ,EAAEmjB,OAAO,EAHc;AAI/B6H,EAAAA,MAAM,EAAEhK,QAAQ,CAACL,KAAK,CAAC,CAACZ,OAAO,CAAC,aAAD,CAAR,EAAyBA,OAAO,CAAC,aAAD,CAAhC,CAAD,CAAN;AAJe,CAAD,CAAhC;AAOA,MAAMkL,sCAAsC,GAAGrK,IAAI,CAAC;AAClDxa,EAAAA,WAAW,EAAE4S,KAAK,CAAC+R,mBAAD,CADgC;AAElD1e,EAAAA,UAAU,EAAE2M,KAAK,CAAC4G,MAAM,EAAP;AAFiC,CAAD,CAAnD;AAKA,MAAMsL,uBAAuB,GAAGtK,IAAI,CAAC;AACnC4G,EAAAA,MAAM,EAAEzG,OAAO,EADoB;AAEnCxI,EAAAA,OAAO,EAAEqH,MAAM,EAFoB;AAGnCpiB,EAAAA,SAAS,EAAEiiB;AAHwB,CAAD,CAApC;AAMA,MAAM0L,oBAAoB,GAAGvK,IAAI,CAAC;AAChCja,EAAAA,QAAQ,EAAEqS,KAAK,CAACyG,mBAAD,CADiB;AAEhC3kB,EAAAA,IAAI,EAAE8kB,MAAM,EAFoB;AAGhCpiB,EAAAA,SAAS,EAAEiiB;AAHqB,CAAD,CAAjC;AAMA,MAAM2L,iBAAiB,GAAGzK,KAAK,CAAC,CAC9BwK,oBAD8B,EAE9BD,uBAF8B,CAAD,CAA/B;AAKA,MAAMG,wBAAwB,GAAG1K,KAAK,CAAC,CACrCC,IAAI,CAAC;AACH4G,EAAAA,MAAM,EAAEzG,OAAO,EADZ;AAEHxI,EAAAA,OAAO,EAAEqH,MAAM,EAFZ;AAGHpiB,EAAAA,SAAS,EAAEoiB,MAAM;AAHd,CAAD,CADiC,EAMrCgB,IAAI,CAAC;AACHja,EAAAA,QAAQ,EAAEqS,KAAK,CAAC4G,MAAM,EAAP,CADZ;AAEH9kB,EAAAA,IAAI,EAAE8kB,MAAM,EAFT;AAGHpiB,EAAAA,SAAS,EAAEoiB,MAAM;AAHd,CAAD,CANiC,CAAD,CAAtC;AAaA,MAAM0L,sBAAsB,GAAG5L,MAAM,CACnC0L,iBADmC,EAEnCC,wBAFmC,EAGnCxvB,KAAK,IAAI;AACP,MAAI,cAAcA,KAAlB,EAAyB;AACvB,WAAOwlB,MAAM,CAACxlB,KAAD,EAAQsvB,oBAAR,CAAb;AACD,GAFD,MAEO;AACL,WAAO9J,MAAM,CAACxlB,KAAD,EAAQqvB,uBAAR,CAAb;AACF;AACD,CATkC,CAArC;AAYA;AACA;AACA;;AACA,MAAMK,gCAAgC,GAAG3K,IAAI,CAAC;AAC5CvU,EAAAA,UAAU,EAAE2M,KAAK,CAAC4G,MAAM,EAAP,CAD2B;AAE5ClmB,EAAAA,OAAO,EAAEknB,IAAI,CAAC;AACZxa,IAAAA,WAAW,EAAE4S,KAAK,CAAC+R,mBAAD,CADN;AAEZxqB,IAAAA,YAAY,EAAEyY,KAAK,CAACsS,sBAAD,CAFP;AAGZjlB,IAAAA,eAAe,EAAEuZ,MAAM,EAHX;AAIZhZ,IAAAA,mBAAmB,EAAEoa,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAAC6R,wBAAD,CAAN,CAAT;AAJjB,GAAD;AAF+B,CAAD,CAA7C;AAUA,MAAMW,kBAAkB,GAAG5K,IAAI,CAAC;AAC9B6K,EAAAA,YAAY,EAAEjK,MAAM,EADU;AAE9BkK,EAAAA,IAAI,EAAE9L,MAAM,EAFkB;AAG9B9G,EAAAA,KAAK,EAAEkI,QAAQ,CAACpB,MAAM,EAAP,CAHe;AAI9B+L,EAAAA,aAAa,EAAE1E;AAJe,CAAD,CAA/B;AAOA,MAAM2E,qBAAqB,GAAGhL,IAAI,CAAC;AACjC5gB,EAAAA,QAAQ,EAAEgZ,KAAK,CAACyG,mBAAD,CADkB;AAEjCxf,EAAAA,QAAQ,EAAE+Y,KAAK,CAACyG,mBAAD;AAFkB,CAAD,CAAlC;AAKA;AACA;AACA;;AACA,MAAMoM,8BAA8B,GAAGjL,IAAI,CAAC;AAC1CviB,EAAAA,GAAG,EAAEilB,sBADqC;AAE1CwI,EAAAA,GAAG,EAAEtK,MAAM,EAF+B;AAG1CuK,EAAAA,iBAAiB,EAAE/K,QAAQ,CACzBmB,QAAQ,CACNnJ,KAAK,CACH4H,IAAI,CAAC;AACHzgB,IAAAA,KAAK,EAAEqhB,MAAM,EADV;AAEHjhB,IAAAA,YAAY,EAAEyY,KAAK,CACjB4H,IAAI,CAAC;AACHja,MAAAA,QAAQ,EAAEqS,KAAK,CAACwI,MAAM,EAAP,CADZ;AAEH1mB,MAAAA,IAAI,EAAE8kB,MAAM,EAFT;AAGH/e,MAAAA,cAAc,EAAE2gB,MAAM;AAHnB,KAAD,CADa;AAFhB,GAAD,CADD,CADC,CADiB,CAHe;AAmB1CwK,EAAAA,WAAW,EAAEhT,KAAK,CAACwI,MAAM,EAAP,CAnBwB;AAoB1CyK,EAAAA,YAAY,EAAEjT,KAAK,CAACwI,MAAM,EAAP,CApBuB;AAqB1C0K,EAAAA,WAAW,EAAElL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAAC4G,MAAM,EAAP,CAAN,CAAT,CArBqB;AAsB1CuM,EAAAA,gBAAgB,EAAEnL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAACwS,kBAAD,CAAN,CAAT,CAtBgB;AAuB1CY,EAAAA,iBAAiB,EAAEpL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAACwS,kBAAD,CAAN,CAAT,CAvBe;AAwB1Ca,EAAAA,eAAe,EAAErL,QAAQ,CAAC4K,qBAAD,CAxBiB;AAyB1CU,EAAAA,oBAAoB,EAAEtL,QAAQ,CAACQ,MAAM,EAAP;AAzBY,CAAD,CAA3C;AA4BA;AACA;AACA;;AACA,MAAM+K,oCAAoC,GAAG3L,IAAI,CAAC;AAChDviB,EAAAA,GAAG,EAAEilB,sBAD2C;AAEhDwI,EAAAA,GAAG,EAAEtK,MAAM,EAFqC;AAGhDuK,EAAAA,iBAAiB,EAAE/K,QAAQ,CACzBmB,QAAQ,CACNnJ,KAAK,CACH4H,IAAI,CAAC;AACHzgB,IAAAA,KAAK,EAAEqhB,MAAM,EADV;AAEHjhB,IAAAA,YAAY,EAAEyY,KAAK,CAACsS,sBAAD;AAFhB,GAAD,CADD,CADC,CADiB,CAHqB;AAahDU,EAAAA,WAAW,EAAEhT,KAAK,CAACwI,MAAM,EAAP,CAb8B;AAchDyK,EAAAA,YAAY,EAAEjT,KAAK,CAACwI,MAAM,EAAP,CAd6B;AAehD0K,EAAAA,WAAW,EAAElL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAAC4G,MAAM,EAAP,CAAN,CAAT,CAf2B;AAgBhDuM,EAAAA,gBAAgB,EAAEnL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAACwS,kBAAD,CAAN,CAAT,CAhBsB;AAiBhDY,EAAAA,iBAAiB,EAAEpL,QAAQ,CAACmB,QAAQ,CAACnJ,KAAK,CAACwS,kBAAD,CAAN,CAAT,CAjBqB;AAkBhDa,EAAAA,eAAe,EAAErL,QAAQ,CAAC4K,qBAAD,CAlBuB;AAmBhDU,EAAAA,oBAAoB,EAAEtL,QAAQ,CAACQ,MAAM,EAAP;AAnBkB,CAAD,CAAjD;AAsBA,MAAMgL,wBAAwB,GAAG7L,KAAK,CAAC,CAACZ,OAAO,CAAC,CAAD,CAAR,EAAaA,OAAO,CAAC,QAAD,CAApB,CAAD,CAAtC;AAEA;;AACA,MAAM0M,aAAa,GAAG7L,IAAI,CAAC;AACzBpiB,EAAAA,MAAM,EAAEohB,MAAM,EADW;AAEzB9K,EAAAA,QAAQ,EAAE0M,MAAM,EAFS;AAGzBc,EAAAA,WAAW,EAAEH,QAAQ,CAACX,MAAM,EAAP,CAHI;AAIzBkL,EAAAA,UAAU,EAAEvK,QAAQ,CAACvC,MAAM,EAAP,CAJK;AAKzB2C,EAAAA,UAAU,EAAEvB,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT;AALK,CAAD,CAA1B;AAQA;AACA;AACA;;AACA,MAAMmL,iBAAiB,GAAGxL,aAAa,CACrCgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHvI,EAAAA,YAAY,EAAED,KAAK,CACjB4H,IAAI,CAAC;AACHjY,IAAAA,WAAW,EAAEmiB,0BADV;AAEH/pB,IAAAA,IAAI,EAAEohB,QAAQ,CAAC0J,8BAAD,CAFX;AAGHplB,IAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AAHd,GAAD,CADa,CAJhB;AAWHM,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAXd;AAYHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CAZhB;AAaHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AAblB,CAAD,CADE,CAD6B,CAAvC;AAoBA;AACA;AACA;;AACA,MAAMuL,yBAAyB,GAAG5L,aAAa,CAC7CgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHsL,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAJd;AAKHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CALhB;AAMHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AANlB,CAAD,CADE,CADqC,CAA/C;AAaA;AACA;AACA;;AACA,MAAMwL,6BAA6B,GAAG7L,aAAa,CACjDgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHvI,EAAAA,YAAY,EAAED,KAAK,CACjB4H,IAAI,CAAC;AACHjY,IAAAA,WAAW,EAAEsiB,sCADV;AAEHlqB,IAAAA,IAAI,EAAEohB,QAAQ,CAAC0J,8BAAD,CAFX;AAGHplB,IAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AAHd,GAAD,CADa,CAJhB;AAWHM,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAXd;AAYHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CAZhB;AAaHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AAblB,CAAD,CADE,CADyC,CAAnD;AAoBA;AACA;AACA;;AACA,MAAMyL,uBAAuB,GAAG9L,aAAa,CAC3CgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHvI,EAAAA,YAAY,EAAED,KAAK,CACjB4H,IAAI,CAAC;AACHjY,IAAAA,WAAW,EAAE4iB,gCADV;AAEHxqB,IAAAA,IAAI,EAAEohB,QAAQ,CAACoK,oCAAD,CAFX;AAGH9lB,IAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AAHd,GAAD,CADa,CAJhB;AAWHM,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAXd;AAYHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CAZhB;AAaHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AAblB,CAAD,CADE,CADmC,CAA7C;AAoBA;AACA;AACA;;AACA,MAAM0L,mCAAmC,GAAG/L,aAAa,CACvDgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHvI,EAAAA,YAAY,EAAED,KAAK,CACjB4H,IAAI,CAAC;AACHjY,IAAAA,WAAW,EAAEsiB,sCADV;AAEHlqB,IAAAA,IAAI,EAAEohB,QAAQ,CAACoK,oCAAD,CAFX;AAGH9lB,IAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AAHd,GAAD,CADa,CAJhB;AAWHM,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAXd;AAYHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CAZhB;AAaHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AAblB,CAAD,CADE,CAD+C,CAAzD;AAoBA;AACA;AACA;;AACA,MAAM2L,+BAA+B,GAAGhM,aAAa,CACnDgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHsL,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAJd;AAKHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP,CALhB;AAMHwB,EAAAA,WAAW,EAAEb,QAAQ,CAACX,MAAM,EAAP;AANlB,CAAD,CADE,CAD2C,CAArD;AAaA;AACA;AACA;AACA;AACA;;AACA,MAAM4L,0BAA0B,GAAGjM,aAAa,CAC9CgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHvI,EAAAA,YAAY,EAAED,KAAK,CACjB4H,IAAI,CAAC;AACHjY,IAAAA,WAAW,EAAEmiB,0BADV;AAEH/pB,IAAAA,IAAI,EAAEohB,QAAQ,CAAC0J,8BAAD;AAFX,GAAD,CADa,CAJhB;AAUHiB,EAAAA,OAAO,EAAE9L,QAAQ,CAAChI,KAAK,CAACyT,aAAD,CAAN,CAVd;AAWHpE,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP;AAXhB,CAAD,CADE,CADsC,CAAhD;AAkBA;AACA;AACA;;AACA,MAAM6L,2BAA2B,GAAGlM,aAAa,CAC/CgB,QAAQ,CACNvB,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHgN,EAAAA,iBAAiB,EAAEhN,MAAM,EAFtB;AAGHiN,EAAAA,UAAU,EAAErL,MAAM,EAHf;AAIHnV,EAAAA,UAAU,EAAE2M,KAAK,CAAC4G,MAAM,EAAP,CAJd;AAKHyI,EAAAA,SAAS,EAAElG,QAAQ,CAACX,MAAM,EAAP;AALhB,CAAD,CADE,CADuC,CAAjD;AAYA;AACA;AACA;;AACA,MAAM8L,uBAAuB,GAAGnM,aAAa,CAC3CgB,QAAQ,CACNvB,IAAI,CAAC;AACHtG,EAAAA,IAAI,EAAEkH,MAAM,EADT;AAEHzgB,EAAAA,IAAI,EAAE8qB,8BAFH;AAGHxD,EAAAA,SAAS,EAAErH,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT,CAHhB;AAIH7Y,EAAAA,WAAW,EAAEmiB,0BAJV;AAKHrkB,EAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AALd,CAAD,CADE,CADmC,CAA7C;AAYA;AACA;AACA;;AACA,MAAMe,6BAA6B,GAAGpM,aAAa,CACjDgB,QAAQ,CACNvB,IAAI,CAAC;AACHtG,EAAAA,IAAI,EAAEkH,MAAM,EADT;AAEH7Y,EAAAA,WAAW,EAAE4iB,gCAFV;AAGHxqB,EAAAA,IAAI,EAAEohB,QAAQ,CAACoK,oCAAD,CAHX;AAIHlE,EAAAA,SAAS,EAAErH,QAAQ,CAACmB,QAAQ,CAACX,MAAM,EAAP,CAAT,CAJhB;AAKH/a,EAAAA,OAAO,EAAEua,QAAQ,CAACwL,wBAAD;AALd,CAAD,CADE,CADyC,CAAnD;AAYA;AACA;AACA;AACA;AACA;;AACA,MAAMgB,qCAAqC,GAAGlM,uBAAuB,CACnEV,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHjM,EAAAA,aAAa,EAAEiN,IAAI,CAAC;AAClB6M,IAAAA,oBAAoB,EAAEjM,MAAM;AADV,GAAD;AAFhB,CAAD,CAD+D,CAArE;AASA;AACA;AACA;;AACA,MAAMkM,2BAA2B,GAAGpM,uBAAuB,CACzDV,IAAI,CAAC;AACH7T,EAAAA,SAAS,EAAE6S,MAAM,EADd;AAEHrT,EAAAA,oBAAoB,EAAEiV,MAAM;AAFzB,CAAD,CADqD,CAA3D;AAOA,MAAMmM,gBAAgB,GAAG/M,IAAI,CAAC;AAC5BtG,EAAAA,IAAI,EAAEkH,MAAM,EADgB;AAE5BoM,EAAAA,eAAe,EAAEpM,MAAM,EAFK;AAG5BqM,EAAAA,QAAQ,EAAErM,MAAM,EAHY;AAI5BsM,EAAAA,gBAAgB,EAAEtM,MAAM;AAJI,CAAD,CAA7B;AAOA;AACA;AACA;;AACA,MAAMuM,oCAAoC,GAAG5M,aAAa,CACxDnI,KAAK,CAAC2U,gBAAD,CADmD,CAA1D;AAIA;AACA;AACA;;AACA,MAAMK,yBAAyB,GAAG1M,uBAAuB,CACvDa,QAAQ,CACNvB,IAAI,CAAC;AACHjN,EAAAA,aAAa,EAAEiN,IAAI,CAAC;AAClB6M,IAAAA,oBAAoB,EAAEjM,MAAM;AADV,GAAD;AADhB,CAAD,CADE,CAD+C,CAAzD;AAUA;AACA;AACA;;AACA,MAAMyM,uBAAuB,GAAG9M,aAAa,CAACvB,MAAM,EAAP,CAA7C;AAEA;AACA;AACA;;AACA,MAAMsO,wBAAwB,GAAG/M,aAAa,CAACvB,MAAM,EAAP,CAA9C;AAEA;AACA;AACA;;AAiQA;AACA;AACA;;AACA,MAAMuO,UAAU,GAAGvN,IAAI,CAAC;AACtBviB,EAAAA,GAAG,EAAEilB,sBADiB;AAEtBnI,EAAAA,IAAI,EAAEnC,KAAK,CAAC4G,MAAM,EAAP,CAFW;AAGtBxgB,EAAAA,SAAS,EAAEwgB,MAAM;AAHK,CAAD,CAAvB;AAMA;AACA;AACA;;AAOA;AACA;AACA;;AACA,MAAMwO,sBAAsB,GAAGxN,IAAI,CAAC;AAClCF,EAAAA,MAAM,EAAEe,4BAA4B,CAAC0M,UAAD,CADF;AAElC3F,EAAAA,YAAY,EAAEhH,MAAM;AAFc,CAAD,CAAnC;AAKA;AACA;AACA;;AAmHA;;AACA,MAAMgE,mBAAmB,GAAG;AAC1B,mBAAkB,MAAK6I,mBAA6C;AAD1C,CAA5B;AAIA;AACA;AACA;;AACO,MAAMC,UAAN,CAAiB;AACtB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;;AACA;;AACA;;AAYA;;AACA;;AAKA;;AAKA;;AAKA;;AAKA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AAGA;AACF;AACA;AACA;AACA;AACA;AACEh0B,EAAAA,WAAW,CACTwkB,QADS,EAETwB,mBAFS,EAGT;AAAA,SAtFeiO,WAsFf,GAtF0B,KAAA,CAsF1B;AAtF0B,SACXC,iCADW,GACsB,KAAA,CADtB;AACsB,SACjCpV,YADiC,GACrB,KAAA,CADqB;AACrB,SACZqV,cADY,GACE,KAAA,CADF;AACE,SACdC,UADc,GACJ,KAAA,CADI;AACJ,SACVC,WADU,GACC,KAAA,CADD;AACC,SACXC,gBADW,GACK,KAAA,CADL;AACK,SAChBC,aADgB,GACH,KAAA,CADG;AACH,SACbC,sBADa,GACqB,KADrB;AAC0B,SACvCC,sBADuC,GAG7C,IAH6C;AAGzC,SACEC,wBADF,GAGJ,IAHI;AAGA,SAOHC,uBAPG,GAO+B,CAP/B;AAOgC,SAE9BC,wBAF8B,GAEM,KAFN;AAEW,SACzCC,iBADyC,GACZ,KADY;AACP,SAClCC,cADkC,GAM/C;AACFC,MAAAA,eAAe,EAAE,IADf;AAEFC,MAAAA,SAAS,EAAE,CAFT;AAGFC,MAAAA,qBAAqB,EAAE,EAHrB;AAIFC,MAAAA,mBAAmB,EAAE;AAJnB,KAN+C;AAWlD,SAEwBC,yBAFxB,GAE0E,CAF1E;AAE2E,SACnDC,mDADmD,GAKxE,EALwE;AAKtE,SACmBC,uCADnB,GAKF,EALE;AAKA,SACmBC,uCADnB,GAKF,EALE;AAKA,SACmBC,4CADnB,GAKF,EALE;AAKA,SACmBC,oBADnB,GAGF,EAHE;AAGA,SAcmBC,+BAdnB,GAeJ,IAAI5gB,GAAJ,EAfI;;AAeK,SA+qDX6lB,cA/qDW,GA+qDM,CAAC,MAAM;AACtB,YAAMoD,eAAkD,GAAG,EAA3D;AACA,aAAO,MACL9X,kBADK,IAEe;AACpB,cAAM;AAAClO,UAAAA,UAAD;AAAatC,UAAAA;AAAb,YACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,cAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,UAIX+T,MAJW,CAAb;;AAMA,cAAMuoB,WAAW,GAAGC,qBAAmB,CAAC/xB,IAAD,CAAvC;;AACA6xB,QAAAA,eAAe,CAACC,WAAD,CAAfD,GACEA,eAAe,CAACC,WAAD,CAAfD,IACA,CAAC,YAAY;AACX,cAAI;AACF,kBAAMnH,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,kBAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACK,MAAM,EAAP,CAAzB,CAAlB;;AACA,gBAAI,WAAWkE,GAAf,EAAoB;AAClB,oBAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,wCAFI,CAAN;AAIF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACD,WAVD,SAUU;AACR,mBAAO0X,eAAe,CAACC,WAAD,CAAtB;AACF;AACD,SAdD,GAFFD;;AAiBA,eAAO,MAAMA,eAAe,CAACC,WAAD,CAA5B;AACD,OA9BD;AA+BD,KAjCgB,GA/qDN;;AAYT,QAAIrI,UAAJ;AACA,QAAI5L,WAAJ;AACA,QAAI1H,KAAJ;AACA,QAAI4H,eAAJ;AACA,QAAIC,uBAAJ;AACA,QAAIC,SAAJ;;AACA,QAAIlE,mBAAkB,IAAI,OAAOA,mBAAP,KAA8B,QAAxD,EAAkE;AAChE,WAAKiO,WAAL,GAAmBjO,mBAAnB;AACD,KAFD,MAEO,IAAIA,mBAAJ,EAAwB;AAC7B,WAAKiO,WAAL,GAAmBjO,mBAAkB,CAAClO,UAAtC;AACA,WAAKoc,iCAAL,GACElO,mBAAkB,CAAC2P,gCADrB;AAEAD,MAAAA,UAAU,GAAG1P,mBAAkB,CAAC0P,UAAhCA;AACA5L,MAAAA,WAAW,GAAG9D,mBAAkB,CAAC8D,WAAjCA;AACA1H,MAAAA,KAAK,GAAG4D,mBAAkB,CAAC5D,KAA3BA;AACA4H,MAAAA,eAAe,GAAGhE,mBAAkB,CAACgE,eAArCA;AACAC,MAAAA,uBAAuB,GAAGjE,mBAAkB,CAACiE,uBAA7CA;AACAC,MAAAA,SAAS,GAAGlE,mBAAkB,CAACkE,SAA/BA;AACF;;AAEA,SAAKpL,YAAL,GAAoB8G,iBAAiB,CAACpB,QAAD,CAArC;AACA,SAAK2P,cAAL,GAAsBuB,UAAU,IAAInR,gBAAgB,CAACC,QAAD,CAApD;AAEA,SAAK4P,UAAL,GAAkBvK,eAAe,CAC/BrF,QAD+B,EAE/BsF,WAF+B,EAG/B1H,KAH+B,EAI/B4H,eAJ+B,EAK/BC,uBAL+B,EAM/BC,SAN+B,CAAjC;AAQA,SAAKmK,WAAL,GAAmB3I,gBAAgB,CAAC,KAAK0I,UAAN,CAAnC;AACA,SAAKE,gBAAL,GAAwB1I,qBAAqB,CAAC,KAAKwI,UAAN,CAA7C;AAEA,SAAKG,aAAL,GAAqB,IAAIlS,kBAAJ,CAAuB,KAAK8R,cAA5B,EAA4C;AAC/DtR,MAAAA,WAAW,EAAE,KADkD;AAE/DC,MAAAA,cAAc,EAAE8S;AAF+C,KAA5C,CAArB;;AAIA,SAAKrB,aAAL,CAAmBsB,EAAnB,CAAsB,MAAtB,EAA8B,KAAKC,SAAL,CAAe3uB,IAAf,CAAoB,IAApB,CAA9B;;AACA,SAAKotB,aAAL,CAAmBsB,EAAnB,CAAsB,OAAtB,EAA+B,KAAKE,UAAL,CAAgB5uB,IAAhB,CAAqB,IAArB,CAA/B;;AACA,SAAKotB,aAAL,CAAmBsB,EAAnB,CAAsB,OAAtB,EAA+B,KAAKG,UAAL,CAAgB7uB,IAAhB,CAAqB,IAArB,CAA/B;;AACA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,qBADF,EAEE,KAAKI,wBAAL,CAA8B9uB,IAA9B,CAAmC,IAAnC,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,qBADF,EAEE,KAAKK,+BAAL,CAAqC/uB,IAArC,CAA0C,IAA1C,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,kBADF,EAEE,KAAKM,qBAAL,CAA2BhvB,IAA3B,CAAgC,IAAhC,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,0BADF,EAEE,KAAKO,4BAAL,CAAkCjvB,IAAlC,CAAuC,IAAvC,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,uBADF,EAEE,KAAKQ,0BAAL,CAAgClvB,IAAhC,CAAqC,IAArC,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,kBADF,EAEE,KAAKS,qBAAL,CAA2BnvB,IAA3B,CAAgC,IAAhC,CAFF;;AAIA,SAAKotB,aAAL,CAAmBsB,EAAnB,CACE,kBADF,EAEE,KAAKU,qBAAL,CAA2BpvB,IAA3B,CAAgC,IAAhC,CAFF;AAIF;AAEA;AACF;AACA;;;AACgB,MAAV2Q,UAAU,GAA2B;AACvC,WAAO,KAAKmc,WAAZ;AACF;AAEA;AACF;AACA;;;AACiB,MAAXuC,WAAW,GAAW;AACxB,WAAO,KAAK1X,YAAZ;AACF;AAEA;AACF;AACA;;;AAC4B,QAApB2X,oBAAoB,CACxB/3B,SADwB,EAExBsnB,kBAFwB,EAGgB;AACxC;AACA,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACh4B,SAAS,CAACyD,QAAVzD,EAAD,CADW,EAEXoZ,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,YAAjB,EAA+BpoB,IAA/B,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3P,uBAAuB,CAACE,MAAM,EAAP,CAAnC,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,6BAA4B7f,SAAS,CAACyD,QAAVzD,EAAqB,EAF9C,CAAN;AAIF;;AACA,WAAO0sB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACkB,QAAVwQ,UAAU,CACdl4B,SADc,EAEdsnB,kBAFc,EAGG;AACjB,WAAO,MAAM,KAAKyQ,oBAAL,CAA0B/3B,SAA1B,EAAqCsnB,kBAArC,EACV6Q,IADU,CACLrjB,CAAC,IAAIA,CAAC,CAACjS,KADF,EAEVu1B,KAFU,CAEJC,CAAC,IAAI;AACV,YAAM,IAAI/1B,KAAJ,CACJ,sCAAsCtC,SAAS,CAACyD,QAAVzD,EAAtC,GAA6D,IAA7D,GAAoEq4B,CADhE,CAAN;AAGD,KANU,CAAb;AAOF;AAEA;AACF;AACA;;;AACoB,QAAZC,YAAY,CAAChX,IAAD,EAAuC;AACvD,UAAM2W,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,cAAjB,EAAiC,CAACrU,IAAD,CAAjC,CAAxB;AACA,UAAMoL,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACgB,QAAQ,CAACX,MAAM,EAAP,CAAT,CAAzB,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,qCAAoCyB,IAAK,EAFtC,CAAN;AAIF;;AACA,WAAOoL,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;;;AAC4B,QAApB6Q,oBAAoB,GAAoB;AAC5C,UAAMN,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACK,MAAM,EAAP,CAAzB,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,mCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC8B,QAAtB8Q,sBAAsB,GAAoB;AAC9C,UAAMP,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,wBAAjB,EAA2C,EAA3C,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYrK,aAAZ,CAAlB;;AACA,QAAI,WAAWlB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,qCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACiB,QAAT+Q,SAAS,CACb3hB,MADa,EAE2B;AACxC,QAAI4hB,SAA0B,GAAG,EAAjC;;AACA,QAAI,OAAO5hB,MAAP,KAAkB,QAAtB,EAAgC;AAC9B4hB,MAAAA,SAAS,GAAG;AAACtf,QAAAA,UAAU,EAAEtC;AAAb,OAAZ4hB;AACD,KAFD,MAEO,IAAI5hB,MAAJ,EAAY;AACjB4hB,MAAAA,SAAS,GAAG,EACV,GAAG5hB,MADO;AAEVsC,QAAAA,UAAU,EAAGtC,MAAM,IAAIA,MAAM,CAACsC,UAAjBtC,IAAgC,KAAKsC;AAFxC,OAAZsf;AAID,KALM,MAKA;AACLA,MAAAA,SAAS,GAAG;AACVtf,QAAAA,UAAU,EAAE,KAAKA;AADP,OAAZsf;AAGF;;AAEA,UAAMT,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,WAAjB,EAA8B,CAAC+C,SAAD,CAA9B,CAAxB;AACA,UAAMhM,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYpK,kBAAZ,CAAlB;;AACA,QAAI,WAAWnB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,sBAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACsB,QAAdiR,cAAc,CAClBC,gBADkB,EAElBxf,UAFkB,EAG2B;AAC7C,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAACY,gBAAgB,CAACn1B,QAAjBm1B,EAAD,CAAhB,EAA+Cxf,UAA/C,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3P,uBAAuB,CAAC2F,iBAAD,CAAnC,CAAlB;;AACA,QAAI,WAAWvB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,4BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC8B,QAAtBmR,sBAAsB,CAC1BC,YAD0B,EAE1B1f,UAF0B,EAGmB;AAC7C,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAACc,YAAY,CAACr1B,QAAbq1B,EAAD,CAAhB,EAA2C1f,UAA3C,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,wBAAjB,EAA2CpoB,IAA3C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3P,uBAAuB,CAAC2F,iBAAD,CAAnC,CAAlB;;AACA,QAAI,WAAWvB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,qCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AAC+B,QAAvBqR,uBAAuB,CAC3BC,YAD2B,EAE3BxtB,MAF2B,EAG3B8b,kBAH2B,EAQ3B;AACA,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;AAEA,QAAI2R,KAAY,GAAG,CAACD,YAAY,CAACv1B,QAAbu1B,EAAD,CAAnB;;AACA,QAAI,UAAUxtB,MAAd,EAAsB;AACpBytB,MAAAA,KAAK,CAAClyB,IAANkyB,CAAW;AAACvG,QAAAA,IAAI,EAAElnB,MAAM,CAACknB,IAAPlnB,CAAY/H,QAAZ+H;AAAP,OAAXytB;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,CAAClyB,IAANkyB,CAAW;AAACz0B,QAAAA,SAAS,EAAEgH,MAAM,CAAChH,SAAPgH,CAAiB/H,QAAjB+H;AAAZ,OAAXytB;AACF;;AAEA,UAAM1rB,IAAI,GAAG,KAAKyqB,UAAL,CAAgBiB,KAAhB,EAAuB7f,UAAvB,EAAmC,QAAnC,EAA6CtC,MAA7C,CAAb;;AACA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3J,uBAAZ,CAAlB;;AACA,QAAI,WAAW5B,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,iDAAgDmZ,YAAY,CAACv1B,QAAbu1B,EAAwB,EAFrE,CAAN;AAIF;;AACA,WAAOtM,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACqC,QAA7BwR,6BAA6B,CACjCF,YADiC,EAEjCxtB,MAFiC,EAGjC4N,UAHiC,EAQjC;AACA,QAAI6f,KAAY,GAAG,CAACD,YAAY,CAACv1B,QAAbu1B,EAAD,CAAnB;;AACA,QAAI,UAAUxtB,MAAd,EAAsB;AACpBytB,MAAAA,KAAK,CAAClyB,IAANkyB,CAAW;AAACvG,QAAAA,IAAI,EAAElnB,MAAM,CAACknB,IAAPlnB,CAAY/H,QAAZ+H;AAAP,OAAXytB;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,CAAClyB,IAANkyB,CAAW;AAACz0B,QAAAA,SAAS,EAAEgH,MAAM,CAAChH,SAAPgH,CAAiB/H,QAAjB+H;AAAZ,OAAXytB;AACF;;AAEA,UAAM1rB,IAAI,GAAG,KAAKyqB,UAAL,CAAgBiB,KAAhB,EAAuB7f,UAAvB,EAAmC,YAAnC,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYxJ,6BAAZ,CAAlB;;AACA,QAAI,WAAW/B,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,iDAAgDmZ,YAAY,CAACv1B,QAAbu1B,EAAwB,EAFrE,CAAN;AAIF;;AACA,WAAOtM,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC0B,QAAlByR,kBAAkB,CACtBriB,MADsB,EAEqC;AAC3D,UAAMsiB,GAAG,GAAG,EACV,GAAGtiB,MADO;AAEVsC,MAAAA,UAAU,EAAGtC,MAAM,IAAIA,MAAM,CAACsC,UAAjBtC,IAAgC,KAAKsC;AAFxC,KAAZ;AAIA,UAAM7L,IAAI,GAAG6rB,GAAG,CAAC5tB,MAAJ4tB,IAAcA,GAAG,CAAChgB,UAAlBggB,GAA+B,CAACA,GAAD,CAA/BA,GAAuC,EAApD;AACA,UAAMnB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYvJ,2BAAZ,CAAlB;;AACA,QAAI,WAAWhC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,gCAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;;;AAC+B,QAAvB2R,uBAAuB,CAC3BC,WAD2B,EAE3BlgB,UAF2B,EAGqC;AAChE,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAACsB,WAAW,CAAC71B,QAAZ61B,EAAD,CAAhB,EAA0ClgB,UAA1C,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY5J,6BAAZ,CAAlB;;AACA,QAAI,WAAW3B,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,sCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACgC,QAAxB6R,wBAAwB,CAC5Bv5B,SAD4B,EAE5BsnB,kBAF4B,EAGgC;AAC5D,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACh4B,SAAS,CAACyD,QAAVzD,EAAD,CADW,EAEXoZ,UAFW,EAGX,QAHW,EAIXtC,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAChB4P,SADgB,EAEhB3P,uBAAuB,CAACa,QAAQ,CAACwF,iBAAD,CAAT,CAFP,CAAlB;;AAIA,QAAI,WAAWjC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,oCAAmC7f,SAAS,CAACyD,QAAVzD,EAAqB,EAFrD,CAAN;AAIF;;AACA,WAAO0sB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC4B,QAApB8R,oBAAoB,CACxBx5B,SADwB,EAExBsnB,kBAFwB,EAKxB;AACA,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACh4B,SAAS,CAACyD,QAAVzD,EAAD,CADW,EAEXoZ,UAFW,EAGX,YAHW,EAIXtC,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAChB4P,SADgB,EAEhB3P,uBAAuB,CAACa,QAAQ,CAAC2F,uBAAD,CAAT,CAFP,CAAlB;;AAIA,QAAI,WAAWpC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,oCAAmC7f,SAAS,CAACyD,QAAVzD,EAAqB,EAFrD,CAAN;AAIF;;AACA,WAAO0sB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACsB,QAAd/H,cAAc,CAClB3f,SADkB,EAElBsnB,kBAFkB,EAGmB;AACrC,QAAI;AACF,YAAMoF,GAAG,GAAG,MAAM,KAAK6M,wBAAL,CAChBv5B,SADgB,EAEhBsnB,kBAFgB,CAAlB;AAIA,aAAOoF,GAAG,CAAC7pB,KAAX;AACD,KAND,CAME,OAAOw1B,CAAP,EAAU;AACV,YAAM,IAAI/1B,KAAJ,CACJ,sCAAsCtC,SAAS,CAACyD,QAAVzD,EAAtC,GAA6D,IAA7D,GAAoEq4B,CADhE,CAAN;AAGF;AACF;AAEA;AACF;AACA;;;AACiC,QAAzBoB,yBAAyB,CAC7BC,UAD6B,EAE7BC,SAF6B,EAK7B;AACA,UAAM;AAACvgB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QAAuBuQ,2BAA2B,CAACsS,SAAD,CAAxD;AACA,UAAMv3B,IAAI,GAAGs3B,UAAU,CAACn3B,GAAXm3B,CAAel3B,GAAG,IAAIA,GAAG,CAACiB,QAAJjB,EAAtBk3B,CAAb;;AACA,UAAMnsB,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAAC51B,IAAD,CAAhB,EAAwBgX,UAAxB,EAAoC,YAApC,EAAkDtC,MAAlD,CAAb;;AACA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,qBAAjB,EAAwCpoB,IAAxC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAChB4P,SADgB,EAEhB3P,uBAAuB,CAACtI,KAAK,CAACmJ,QAAQ,CAAC2F,uBAAD,CAAT,CAAN,CAFP,CAAlB;;AAIA,QAAI,WAAWpC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,mCAAkCzd,IAAK,EAFpC,CAAN;AAIF;;AACA,WAAOsqB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACyC,QAAjCkS,iCAAiC,CACrCF,UADqC,EAErCpS,kBAFqC,EAG2B;AAChE,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;AAEA,UAAMllB,IAAI,GAAGs3B,UAAU,CAACn3B,GAAXm3B,CAAel3B,GAAG,IAAIA,GAAG,CAACiB,QAAJjB,EAAtBk3B,CAAb;;AACA,UAAMnsB,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAAC51B,IAAD,CAAhB,EAAwBgX,UAAxB,EAAoC,QAApC,EAA8CtC,MAA9C,CAAb;;AACA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,qBAAjB,EAAwCpoB,IAAxC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAChB4P,SADgB,EAEhB3P,uBAAuB,CAACtI,KAAK,CAACmJ,QAAQ,CAACwF,iBAAD,CAAT,CAAN,CAFP,CAAlB;;AAIA,QAAI,WAAWjC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,mCAAkCzd,IAAK,EAFpC,CAAN;AAIF;;AACA,WAAOsqB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC+B,QAAvBmS,uBAAuB,CAC3BH,UAD2B,EAE3BpS,kBAF2B,EAGc;AACzC,UAAMoF,GAAG,GAAG,MAAM,KAAKkN,iCAAL,CAChBF,UADgB,EAEhBpS,kBAFgB,CAAlB;AAIA,WAAOoF,GAAG,CAAC7pB,KAAX;AACF;AAEA;AACF;AACA;;;AAC0B,QAAlBi3B,kBAAkB,CACtB95B,SADsB,EAEtBsnB,kBAFsB,EAGtB9F,KAHsB,EAIQ;AAC9B,UAAM;AAACpI,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACh4B,SAAS,CAACyD,QAAVzD,EAAD,CADW,EAEXoZ,UAFW,EAGXrW;AAAS;AAHE,MAIX,EACE,GAAG+T,MADL;AAEE0K,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAATA,GAAgBA,KAAhBA,GAAwB1K,MAAxB0K,aAAwB1K,MAAxB0K,uBAAwB1K,MAAM,CAAE0K;AAFzC,KAJW,CAAb;;AAUA,UAAMyW,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAAC6G,qBAAD,CAAzB,CAAlB;;AACA,QAAI,WAAWtC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,kCAAiC7f,SAAS,CAACyD,QAAVzD,EAAqB,EAFnD,CAAN;AAIF;;AACA,WAAO0sB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AAC0B,QAAlBqS,kBAAkB,CACtBv1B,SADsB,EAEtBw1B,kBAFsB,EAG6C;AACnE,UAAM;AAAC5gB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAAC2S,kBAAD,CAD7B;AAEA,UAAM;AAACC,MAAAA,QAAD;AAAW,SAAGC;AAAd,QAAuCpjB,MAAM,IAAI,EAAvD;;AACA,UAAMvJ,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACxzB,SAAS,CAACf,QAAVe,EAAD,CADW,EAEX4U,UAFW,EAGX6gB,QAAQ,IAAI,QAHD,EAIXC,qBAJW,CAAb;;AAMA,UAAMjC,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACnI,KAAK,CAAC4O,sBAAD,CAAN,CAAzB,CAAlB;;AACA,QAAI,WAAWlC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,2CAA0Crb,SAAS,CAACf,QAAVe,EAAqB,EAF5D,CAAN;AAIF;;AACA,WAAOkoB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACgC,QAAxByS,wBAAwB,CAC5B31B,SAD4B,EAE5Bw1B,kBAF4B,EAQ5B;AACA,UAAM;AAAC5gB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAAC2S,kBAAD,CAD7B;;AAEA,UAAMzsB,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACxzB,SAAS,CAACf,QAAVe,EAAD,CADW,EAEX4U,UAFW,EAGX,YAHW,EAIXtC,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAChB4P,SADgB,EAEhB9P,aAAa,CAACnI,KAAK,CAAC+O,4BAAD,CAAN,CAFG,CAAlB;;AAIA,QAAI,WAAWrC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,2CAA0Crb,SAAS,CAACf,QAAVe,EAAqB,EAF5D,CAAN;AAIF;;AACA,WAAOkoB,GAAG,CAAChF,MAAX;AACF,GA/pBsB,CA6qBtB;;;AACwB,QAAlBlO,kBAAkB,CACtB4gB,QADsB,EAEtBhhB,UAFsB,EAG2B;AACjD,QAAIihB,YAAJ;;AAEA,QAAI,OAAOD,QAAP,IAAmB,QAAvB,EAAiC;AAC/BC,MAAAA,YAAY,GAAGD,QAAfC;AACD,KAFD,MAEO;AAAA;;AACL,YAAMvjB,MAAM,GAAGsjB,QAAf;;AAEA,iCAAItjB,MAAM,CAAC2C,WAAX,gDAAI3C,oBAAoBwjB,OAAxB,EAAiC;AAC/B,eAAOxgB,OAAO,CAAC2K,MAAR3K,CAAehD,MAAM,CAAC2C,WAAP3C,CAAmByjB,MAAlCzgB,CAAP;AACF;;AACAugB,MAAAA,YAAY,GAAGvjB,MAAM,CAAC1Q,SAAtBi0B;AACF;;AAEA,QAAIG,gBAAJ;;AAEA,QAAI;AACFA,MAAAA,gBAAgB,GAAGr3B,IAAI,CAACtB,MAALsB,CAAYk3B,YAAZl3B,CAAnBq3B;AACD,KAFD,CAEE,OAAOn1B,GAAP,EAAY;AACZ,YAAM,IAAI/C,KAAJ,CAAU,uCAAuC+3B,YAAjD,CAAN;AACF;;AAEA/uB,IAAAA,MAAM,CAACkvB,gBAAgB,CAACn4B,MAAjBm4B,KAA4B,EAA7B,EAAiC,8BAAjC,CAANlvB;;AAEA,QAAI,OAAO8uB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,aAAO,MAAM,KAAKK,4CAAL,CAAkD;AAC7DrhB,QAAAA,UAAU,EAAEA,UAAU,IAAI,KAAKA,UAD8B;AAE7DhT,QAAAA,SAAS,EAAEi0B;AAFkD,OAAlD,CAAb;AAID,KALD,MAKO,IAAI,0BAA0BD,QAA9B,EAAwC;AAC7C,aAAO,MAAM,KAAKM,oDAAL,CAA0D;AACrEthB,QAAAA,UAAU,EAAEA,UAAU,IAAI,KAAKA,UADsC;AAErEghB,QAAAA;AAFqE,OAA1D,CAAb;AAID,KALM,MAKA;AACL,aAAO,MAAM,KAAKO,2CAAL,CAAiD;AAC5DvhB,QAAAA,UAAU,EAAEA,UAAU,IAAI,KAAKA,UAD6B;AAE5DghB,QAAAA;AAF4D,OAAjD,CAAb;AAIF;AACF;;AAEQQ,EAAAA,sBAAsB,CAACC,MAAD,EAAuC;AACnE,WAAO,IAAI/gB,OAAJ,CAAmB,CAAClL,CAAD,EAAI6V,MAAJ,KAAe;AACvC,UAAIoW,MAAM,IAAI,IAAd,EAAoB;AAClB;AACF;;AACA,UAAIA,MAAM,CAACP,OAAX,EAAoB;AAClB7V,QAAAA,MAAM,CAACoW,MAAM,CAACN,MAAR,CAAN9V;AACD,OAFD,MAEO;AACLoW,QAAAA,MAAM,CAACC,gBAAPD,CAAwB,OAAxBA,EAAiC,MAAM;AACrCpW,UAAAA,MAAM,CAACoW,MAAM,CAACN,MAAR,CAAN9V;AACD,SAFDoW;AAGF;AACD,KAXM,CAAP;AAYF;;AAEQE,EAAAA,iCAAiC,CAAC;AACxC3hB,IAAAA,UADwC;AAExChT,IAAAA;AAFwC,GAAD,EAYvC;AACA,QAAI40B,uBAAJ;AACA,QAAIC,+CAAJ;AAGA,QAAIC,IAAI,GAAG,KAAX;AACA,UAAMC,mBAAmB,GAAG,IAAIrhB,OAAJ,CAGzB,CAACC,OAAD,EAAU0K,MAAV,KAAqB;AACtB,UAAI;AACFuW,QAAAA,uBAAuB,GAAG,KAAKI,WAAL,CACxBh1B,SADwB,EAExB,CAACshB,MAAD,EAA0Ba,OAA1B,KAA+C;AAC7CyS,UAAAA,uBAAuB,GAAGj4B,SAA1Bi4B;AACA,gBAAMrS,QAAQ,GAAG;AACfJ,YAAAA,OADe;AAEf1lB,YAAAA,KAAK,EAAE6kB;AAFQ,WAAjB;AAIA3N,UAAAA,OAAO,CAAC;AAACshB,YAAAA,MAAM,EAAEtoB,iBAAiB,CAACuoB,SAA3B;AAAsC3S,YAAAA;AAAtC,WAAD,CAAP5O;AACD,SATuB,EAUxBX,UAVwB,CAA1B4hB;AAYA,cAAMO,wBAAwB,GAAG,IAAIzhB,OAAJ,CAC/B0hB,wBAAwB,IAAI;AAC1B,cAAIR,uBAAuB,IAAI,IAA/B,EAAqC;AACnCQ,YAAAA,wBAAwB;AACzB,WAFD,MAEO;AACLP,YAAAA,+CAA+C,GAC7C,KAAKQ,0BAAL,CACET,uBADF,EAEEU,SAAS,IAAI;AACX,kBAAIA,SAAS,KAAK,YAAlB,EAAgC;AAC9BF,gBAAAA,wBAAwB;AAC1B;AACD,aANH,CADFP;AASF;AACD,SAf8B,CAAjC;;AAiBA,SAAC,YAAY;AACX,gBAAMM,wBAAN;AACA,cAAIL,IAAJ,EAAU;AACV,gBAAMvS,QAAQ,GAAG,MAAM,KAAKgT,kBAAL,CAAwBv1B,SAAxB,CAAvB;AACA,cAAI80B,IAAJ,EAAU;;AACV,cAAIvS,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACF;;AACA,gBAAM;AAACJ,YAAAA,OAAD;AAAU1lB,YAAAA;AAAV,cAAmB8lB,QAAzB;;AACA,cAAI9lB,KAAK,IAAI,IAAb,EAAmB;AACjB;AACF;;AACA,cAAIA,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEwC,GAAX,EAAgB;AACdof,YAAAA,MAAM,CAAC5hB,KAAK,CAACwC,GAAP,CAANof;AACD,WAFD,MAEO;AACL,oBAAQrL,UAAR;AACE,mBAAK,WAAL;AACA,mBAAK,QAAL;AACA,mBAAK,cAAL;AAAqB;AACnB,sBAAIvW,KAAK,CAAC6uB,kBAAN7uB,KAA6B,WAAjC,EAA8C;AAC5C;AACF;;AACA;AACF;;AACA,mBAAK,WAAL;AACA,mBAAK,KAAL;AACA,mBAAK,MAAL;AAAa;AACX,sBACEA,KAAK,CAAC6uB,kBAAN7uB,KAA6B,WAA7BA,IACAA,KAAK,CAAC6uB,kBAAN7uB,KAA6B,WAF/B,EAGE;AACA;AACF;;AACA;AACF;AACA;;AACA,mBAAK,WAAL;AACA,mBAAK,QAAL;AAtBF;;AAwBAq4B,YAAAA,IAAI,GAAG,IAAPA;AACAnhB,YAAAA,OAAO,CAAC;AACNshB,cAAAA,MAAM,EAAEtoB,iBAAiB,CAACuoB,SADpB;AAEN3S,cAAAA,QAAQ,EAAE;AACRJ,gBAAAA,OADQ;AAER1lB,gBAAAA;AAFQ;AAFJ,aAAD,CAAPkX;AAOF;AACD,SAhDD;AAiDD,OA/ED,CA+EE,OAAO1U,GAAP,EAAY;AACZof,QAAAA,MAAM,CAACpf,GAAD,CAANof;AACF;AACD,KAtF2B,CAA5B;;AAuFA,UAAMmX,iBAAiB,GAAG,MAAM;AAC9B,UAAIX,+CAAJ,EAAqD;AACnDA,QAAAA,+CAA+C;AAC/CA,QAAAA,+CAA+C,GAAGl4B,SAAlDk4B;AACF;;AACA,UAAID,uBAAuB,IAAI,IAA/B,EAAqC;AACnC,aAAKa,uBAAL,CAA6Bb,uBAA7B;AACAA,QAAAA,uBAAuB,GAAGj4B,SAA1Bi4B;AACF;AACD,KATD;;AAUA,WAAO;AAACY,MAAAA,iBAAD;AAAoBT,MAAAA;AAApB,KAAP;AACF;;AAEkE,QAApDT,oDAAoD,CAAC;AACjEthB,IAAAA,UADiE;AAEjEghB,IAAAA,QAAQ,EAAE;AAAC3gB,MAAAA,WAAD;AAAclG,MAAAA,oBAAd;AAAoCnN,MAAAA;AAApC;AAFuD,GAAD,EAM/D;AACD,QAAI80B,IAAa,GAAG,KAApB;AACA,UAAMY,aAAa,GAAG,IAAIhiB,OAAJ,CAEnBC,OAAO,IAAI;AACZ,YAAMgiB,gBAAgB,GAAG,YAAY;AACnC,YAAI;AACF,gBAAM/R,WAAW,GAAG,MAAM,KAAKgS,cAAL,CAAoB5iB,UAApB,CAA1B;AACA,iBAAO4Q,WAAP;AACD,SAHD,CAGE,OAAOiS,EAAP,EAAW;AACX,iBAAO,CAAC,CAAR;AACF;AACD,OAPD;;AAQA,OAAC,YAAY;AACX,YAAIC,kBAAkB,GAAG,MAAMH,gBAAgB,EAA/C;AACA,YAAIb,IAAJ,EAAU;;AACV,eAAOgB,kBAAkB,IAAI3oB,oBAA7B,EAAmD;AACjD,gBAAMqG,KAAK,CAAC,IAAD,CAAX;AACA,cAAIshB,IAAJ,EAAU;AACVgB,UAAAA,kBAAkB,GAAG,MAAMH,gBAAgB,EAA3CG;AACA,cAAIhB,IAAJ,EAAU;AACZ;;AACAnhB,QAAAA,OAAO,CAAC;AAACshB,UAAAA,MAAM,EAAEtoB,iBAAiB,CAACopB;AAA3B,SAAD,CAAPpiB;AACD,OAVD;AAWD,KAtBqB,CAAtB;AAuBA,UAAM;AAAC6hB,MAAAA,iBAAD;AAAoBT,MAAAA;AAApB,QACJ,KAAKJ,iCAAL,CAAuC;AAAC3hB,MAAAA,UAAD;AAAahT,MAAAA;AAAb,KAAvC,CADF;AAEA,UAAMg2B,mBAAmB,GAAG,KAAKxB,sBAAL,CAA4BnhB,WAA5B,CAA5B;AACA,QAAIiO,MAAJ;;AACA,QAAI;AACF,YAAM2U,OAAO,GAAG,MAAMviB,OAAO,CAACwiB,IAARxiB,CAAa,CACjCsiB,mBADiC,EAEjCjB,mBAFiC,EAGjCW,aAHiC,CAAbhiB,CAAtB;;AAKA,UAAIuiB,OAAO,CAAChB,MAARgB,KAAmBtpB,iBAAiB,CAACuoB,SAAzC,EAAoD;AAClD5T,QAAAA,MAAM,GAAG2U,OAAO,CAAC1T,QAAjBjB;AACD,OAFD,MAEO;AACL,cAAM,IAAIvhB,0CAAJ,CAA+CC,SAA/C,CAAN;AACF;AACD,KAXD,SAWU;AACR80B,MAAAA,IAAI,GAAG,IAAPA;AACAU,MAAAA,iBAAiB;AACnB;;AACA,WAAOlU,MAAP;AACF;;AAEyD,QAA3CiT,2CAA2C,CAAC;AACxDvhB,IAAAA,UADwD;AAExDghB,IAAAA,QAAQ,EAAE;AACR3gB,MAAAA,WADQ;AAER3F,MAAAA,cAFQ;AAGR4F,MAAAA,kBAHQ;AAIRC,MAAAA,UAJQ;AAKRvT,MAAAA;AALQ;AAF8C,GAAD,EAYtD;AACD,QAAI80B,IAAa,GAAG,KAApB;AACA,UAAMY,aAAa,GAAG,IAAIhiB,OAAJ,CAGnBC,OAAO,IAAI;AACZ,UAAIwiB,iBAAqC,GAAG5iB,UAA5C;AACA,UAAI6iB,eAA8B,GAAG,IAArC;;AACA,YAAMC,oBAAoB,GAAG,YAAY;AACvC,YAAI;AACF,gBAAM;AAAClU,YAAAA,OAAD;AAAU1lB,YAAAA,KAAK,EAAEgY;AAAjB,cAAiC,MAAM,KAAK6hB,kBAAL,CAC3ChjB,kBAD2C,EAE3C;AACEN,YAAAA,UADF;AAEEtF,YAAAA;AAFF,WAF2C,CAA7C;AAOA0oB,UAAAA,eAAe,GAAGjU,OAAO,CAACjH,IAA1Bkb;AACA,iBAAO3hB,YAAP,aAAOA,YAAP,uBAAOA,YAAY,CAAE3V,KAArB;AACD,SAVD,CAUE,OAAOmzB,CAAP,EAAU;AACV;AACA;AACA,iBAAOkE,iBAAP;AACF;AACD,OAhBD;;AAiBA,OAAC,YAAY;AACXA,QAAAA,iBAAiB,GAAG,MAAME,oBAAoB,EAA9CF;AACA,YAAIrB,IAAJ,EAAU;;AACV,eACE,IADF,CACM;AADN,UAEE;AACA,cAAIvhB,UAAU,KAAK4iB,iBAAnB,EAAsC;AACpCxiB,YAAAA,OAAO,CAAC;AACNshB,cAAAA,MAAM,EAAEtoB,iBAAiB,CAAC4pB,aADpB;AAENC,cAAAA,0BAA0B,EAAEJ;AAFtB,aAAD,CAAPziB;AAIA;AACF;;AACA,gBAAMH,KAAK,CAAC,IAAD,CAAX;AACA,cAAIshB,IAAJ,EAAU;AACVqB,UAAAA,iBAAiB,GAAG,MAAME,oBAAoB,EAA9CF;AACA,cAAIrB,IAAJ,EAAU;AACZ;AACD,OAlBD;AAmBD,KA1CqB,CAAtB;AA2CA,UAAM;AAACU,MAAAA,iBAAD;AAAoBT,MAAAA;AAApB,QACJ,KAAKJ,iCAAL,CAAuC;AAAC3hB,MAAAA,UAAD;AAAahT,MAAAA;AAAb,KAAvC,CADF;AAEA,UAAMg2B,mBAAmB,GAAG,KAAKxB,sBAAL,CAA4BnhB,WAA5B,CAA5B;AACA,QAAIiO,MAAJ;;AACA,QAAI;AACF,YAAM2U,OAAO,GAAG,MAAMviB,OAAO,CAACwiB,IAARxiB,CAAa,CACjCsiB,mBADiC,EAEjCjB,mBAFiC,EAGjCW,aAHiC,CAAbhiB,CAAtB;;AAKA,UAAIuiB,OAAO,CAAChB,MAARgB,KAAmBtpB,iBAAiB,CAACuoB,SAAzC,EAAoD;AAClD5T,QAAAA,MAAM,GAAG2U,OAAO,CAAC1T,QAAjBjB;AACD,OAFD,MAEO;AAAA;;AACL;AACA,YAAImV,eAAJ;;AAIA,eACE,IADF,CACM;AADN,UAEE;AACA,gBAAMtjB,MAAM,GAAG,MAAM,KAAKoiB,kBAAL,CAAwBv1B,SAAxB,CAArB;;AACA,cAAImT,MAAM,IAAI,IAAd,EAAoB;AAClB;AACF;;AACA,cACEA,MAAM,CAACgP,OAAPhP,CAAe+H,IAAf/H,IACC8iB,OAAO,CAACO,0BAARP,IAAsCvoB,cADvCyF,CADF,EAGE;AACA,kBAAMK,KAAK,CAAC,GAAD,CAAX;AACA;AACF;;AACAijB,UAAAA,eAAe,GAAGtjB,MAAlBsjB;AACA;AACF;;AACA,gCAAIA,eAAJ,6CAAIA,iBAAiBh6B,KAArB,EAA4B;AAC1B,gBAAMi6B,mBAAmB,GAAG1jB,UAAU,IAAI,WAA1C;AACA,gBAAM;AAACsY,YAAAA;AAAD,cAAuBmL,eAAe,CAACh6B,KAA7C;;AACA,kBAAQi6B,mBAAR;AACE,iBAAK,WAAL;AACA,iBAAK,QAAL;AACE,kBACEpL,kBAAkB,KAAK,WAAvBA,IACAA,kBAAkB,KAAK,WADvBA,IAEAA,kBAAkB,KAAK,WAHzB,EAIE;AACA,sBAAM,IAAIhrB,mCAAJ,CAAwCN,SAAxC,CAAN;AACF;;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,QAAL;AACA,iBAAK,cAAL;AACE,kBACEsrB,kBAAkB,KAAK,WAAvBA,IACAA,kBAAkB,KAAK,WAFzB,EAGE;AACA,sBAAM,IAAIhrB,mCAAJ,CAAwCN,SAAxC,CAAN;AACF;;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,KAAL;AACA,iBAAK,MAAL;AACE,kBAAIsrB,kBAAkB,KAAK,WAA3B,EAAwC;AACtC,sBAAM,IAAIhrB,mCAAJ,CAAwCN,SAAxC,CAAN;AACF;;AACA;;AACF;AACE;AACA;AACA,eAAEwI,CAAQ,IAAK,CAAE,CAAjB,EAAmBkuB,mBAAnB;;AA/BJ;;AAiCApV,UAAAA,MAAM,GAAG;AACPa,YAAAA,OAAO,EAAEsU,eAAe,CAACtU,OADlB;AAEP1lB,YAAAA,KAAK,EAAE;AAACwC,cAAAA,GAAG,EAAEw3B,eAAe,CAACh6B,KAAhBg6B,CAAsBx3B;AAA5B;AAFA,WAATqiB;AAID,SAxCD,MAwCO;AACL,gBAAM,IAAIhhB,mCAAJ,CAAwCN,SAAxC,CAAN;AACF;AACF;AACD,KA3ED,SA2EU;AACR80B,MAAAA,IAAI,GAAG,IAAPA;AACAU,MAAAA,iBAAiB;AACnB;;AACA,WAAOlU,MAAP;AACF;;AAE0D,QAA5C+S,4CAA4C,CAAC;AACzDrhB,IAAAA,UADyD;AAEzDhT,IAAAA;AAFyD,GAAD,EAMvD;AACD,QAAI22B,SAAJ;AACA,UAAMjB,aAAa,GAAG,IAAIhiB,OAAJ,CAGnBC,OAAO,IAAI;AACZ,UAAIijB,SAAS,GAAG,KAAKxH,iCAAL,IAA0C,KAAK,IAA/D;;AACA,cAAQpc,UAAR;AACE,aAAK,WAAL;AACA,aAAK,QAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACA,aAAK,cAAL;AAAqB;AACnB4jB,YAAAA,SAAS,GAAG,KAAKxH,iCAAL,IAA0C,KAAK,IAA3DwH;AACA;AACF;AARF;;AAcAD,MAAAA,SAAS,GAAG/iB,UAAU,CACpB,MAAMD,OAAO,CAAC;AAACshB,QAAAA,MAAM,EAAEtoB,iBAAiB,CAACkqB,SAA3B;AAAsCD,QAAAA;AAAtC,OAAD,CADO,EAEpBA,SAFoB,CAAtBD;AAID,KAvBqB,CAAtB;AAwBA,UAAM;AAACnB,MAAAA,iBAAD;AAAoBT,MAAAA;AAApB,QACJ,KAAKJ,iCAAL,CAAuC;AACrC3hB,MAAAA,UADqC;AAErChT,MAAAA;AAFqC,KAAvC,CADF;AAKA,QAAIshB,MAAJ;;AACA,QAAI;AACF,YAAM2U,OAAO,GAAG,MAAMviB,OAAO,CAACwiB,IAARxiB,CAAa,CAACqhB,mBAAD,EAAsBW,aAAtB,CAAbhiB,CAAtB;;AACA,UAAIuiB,OAAO,CAAChB,MAARgB,KAAmBtpB,iBAAiB,CAACuoB,SAAzC,EAAoD;AAClD5T,QAAAA,MAAM,GAAG2U,OAAO,CAAC1T,QAAjBjB;AACD,OAFD,MAEO;AACL,cAAM,IAAInhB,8BAAJ,CACJH,SADI,EAEJi2B,OAAO,CAACW,SAARX,GAAoB,IAFhB,CAAN;AAIF;AACD,KAVD,SAUU;AACRa,MAAAA,YAAY,CAACH,SAAD,CAAZG;AACAtB,MAAAA,iBAAiB;AACnB;;AACA,WAAOlU,MAAP;AACF;AAEA;AACF;AACA;;;AACuB,QAAfyV,eAAe,GAAgC;AACnD,UAAMlF,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,iBAAjB,EAAoC,EAApC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACnI,KAAK,CAACyQ,iBAAD,CAAN,CAAzB,CAAlB;;AACA,QAAI,WAAW/D,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,6BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACuB,QAAf0V,eAAe,CAAChkB,UAAD,EAAsD;AACzE,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,EAAhB,EAAoB5e,UAApB,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,iBAAjB,EAAoCpoB,IAApC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY7G,eAAZ,CAAlB;;AACA,QAAI,WAAW1E,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,6BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACe,QAAP2V,OAAO,CACX/V,kBADW,EAEM;AACjB,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,SAAjB,EAA4BpoB,IAA5B,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACK,MAAM,EAAP,CAAzB,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,oBAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACqB,QAAb4V,aAAa,CACjBhW,kBADiB,EAEA;AACjB,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,eAAjB,EAAkCpoB,IAAlC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACvB,MAAM,EAAP,CAAzB,CAAlB;;AACA,QAAI,WAAW8F,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,2BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACsB,QAAd6V,cAAc,CAClBC,SADkB,EAElBC,KAFkB,EAGS;AAC3B,UAAMlwB,IAAI,GAAG,CAACiwB,SAAD,EAAYC,KAAZ,CAAb;AACA,UAAMxF,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACnI,KAAK,CAACyG,mBAAD,CAAN,CAAzB,CAAlB;;AACA,QAAI,WAAWiG,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,4BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC0B,QAAlBiU,kBAAkB,CACtBv1B,SADsB,EAEtB0Q,MAFsB,EAGkC;AACxD,UAAM;AAACyR,MAAAA,OAAD;AAAU1lB,MAAAA,KAAK,EAAE6L;AAAjB,QAA2B,MAAM,KAAKgvB,oBAAL,CACrC,CAACt3B,SAAD,CADqC,EAErC0Q,MAFqC,CAAvC;AAIAxL,IAAAA,MAAM,CAACoD,MAAM,CAACrM,MAAPqM,KAAkB,CAAnB,CAANpD;AACA,UAAMzI,KAAK,GAAG6L,MAAM,CAAC,CAAD,CAApB;AACA,WAAO;AAAC6Z,MAAAA,OAAD;AAAU1lB,MAAAA;AAAV,KAAP;AACF;AAEA;AACF;AACA;;;AAC4B,QAApB66B,oBAAoB,CACxBrqB,UADwB,EAExByD,MAFwB,EAGuC;AAC/D,UAAMsH,MAAa,GAAG,CAAC/K,UAAD,CAAtB;;AACA,QAAIyD,MAAJ,EAAY;AACVsH,MAAAA,MAAM,CAACrX,IAAPqX,CAAYtH,MAAZsH;AACF;;AACA,UAAM6Z,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,sBAAjB,EAAyCvX,MAAzC,CAAxB;AACA,UAAMsO,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYtG,6BAAZ,CAAlB;;AACA,QAAI,WAAWjF,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,gCAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC2B,QAAnBiW,mBAAmB,CACvBrW,kBADuB,EAEN;AACjB,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,qBAAjB,EAAwCpoB,IAAxC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACK,MAAM,EAAP,CAAzB,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,iCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACsB,QAAdkW,cAAc,CAACxkB,UAAD,EAA2C;AAC7D,UAAMsO,MAAM,GAAG,MAAM,KAAK+Q,SAAL,CAAe;AAClCrf,MAAAA,UADkC;AAElCykB,MAAAA,iCAAiC,EAAE;AAFD,KAAf,CAArB;AAIA,WAAOnW,MAAM,CAAC7kB,KAAP6kB,CAAaiC,KAApB;AACF;AAEA;AACF;AACA;;;AAC4B,QAApBmU,oBAAoB,CACxB1kB,UADwB,EAEI;AAC5B,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,EAAhB,EAAoB5e,UAApB,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,sBAAjB,EAAyCpoB,IAAzC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3K,6BAAZ,CAAlB;;AACA,QAAI,WAAWZ,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,yBAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC0B,QAAlBqW,kBAAkB,CACtBxxB,SADsB,EAEtBiV,KAFsB,EAGtB8F,kBAHsB,EAIe;AACrC,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACzrB,SAAS,CAAChK,GAAVgK,CAAc/G,MAAM,IAAIA,MAAM,CAAC/B,QAAP+B,EAAxB+G,CAAD,CADW,EAEX6M,UAFW,EAGXrW;AAAS;AAHE,MAIX,EACE,GAAG+T,MADL;AAEE0K,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAATA,GAAgBA,KAAhBA,GAAwB1K,MAAxB0K,aAAwB1K,MAAxB0K,uBAAwB1K,MAAM,CAAE0K;AAFzC,KAJW,CAAb;;AASA,UAAMyW,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY/O,wBAAZ,CAAlB;;AACA,QAAI,WAAWwD,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,gCAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACwB,QAAhBsW,gBAAgB,GAA2B;AAC/C,UAAM/F,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,kBAAjB,EAAqC,EAArC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY1K,yBAAZ,CAAlB;;AACA,QAAI,WAAWb,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,8BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACoB,QAAZuW,YAAY,CAChB3W,kBADgB,EAEI;AACpB,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,cAAjB,EAAiCpoB,IAAjC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYxK,qBAAZ,CAAlB;;AACA,QAAI,WAAWf,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,0BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACwB,QAAhBwW,gBAAgB,GAA2B;AAC/C,UAAMjG,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,kBAAjB,EAAqC,EAArC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYvK,yBAAZ,CAAlB;;AACA,QAAI,WAAWhB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,8BAAlC,CAAN;AACF;;AACA,UAAMse,aAAa,GAAGzR,GAAG,CAAChF,MAA1B;AACA,WAAO,IAAI3G,aAAJ,CACLod,aAAa,CAACnd,aADT,EAELmd,aAAa,CAACld,wBAFT,EAGLkd,aAAa,CAACjd,MAHT,EAILid,aAAa,CAAChd,gBAJT,EAKLgd,aAAa,CAAC/c,eALT,CAAP;AAOF;AAEA;AACF;AACA;AACA;;;AACyB,QAAjBgd,iBAAiB,GAA4B;AACjD,UAAMnG,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYtK,0BAAZ,CAAlB;;AACA,QAAI,WAAWjB,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,+BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;;;AACyC,QAAjCjI,iCAAiC,CACrCtQ,UADqC,EAErCiK,UAFqC,EAGpB;AACjB,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAAC7oB,UAAD,CAAhB,EAA8BiK,UAA9B,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CACtB,mCADsB,EAEtBpoB,IAFsB,CAAxB;AAIA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYrG,0CAAZ,CAAlB;;AACA,QAAI,WAAWlF,GAAf,EAAoB;AAClBnY,MAAAA,OAAO,CAACC,IAARD,CAAa,oDAAbA;AACA,aAAO,CAAP;AACF;;AACA,WAAOmY,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACoC,QAA5B2W,4BAA4B,CAACjlB,UAAD,EAKhC;AACA,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,EAAhB,EAAoB5e,UAApB,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYzD,qCAAZ,CAAlB;;AACA,QAAI,WAAW9H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,gCAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;;;AACmC,QAA3B4W,2BAA2B,CAC/Bb,KAD+B,EAEH;AAC5B,UAAMxF,SAAS,GAAG,MAAM,KAAKtC,WAAL,CACtB,6BADsB,EAEtB8H,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,EAFI,CAAxB;AAIA,UAAM/Q,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYlD,oCAAZ,CAAlB;;AACA,QAAI,WAAWrI,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,0CAFI,CAAN;AAIF;;AAEA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACoC,QAA5B6W,4BAA4B,CAChCxqB,SADgC,EAEhCqF,UAFgC,EAGsB;AACtD,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAACjkB,SAAD,CAAhB,EAA6BqF,UAA7B,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CACtB,8BADsB,EAEtBpoB,IAFsB,CAAxB;AAKA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYjD,yBAAZ,CAAlB;;AACA,QAAI,WAAWtI,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,8BAAlC,CAAN;AACF;;AACA,UAAM;AAAC0I,MAAAA,OAAD;AAAU1lB,MAAAA;AAAV,QAAmB6pB,GAAG,CAAChF,MAA7B;AACA,WAAO;AACLa,MAAAA,OADK;AAEL1lB,MAAAA,KAAK,EAAEA,KAAK,KAAK,IAAVA,GAAiBA,KAAK,CAAC8X,aAAvB9X,GAAuC;AAFzC,KAAP;AAIF;AAEA;AACF;AACA;;;AACwB,QAAhBmT,gBAAgB,CACpBtV,OADoB,EAEpB0Y,UAFoB,EAG2B;AAC/C,UAAMolB,WAAW,GAAG39B,QAAQ,CAACH,OAAO,CAACiB,SAARjB,EAAD,CAARG,CAA8BuD,QAA9BvD,CAAuC,QAAvCA,CAApB;;AACA,UAAM0M,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,CAACwG,WAAD,CAAhB,EAA+BplB,UAA/B,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,kBAAjB,EAAqCpoB,IAArC,CAAxB;AAEA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3P,uBAAuB,CAACa,QAAQ,CAACX,MAAM,EAAP,CAAT,CAAnC,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,+BAAlC,CAAN;AACF;;AACA,QAAI6M,GAAG,CAAChF,MAAJgF,KAAe,IAAnB,EAAyB;AACvB,YAAM,IAAIpqB,KAAJ,CAAU,mBAAV,CAAN;AACF;;AACA,WAAOoqB,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACmC,QAA3B+W,2BAA2B,CAC/B3nB,MAD+B,EAEM;AAAA;;AACrC,UAAMnJ,QAAQ,GAAGmJ,MAAH,aAAGA,MAAH,gDAAGA,MAAM,CAAE4nB,sBAAX,0DAAG5nB,sBAAgCvU,GAAhCuU,CAAoCtU,GAAG,IAAIA,GAAG,CAACiB,QAAJjB,EAA3CsU,CAAjB;;AACA,UAAMvJ,IAAI,GAAG,KAAKyqB,UAAL,CAAgBrqB,QAAQ,SAARA,IAAAA,QAAQ,WAARA,IAAAA,QAAQ,CAAEtL,MAAVsL,GAAmB,CAACA,QAAD,CAAnBA,GAAgC,EAAhD,CAAb;;AACA,UAAMsqB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CACtB,6BADsB,EAEtBpoB,IAFsB,CAAxB;AAIA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYzK,oCAAZ,CAAlB;;AACA,QAAI,WAAWd,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,0CAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AACA;AACF;AACA;AACA;AACA;AACA;;;AAC0B,QAAlBiX,kBAAkB,CACtBvlB,UADsB,EAEyC;AAC/D,QAAI;AACF,YAAMsT,GAAG,GAAG,MAAM,KAAK2R,4BAAL,CAAkCjlB,UAAlC,CAAlB;AACA,aAAOsT,GAAG,CAAC7pB,KAAX;AACD,KAHD,CAGE,OAAOw1B,CAAP,EAAU;AACV,YAAM,IAAI/1B,KAAJ,CAAU,qCAAqC+1B,CAA/C,CAAN;AACF;AACF;AAEA;AACF;AACA;AACA;;;AAC0B,QAAlBuG,kBAAkB,CACtBtX,kBADsB,EAEmB;AACzC,QAAI;AACF,YAAMoF,GAAG,GAAG,MAAM,KAAKmS,4BAAL,CAAkCvX,kBAAlC,CAAlB;AACA,aAAOoF,GAAG,CAAC7pB,KAAX;AACD,KAHD,CAGE,OAAOw1B,CAAP,EAAU;AACV,YAAM,IAAI/1B,KAAJ,CAAU,qCAAqC+1B,CAA/C,CAAN;AACF;AACF;AAEA;AACF;AACA;AACA;;;AACoC,QAA5BwG,4BAA4B,CAChCvX,kBADgC,EAEgC;AAChE,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAKyqB,UAAL,CACX,EADW,EAEX5e,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYvD,2BAAZ,CAAlB;;AACA,QAAI,WAAWhI,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,gCAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACkB,QAAVoX,UAAU,GAAqB;AACnC,UAAM7G,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,YAAjB,EAA+B,EAA/B,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACsC,aAAD,CAAzB,CAAlB;;AACA,QAAI,WAAWiC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,uBAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACsB,QAAdqX,cAAc,GAAoB;AACtC,UAAM9G,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmC,EAAnC,CAAxB;AACA,UAAMjJ,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACvB,MAAM,EAAP,CAAzB,CAAlB;;AACA,QAAI,WAAW8F,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,4BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;AA+CE;AACF;AACA;AACE;;;AACc,QAARsX,QAAQ,CACZ1d,IADY,EAEZqY,SAFY,EAQZ;AACA,UAAM;AAACvgB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QAAuBuQ,2BAA2B,CAACsS,SAAD,CAAxD;;AACA,UAAMpsB,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC3d,IAAD,CADW,EAEXlI,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,UAAjB,EAA6BpoB,IAA7B,CAAxB;;AACA,QAAI;AACF,cAAQuJ,MAAR,aAAQA,MAAR,uBAAQA,MAAM,CAAEooB,kBAAhB;AACE,aAAK,UAAL;AAAiB;AACf,kBAAMxS,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYjE,6BAAZ,CAAlB;;AACA,gBAAI,WAAWtH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACF;;AACA,aAAK,MAAL;AAAa;AACX,kBAAMgF,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYlE,yBAAZ,CAAlB;;AACA,gBAAI,WAAWrH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACF;;AACA;AAAS;AACP,kBAAMgF,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYtE,iBAAZ,CAAlB;;AACA,gBAAI,WAAWjH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,kBAAM;AAAC6H,cAAAA;AAAD,gBAAWgF,GAAjB;AACA,mBAAOhF,MAAM,GACT,EACE,GAAGA,MADL;AAEEzH,cAAAA,YAAY,EAAEyH,MAAM,CAACzH,YAAPyH,CAAoBnlB,GAApBmlB,CACZ,CAAC;AAAC/X,gBAAAA,WAAD;AAAc5H,gBAAAA,IAAd;AAAoB0F,gBAAAA;AAApB,eAAD,MAAmC;AACjC1F,gBAAAA,IADiC;AAEjC4H,gBAAAA,WAAW,EAAE,EACX,GAAGA,WADQ;AAEXjP,kBAAAA,OAAO,EAAEgoB,4BAA4B,CACnCjb,OADmC,EAEnCkC,WAAW,CAACjP,OAFuB;AAF1B,iBAFoB;AASjC+M,gBAAAA;AATiC,eAAnC,CADYia;AAFhB,aADS,GAiBT,IAjBJ;AAkBF;AAvCF;AAyCD,KA1CD,CA0CE,OAAO2Q,CAAP,EAAU;AACV,YAAM,IAAIhV,kBAAJ,CACJgV,CADI,EAEJ,+BAFI,CAAN;AAIF;AACF;AAEA;AACF;AACA;AAiBE;;;AACoB,QAAd8G,cAAc,CAClB7d,IADkB,EAElBqY,SAFkB,EAQlB;AACA,UAAM;AAACvgB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QAAuBuQ,2BAA2B,CAACsS,SAAD,CAAxD;;AACA,UAAMpsB,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC3d,IAAD,CADW,EAEXlI,UAFW,EAGX,YAHW,EAIXtC,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,UAAjB,EAA6BpoB,IAA7B,CAAxB;;AACA,QAAI;AACF,cAAQuJ,MAAR,aAAQA,MAAR,uBAAQA,MAAM,CAAEooB,kBAAhB;AACE,aAAK,UAAL;AAAiB;AACf,kBAAMxS,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY/D,mCAAZ,CAAlB;;AACA,gBAAI,WAAWxH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACF;;AACA,aAAK,MAAL;AAAa;AACX,kBAAMgF,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9D,+BAAZ,CAAlB;;AACA,gBAAI,WAAWzH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACF;;AACA;AAAS;AACP,kBAAMgF,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYhE,uBAAZ,CAAlB;;AACA,gBAAI,WAAWvH,GAAf,EAAoB;AAClB,oBAAMA,GAAG,CAAC7M,KAAV;AACF;;AACA,mBAAO6M,GAAG,CAAChF,MAAX;AACF;AArBF;AAuBD,KAxBD,CAwBE,OAAO2Q,CAAP,EAAU;AACV,YAAM,IAAIhV,kBAAJ,CAAuBgV,CAAvB,EAA0C,qBAA1C,CAAN;AACF;AACF;AAEA;AACF;AACA;;AAoCE;AACF;AACA;;;AAC0B,QAAlBkH,kBAAkB,CACtBvF,kBADsB,EAE2B;AACjD,QAAIwF,KAAJ;AACA,QAAIpmB,UAAJ;;AAEA,QAAI,OAAO4gB,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C5gB,MAAAA,UAAU,GAAG4gB,kBAAb5gB;AACD,KAFD,MAEO,IAAI4gB,kBAAJ,EAAwB;AAC7B,YAAM;AAAC5gB,QAAAA,UAAU,EAAEqmB,CAAb;AAAgB,WAAGtZ;AAAnB,UAA2B6T,kBAAjC;AACA5gB,MAAAA,UAAU,GAAGqmB,CAAbrmB;AACAomB,MAAAA,KAAK,GAAGrZ,IAARqZ;AACF;;AAEA,UAAMjyB,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,EAAhB,EAAoB5e,UAApB,EAAgC,QAAhC,EAA0ComB,KAA1C,CAAb;;AACA,UAAMvH,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,oBAAjB,EAAuCpoB,IAAvC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYnN,6BAAZ,CAAlB;;AACA,QAAI,WAAW4B,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,4CAFI,CAAN;AAIF;;AAEA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAeE;AACF;AACA;AACE;;;AACoB,QAAdgY,cAAc,CAClBt5B,SADkB,EAElBuzB,SAFkB,EAG4B;AAC9C,UAAM;AAACvgB,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QAAuBuQ,2BAA2B,CAACsS,SAAD,CAAxD;;AACA,UAAMpsB,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGXrW;AAAS;AAHE,MAIX+T,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3D,uBAAZ,CAAlB;;AACA,QAAI,WAAW5H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,2BAAlC,CAAN;AACF;;AAEA,UAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;AACA,QAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;AAEb,WAAO,EACL,GAAGA,MADE;AAEL/X,MAAAA,WAAW,EAAE,EACX,GAAG+X,MAAM,CAAC/X,WADC;AAEXjP,QAAAA,OAAO,EAAEgoB,4BAA4B,CACnChB,MAAM,CAACja,OAD4B,EAEnCia,MAAM,CAAC/X,WAAP+X,CAAmBhnB,OAFgB;AAF1B;AAFR,KAAP;AAUF;AAEA;AACF;AACA;;;AAC4B,QAApBi/B,oBAAoB,CACxBv5B,SADwB,EAExBkhB,kBAFwB,EAGmB;AAC3C,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;;AAEA,UAAM/Z,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGX,YAHW,EAIXtC,MAJW,CAAb;;AAMA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmCpoB,IAAnC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY1D,6BAAZ,CAAlB;;AACA,QAAI,WAAW7H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,2BAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC6B,QAArBkY,qBAAqB,CACzBvsB,UADyB,EAEzBiU,kBAFyB,EAGsB;AAC/C,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;AAEA,UAAM8F,KAAK,GAAG/Z,UAAU,CAAC9Q,GAAX8Q,CAAejN,SAAS,IAAI;AACxC,YAAMmH,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGX,YAHW,EAIXtC,MAJW,CAAb;;AAMA,aAAO;AACLuW,QAAAA,UAAU,EAAE,gBADP;AAEL9f,QAAAA;AAFK,OAAP;AAID,KAXa8F,CAAd;AAaA,UAAM4kB,SAAS,GAAG,MAAM,KAAKrC,gBAAL,CAAsBxI,KAAtB,CAAxB;AACA,UAAMV,GAAG,GAAGuL,SAAS,CAAC11B,GAAV01B,CAAeA,SAAc,IAAK;AAC5C,YAAMvL,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY1D,6BAAZ,CAAlB;;AACA,UAAI,WAAW7H,GAAf,EAAoB;AAClB,cAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,4BAAlC,CAAN;AACF;;AACA,aAAO6M,GAAG,CAAChF,MAAX;AACD,KANWuQ,CAAZ;AAQA,WAAOvL,GAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAiBE;AACF;AACA;AACA;AACA;AACE;;;AACqB,QAAfmT,eAAe,CACnBxsB,UADmB,EAEnBiU,kBAFmB,EAG+B;AAClD,UAAM;AAAClO,MAAAA,UAAD;AAAatC,MAAAA;AAAb,QACJuQ,2BAA2B,CAACC,kBAAD,CAD7B;AAEA,UAAM8F,KAAK,GAAG/Z,UAAU,CAAC9Q,GAAX8Q,CAAejN,SAAS,IAAI;AACxC,YAAMmH,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGXrW;AAAS;AAHE,QAIX+T,MAJW,CAAb;;AAMA,aAAO;AACLuW,QAAAA,UAAU,EAAE,gBADP;AAEL9f,QAAAA;AAFK,OAAP;AAID,KAXa8F,CAAd;AAaA,UAAM4kB,SAAS,GAAG,MAAM,KAAKrC,gBAAL,CAAsBxI,KAAtB,CAAxB;AACA,UAAMV,GAAG,GAAGuL,SAAS,CAAC11B,GAAV01B,CAAeA,SAAc,IAAK;AAC5C,YAAMvL,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3D,uBAAZ,CAAlB;;AACA,UAAI,WAAW5H,GAAf,EAAoB;AAClB,cAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,4BAAlC,CAAN;AACF;;AACA,YAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;AACA,UAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;AAEb,aAAO,EACL,GAAGA,MADE;AAEL/X,QAAAA,WAAW,EAAE,EACX,GAAG+X,MAAM,CAAC/X,WADC;AAEXjP,UAAAA,OAAO,EAAEgoB,4BAA4B,CACnChB,MAAM,CAACja,OAD4B,EAEnCia,MAAM,CAAC/X,WAAP+X,CAAmBhnB,OAFgB;AAF1B;AAFR,OAAP;AAUD,KAlBWu3B,CAAZ;AAoBA,WAAOvL,GAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACyB,QAAjBoT,iBAAiB,CACrBxe,IADqB,EAErBlI,UAFqB,EAGI;AACzB,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CAAgC,CAAC3d,IAAD,CAAhC,EAAwClI,UAAxC,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,mBAAjB,EAAsCpoB,IAAtC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY7D,0BAAZ,CAAlB;;AAEA,QAAI,WAAW1H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,+BAAlC,CAAN;AACF;;AAEA,UAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIplB,KAAJ,CAAU,qBAAqBgf,IAArB,GAA4B,YAAtC,CAAN;AACF;;AAEA,UAAMye,KAAK,GAAG,EACZ,GAAGrY,MADS;AAEZzH,MAAAA,YAAY,EAAEyH,MAAM,CAACzH,YAAPyH,CAAoBnlB,GAApBmlB,CAAwB,CAAC;AAAC/X,QAAAA,WAAD;AAAc5H,QAAAA;AAAd,OAAD,KAAyB;AAC7D,cAAMrH,OAAO,GAAG,IAAIyM,OAAJ,CAAYwC,WAAW,CAACjP,OAAxB,CAAhB;AACA,eAAO;AACLqH,UAAAA,IADK;AAEL4H,UAAAA,WAAW,EAAE,EACX,GAAGA,WADQ;AAEXjP,YAAAA;AAFW;AAFR,SAAP;AAOD,OATagnB;AAFF,KAAd;AAcA,WAAO,EACL,GAAGqY,KADE;AAEL9f,MAAAA,YAAY,EAAE8f,KAAK,CAAC9f,YAAN8f,CAAmBx9B,GAAnBw9B,CAAuB,CAAC;AAACpwB,QAAAA,WAAD;AAAc5H,QAAAA;AAAd,OAAD,KAAyB;AAC5D,eAAO;AACLA,UAAAA,IADK;AAEL4H,UAAAA,WAAW,EAAEyD,WAAW,CAACgE,QAAZhE,CACXzD,WAAW,CAACjP,OADD0S,EAEXzD,WAAW,CAAC0D,UAFDD;AAFR,SAAP;AAOD,OARa2sB;AAFT,KAAP;AAYF;AAEA;AACF;AACA;;;AACiB,QAATC,SAAS,CACbxC,SADa,EAEbyC,OAFa,EAGb7mB,UAHa,EAIW;AACxB,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACXgB,OAAO,KAAKl9B,SAAZk9B,GAAwB,CAACzC,SAAD,EAAYyC,OAAZ,CAAxBA,GAA+C,CAACzC,SAAD,CADpC,EAEXpkB,UAFW,CAAb;;AAIA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,WAAjB,EAA8BpoB,IAA9B,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9P,aAAa,CAACnI,KAAK,CAACwI,MAAM,EAAP,CAAN,CAAzB,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,sBAAlC,CAAN;AACF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AAC0B,QAAlBwY,kBAAkB,CACtB5e,IADsB,EAEtBlI,UAFsB,EAGI;AAC1B,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC3d,IAAD,CADW,EAEXlI,UAFW,EAGXrW,SAHW,EAIX;AACEm8B,MAAAA,kBAAkB,EAAE,YADtB;AAEEpL,MAAAA,OAAO,EAAE;AAFX,KAJW,CAAb;;AASA,UAAMmE,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,UAAjB,EAA6BpoB,IAA7B,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY5D,2BAAZ,CAAlB;;AACA,QAAI,WAAW3H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,qBAAlC,CAAN;AACF;;AACA,UAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIplB,KAAJ,CAAU,WAAWgf,IAAX,GAAkB,YAA5B,CAAN;AACF;;AACA,WAAOoG,MAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACmC,QAA3ByY,2BAA2B,CAC/B7e,IAD+B,EAE/BlI,UAF+B,EAGL;AAC1B,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC3d,IAAD,CADW,EAEXlI,UAFW,EAGXrW,SAHW,EAIX;AACEm8B,MAAAA,kBAAkB,EAAE,YADtB;AAEEpL,MAAAA,OAAO,EAAE;AAFX,KAJW,CAAb;;AASA,UAAMmE,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,mBAAjB,EAAsCpoB,IAAtC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY5D,2BAAZ,CAAlB;;AACA,QAAI,WAAW3H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,+BAAlC,CAAN;AACF;;AACA,UAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIplB,KAAJ,CAAU,qBAAqBgf,IAArB,GAA4B,YAAtC,CAAN;AACF;;AACA,WAAOoG,MAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AAC+B,QAAvB0Y,uBAAuB,CAC3Bh6B,SAD2B,EAE3BgT,UAF2B,EAGW;AACtC,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CAAgC,CAAC74B,SAAD,CAAhC,EAA6CgT,UAA7C,CAAb;;AACA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3D,uBAAZ,CAAlB;;AACA,QAAI,WAAW5H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CAAuBqJ,GAAG,CAAC7M,KAA3B,EAAkC,2BAAlC,CAAN;AACF;;AAEA,UAAM6H,MAAM,GAAGgF,GAAG,CAAChF,MAAnB;AACA,QAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;AAEb,UAAMhnB,OAAO,GAAG,IAAIyM,OAAJ,CAAYua,MAAM,CAAC/X,WAAP+X,CAAmBhnB,OAA/B,CAAhB;AACA,UAAM2S,UAAU,GAAGqU,MAAM,CAAC/X,WAAP+X,CAAmBrU,UAAtC;AACA,WAAO,EACL,GAAGqU,MADE;AAEL/X,MAAAA,WAAW,EAAEyD,WAAW,CAACgE,QAAZhE,CAAqB1S,OAArB0S,EAA8BC,UAA9BD;AAFR,KAAP;AAIF;AAEA;AACF;AACA;AACA;AACA;;;AACqC,QAA7BitB,6BAA6B,CACjCj6B,SADiC,EAEjCgT,UAFiC,EAGW;AAC5C,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGX,YAHW,CAAb;;AAKA,UAAM6e,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY1D,6BAAZ,CAAlB;;AACA,QAAI,WAAW7H,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,qCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACsC,QAA9B4Y,8BAA8B,CAClCjtB,UADkC,EAElC+F,UAFkC,EAGc;AAChD,UAAMgU,KAAK,GAAG/Z,UAAU,CAAC9Q,GAAX8Q,CAAejN,SAAS,IAAI;AACxC,YAAMmH,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC74B,SAAD,CADW,EAEXgT,UAFW,EAGX,YAHW,CAAb;;AAKA,aAAO;AACLiU,QAAAA,UAAU,EAAE,yBADP;AAEL9f,QAAAA;AAFK,OAAP;AAID,KAVa8F,CAAd;AAYA,UAAM4kB,SAAS,GAAG,MAAM,KAAKrC,gBAAL,CAAsBxI,KAAtB,CAAxB;AACA,UAAMV,GAAG,GAAGuL,SAAS,CAAC11B,GAAV01B,CAAeA,SAAc,IAAK;AAC5C,YAAMvL,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY1D,6BAAZ,CAAlB;;AACA,UAAI,WAAW7H,GAAf,EAAoB;AAClB,cAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,sCAFI,CAAN;AAIF;;AACA,aAAO6M,GAAG,CAAChF,MAAX;AACD,KATWuQ,CAAZ;AAWA,WAAOvL,GAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwC,QAAhC6T,gCAAgC,CACpCp7B,OADoC,EAEpCq4B,SAFoC,EAGpCyC,OAHoC,EAIE;AACtC,QAAIjnB,OAAY,GAAG,EAAnB;AAEA,QAAIwnB,mBAAmB,GAAG,MAAM,KAAKhI,sBAAL,EAAhC;;AACA,WAAO,EAAE,WAAWxf,OAAb,CAAP,EAA8B;AAC5BwkB,MAAAA,SAAS;;AACT,UAAIA,SAAS,IAAI,CAAbA,IAAkBA,SAAS,GAAGgD,mBAAlC,EAAuD;AACrD;AACF;;AAEA,UAAI;AACF,cAAMT,KAAK,GAAG,MAAM,KAAKI,2BAAL,CAClB3C,SADkB,EAElB,WAFkB,CAApB;;AAIA,YAAIuC,KAAK,CAAC1sB,UAAN0sB,CAAiB19B,MAAjB09B,GAA0B,CAA9B,EAAiC;AAC/B/mB,UAAAA,OAAO,CAACynB,KAARznB,GACE+mB,KAAK,CAAC1sB,UAAN0sB,CAAiBA,KAAK,CAAC1sB,UAAN0sB,CAAiB19B,MAAjB09B,GAA0B,CAA3CA,EAA8C37B,QAA9C27B,EADF/mB;AAEF;AACD,OATD,CASE,OAAO3T,GAAP,EAAY;AACZ,YAAIA,GAAG,YAAY/C,KAAf+C,IAAwBA,GAAG,CAAC3E,OAAJ2E,CAAYqP,QAAZrP,CAAqB,SAArBA,CAA5B,EAA6D;AAC3D;AACD,SAFD,MAEO;AACL,gBAAMA,GAAN;AACF;AACF;AACF;;AAEA,QAAIq7B,oBAAoB,GAAG,MAAM,KAAKrD,OAAL,CAAa,WAAb,CAAjC;;AACA,WAAO,EAAE,YAAYrkB,OAAd,CAAP,EAA+B;AAC7BinB,MAAAA,OAAO;;AACP,UAAIA,OAAO,GAAGS,oBAAd,EAAoC;AAClC;AACF;;AAEA,UAAI;AACF,cAAMX,KAAK,GAAG,MAAM,KAAKI,2BAAL,CAAiCF,OAAjC,CAApB;;AACA,YAAIF,KAAK,CAAC1sB,UAAN0sB,CAAiB19B,MAAjB09B,GAA0B,CAA9B,EAAiC;AAC/B/mB,UAAAA,OAAO,CAAC2nB,MAAR3nB,GACE+mB,KAAK,CAAC1sB,UAAN0sB,CAAiBA,KAAK,CAAC1sB,UAAN0sB,CAAiB19B,MAAjB09B,GAA0B,CAA3CA,EAA8C37B,QAA9C27B,EADF/mB;AAEF;AACD,OAND,CAME,OAAO3T,GAAP,EAAY;AACZ,YAAIA,GAAG,YAAY/C,KAAf+C,IAAwBA,GAAG,CAAC3E,OAAJ2E,CAAYqP,QAAZrP,CAAqB,SAArBA,CAA5B,EAA6D;AAC3D;AACD,SAFD,MAEO;AACL,gBAAMA,GAAN;AACF;AACF;AACF;;AAEA,UAAMu7B,sBAAsB,GAAG,MAAM,KAAKC,iCAAL,CACnC17B,OADmC,EAEnC6T,OAFmC,CAArC;AAIA,WAAO4nB,sBAAsB,CAACr+B,GAAvBq+B,CAA2BhV,IAAI,IAAIA,IAAI,CAACxlB,SAAxCw6B,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACyC,QAAjCC,iCAAiC,CACrC17B,OADqC,EAErC6T,OAFqC,EAGrCI,UAHqC,EAIG;AACxC,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC95B,OAAO,CAAC1B,QAAR0B,EAAD,CADW,EAEXiU,UAFW,EAGXrW,SAHW,EAIXiW,OAJW,CAAb;;AAMA,UAAMif,SAAS,GAAG,MAAM,KAAKtC,WAAL,CACtB,mCADsB,EAEtBpoB,IAFsB,CAAxB;AAIA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY9I,0CAAZ,CAAlB;;AACA,QAAI,WAAWzC,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,gDAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,QAAvBoZ,uBAAuB,CAC3B37B,OAD2B,EAE3B6T,OAF2B,EAG3BI,UAH2B,EAIa;AACxC,UAAM7L,IAAI,GAAG,KAAK0xB,0BAAL,CACX,CAAC95B,OAAO,CAAC1B,QAAR0B,EAAD,CADW,EAEXiU,UAFW,EAGXrW,SAHW,EAIXiW,OAJW,CAAb;;AAMA,UAAMif,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,yBAAjB,EAA4CpoB,IAA5C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3I,gCAAZ,CAAlB;;AACA,QAAI,WAAW5C,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEJ,sCAFI,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;;AAE2B,QAArBqZ,qBAAqB,CACzBr0B,UADyB,EAEzBoK,MAFyB,EAGyC;AAClE,UAAM;AAACyR,MAAAA,OAAD;AAAU1lB,MAAAA,KAAK,EAAEm+B;AAAjB,QAAgC,MAAM,KAAKzH,wBAAL,CAC1C7sB,UAD0C,EAE1CoK,MAF0C,CAA5C;AAKA,QAAIjU,KAAK,GAAG,IAAZ;;AACA,QAAIm+B,WAAW,KAAK,IAApB,EAA0B;AACxBn+B,MAAAA,KAAK,GAAG,IAAImiB,yBAAJ,CAA8B;AACpCxiB,QAAAA,GAAG,EAAEkK,UAD+B;AAEpCJ,QAAAA,KAAK,EAAE0Y,yBAAyB,CAACjjB,WAA1BijB,CAAsCgc,WAAW,CAACl/B,IAAlDkjB;AAF6B,OAA9B,CAARniB;AAIF;;AAEA,WAAO;AACL0lB,MAAAA,OADK;AAEL1lB,MAAAA;AAFK,KAAP;AAIF;AAEA;AACF;AACA;;;AAC0B,QAAlB65B,kBAAkB,CACtB7hB,YADsB,EAEtByM,kBAFsB,EAG+B;AACrD,UAAM;AAACiB,MAAAA,OAAD;AAAU1lB,MAAAA,KAAK,EAAEm+B;AAAjB,QAAgC,MAAM,KAAKzH,wBAAL,CAC1C1e,YAD0C,EAE1CyM,kBAF0C,CAA5C;AAKA,QAAIzkB,KAAK,GAAG,IAAZ;;AACA,QAAIm+B,WAAW,KAAK,IAApB,EAA0B;AACxBn+B,MAAAA,KAAK,GAAG4X,YAAY,CAACG,eAAbH,CAA6BumB,WAAW,CAACl/B,IAAzC2Y,CAAR5X;AACF;;AAEA,WAAO;AACL0lB,MAAAA,OADK;AAEL1lB,MAAAA;AAFK,KAAP;AAIF;AAEA;AACF;AACA;;;AACgB,QAARo+B,QAAQ,CACZpmB,YADY,EAEZyM,kBAFY,EAGkB;AAC9B,WAAO,MAAM,KAAKoV,kBAAL,CAAwB7hB,YAAxB,EAAsCyM,kBAAtC,EACV6Q,IADU,CACLrjB,CAAC,IAAIA,CAAC,CAACjS,KADF,EAEVu1B,KAFU,CAEJC,CAAC,IAAI;AACV,YAAM,IAAI/1B,KAAJ,CACJ,qCACEuY,YAAY,CAACpX,QAAboX,EADF,GAEE,IAFF,GAGEwd,CAJE,CAAN;AAMD,KATU,CAAb;AAUF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,QAAd6I,cAAc,CAClBC,EADkB,EAElBrlB,QAFkB,EAGa;AAC/B,UAAMmc,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,gBAAjB,EAAmC,CACzDwL,EAAE,CAAC19B,QAAH09B,EADyD,EAEzDrlB,QAFyD,CAAnC,CAAxB;AAIA,UAAM4Q,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYhD,uBAAZ,CAAlB;;AACA,QAAI,WAAWvI,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,cAAashB,EAAE,CAAC19B,QAAH09B,EAAc,SAFxB,CAAN;AAIF;;AACA,WAAOzU,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACuC,QAA/B0Z,+BAA+B,CACnCC,YADmC,EAEM;AACzC,QAAI,CAACA,YAAL,EAAmB;AACjB;AACA,aAAO,KAAKlL,iBAAZ,EAA+B;AAC7B,cAAMvc,KAAK,CAAC,GAAD,CAAX;AACF;;AACA,YAAM0nB,cAAc,GAAGC,IAAI,CAACC,GAALD,KAAa,KAAKnL,cAAL,CAAoBE,SAAxD;;AACA,YAAMmL,OAAO,GAAGH,cAAc,IAAIra,0BAAlC;;AACA,UAAI,KAAKmP,cAAL,CAAoBC,eAApB,KAAwC,IAAxC,IAAgD,CAACoL,OAArD,EAA8D;AAC5D,eAAO,KAAKrL,cAAL,CAAoBC,eAA3B;AACF;AACF;;AAEA,WAAO,MAAM,KAAKqL,iBAAL,EAAb;AACF;AAEA;AACF;AACA;;;AACyB,QAAjBA,iBAAiB,GAA4C;AACjE,SAAKvL,iBAAL,GAAyB,IAAzB;;AACA,QAAI;AACF,YAAMwL,SAAS,GAAGJ,IAAI,CAACC,GAALD,EAAlB;AACA,YAAMK,qBAAqB,GAAG,KAAKxL,cAAL,CAAoBC,eAAlD;AACA,YAAMwL,eAAe,GAAGD,qBAAqB,GACzCA,qBAAqB,CAAC7tB,SADmB,GAEzC,IAFJ;;AAGA,WAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAMsmB,eAAe,GAAG,MAAM,KAAKuI,kBAAL,CAAwB,WAAxB,CAA9B;;AAEA,YAAIiD,eAAe,KAAKxL,eAAe,CAACtiB,SAAxC,EAAmD;AACjD,eAAKqiB,cAAL,GAAsB;AACpBC,YAAAA,eADoB;AAEpBC,YAAAA,SAAS,EAAEiL,IAAI,CAACC,GAALD,EAFS;AAGpBhL,YAAAA,qBAAqB,EAAE,EAHH;AAIpBC,YAAAA,mBAAmB,EAAE;AAJD,WAAtB;AAMA,iBAAOH,eAAP;AACF,SAX2B,CAa3B;;;AACA,cAAMzc,KAAK,CAACkL,WAAW,GAAG,CAAf,CAAX;AACF;;AAEA,YAAM,IAAIxiB,KAAJ,CACsCi/B,0CAAAA,IAAI,CAACC,GAALD,KAAaI,SAAU,IAD7D,CAAN;AAGD,KA1BD,SA0BU;AACR,WAAKxL,iBAAL,GAAyB,KAAzB;AACF;AACF;AAEA;AACF;AACA;;;AACiC,QAAzB2L,yBAAyB,CAC7BhrB,MAD6B,EAEW;AACxC,UAAM;AAACsC,MAAAA,UAAD;AAAatC,MAAAA,MAAM,EAAE4hB;AAArB,QAAkCrR,2BAA2B,CAACvQ,MAAD,CAAnE;;AACA,UAAMvJ,IAAI,GAAG,KAAKyqB,UAAL,CAAgB,EAAhB,EAAoB5e,UAApB,EAAgC,QAAhC,EAA0Csf,SAA1C,CAAb;;AACA,UAAMT,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,2BAAjB,EAA8CpoB,IAA9C,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY3P,uBAAuB,CAACE,MAAM,EAAP,CAAnC,CAAlB;;AACA,QAAI,WAAWkE,GAAf,EAAoB;AAClB,YAAM,IAAIrJ,kBAAJ,CACJqJ,GAAG,CAAC7M,KADA,EAEH,wCAFG,CAAN;AAIF;;AACA,WAAO6M,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;AAgBE;AACF;AACA;AACE;;;AACyB,QAAnBqa,mBAAmB,CACvBC,oBADuB,EAEvBC,eAFuB,EAGvBC,eAHuB,EAIuC;AAC9D,QAAI,aAAaF,oBAAjB,EAAuC;AACrC,YAAMG,WAAW,GAAGH,oBAApB;AACA,YAAM9qB,eAAe,GAAGirB,WAAW,CAACxgC,SAAZwgC,EAAxB;AACA,YAAMC,kBAAkB,GACtBrhC,MAAM,CAACE,IAAPF,CAAYmW,eAAZnW,EAA6BqD,QAA7BrD,CAAsC,QAAtCA,CADF;;AAEA,UAAI2I,KAAK,CAACC,OAAND,CAAcu4B,eAAdv4B,KAAkCw4B,eAAe,KAAKn/B,SAA1D,EAAqE;AACnE,cAAM,IAAIT,KAAJ,CAAU,mBAAV,CAAN;AACF;;AAEA,YAAMwU,MAAW,GAAGmrB,eAAe,IAAI,EAAvC;AACAnrB,MAAAA,MAAM,CAACmjB,QAAPnjB,GAAkB,QAAlBA;;AACA,UAAI,EAAE,gBAAgBA,MAAlB,CAAJ,EAA+B;AAC7BA,QAAAA,MAAM,CAACsC,UAAPtC,GAAoB,KAAKsC,UAAzBtC;AACF;;AAEA,YAAMvJ,IAAI,GAAG,CAAC60B,kBAAD,EAAqBtrB,MAArB,CAAb;AACA,YAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,qBAAjB,EAAwCpoB,IAAxC,CAAxB;AACA,YAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYvN,kCAAZ,CAAlB;;AACA,UAAI,WAAWgC,GAAf,EAAoB;AAClB,cAAM,IAAIpqB,KAAJ,CAAU,qCAAqCoqB,GAAG,CAAC7M,KAAJ6M,CAAUhsB,OAAzD,CAAN;AACF;;AACA,aAAOgsB,GAAG,CAAChF,MAAX;AACF;;AAEA,QAAI/X,WAAJ;;AACA,QAAIqyB,oBAAoB,YAAY5uB,WAApC,EAAiD;AAC/C,UAAIivB,UAAuB,GAAGL,oBAA9B;AACAryB,MAAAA,WAAW,GAAG,IAAIyD,WAAJ,EAAdzD;AACAA,MAAAA,WAAW,CAAC2D,QAAZ3D,GAAuB0yB,UAAU,CAAC/uB,QAAlC3D;AACAA,MAAAA,WAAW,CAACpI,YAAZoI,GAA2BqyB,oBAAoB,CAACz6B,YAAhDoI;AACAA,MAAAA,WAAW,CAAC6D,SAAZ7D,GAAwB0yB,UAAU,CAAC7uB,SAAnC7D;AACAA,MAAAA,WAAW,CAAC0D,UAAZ1D,GAAyB0yB,UAAU,CAAChvB,UAApC1D;AACD,KAPD,MAOO;AACLA,MAAAA,WAAW,GAAGyD,WAAW,CAACgE,QAAZhE,CAAqB4uB,oBAArB5uB,CAAdzD,CADK,CAEL;;AACAA,MAAAA,WAAW,CAAC+D,QAAZ/D,GAAuBA,WAAW,CAACgE,KAAZhE,GAAoB5M,SAA3C4M;AACF;;AAEA,QAAIsyB,eAAe,KAAKl/B,SAApBk/B,IAAiC,CAACv4B,KAAK,CAACC,OAAND,CAAcu4B,eAAdv4B,CAAtC,EAAsE;AACpE,YAAM,IAAIpH,KAAJ,CAAU,mBAAV,CAAN;AACF;;AAEA,UAAM2R,OAAO,GAAGguB,eAAhB;;AACA,QAAItyB,WAAW,CAAC6D,SAAZ7D,IAAyBsE,OAA7B,EAAsC;AACpCtE,MAAAA,WAAW,CAAClP,IAAZkP,CAAiB,GAAGsE,OAApBtE;AACD,KAFD,MAEO;AACL,UAAI0xB,YAAY,GAAG,KAAKnL,wBAAxB;;AACA,eAAS;AACP,cAAMG,eAAe,GAAG,MAAM,KAAK+K,+BAAL,CAC5BC,YAD4B,CAA9B;AAGA1xB,QAAAA,WAAW,CAAC4D,oBAAZ5D,GAAmC0mB,eAAe,CAAC9iB,oBAAnD5D;AACAA,QAAAA,WAAW,CAACtC,eAAZsC,GAA8B0mB,eAAe,CAACtiB,SAA9CpE;AAEA,YAAI,CAACsE,OAAL,EAAc;AAEdtE,QAAAA,WAAW,CAAClP,IAAZkP,CAAiB,GAAGsE,OAApBtE;;AACA,YAAI,CAACA,WAAW,CAACvJ,SAAjB,EAA4B;AAC1B,gBAAM,IAAI9D,KAAJ,CAAU,YAAV,CAAN,CAD0B,CACI;AAChC;;AAEA,cAAM8D,SAAS,GAAGuJ,WAAW,CAACvJ,SAAZuJ,CAAsBvL,QAAtBuL,CAA+B,QAA/BA,CAAlB;;AACA,YACE,CAAC,KAAKymB,cAAL,CAAoBI,mBAApB,CAAwC9hB,QAAxC,CAAiDtO,SAAjD,CAAD,IACA,CAAC,KAAKgwB,cAAL,CAAoBG,qBAApB,CAA0C7hB,QAA1C,CAAmDtO,SAAnD,CAFH,EAGE;AACA;AACA;AACA,eAAKgwB,cAAL,CAAoBI,mBAApB,CAAwCzvB,IAAxC,CAA6CX,SAA7C;;AACA;AACD,SARD,MAQO;AACL;AACA;AACA;AACA;AACAi7B,UAAAA,YAAY,GAAG,IAAfA;AACF;AACF;AACF;;AAEA,UAAM3gC,OAAO,GAAGiP,WAAW,CAAC8F,QAAZ9F,EAAhB;;AACA,UAAMC,QAAQ,GAAGlP,OAAO,CAACiB,SAARjB,EAAjB;;AACA,UAAMwW,eAAe,GAAGvH,WAAW,CAACoH,UAAZpH,CAAuBC,QAAvBD,CAAxB;;AACA,UAAMyyB,kBAAkB,GAAGlrB,eAAe,CAAC9S,QAAhB8S,CAAyB,QAAzBA,CAA3B;AACA,UAAMJ,MAAW,GAAG;AAClBmjB,MAAAA,QAAQ,EAAE,QADQ;AAElB7gB,MAAAA,UAAU,EAAE,KAAKA;AAFC,KAApB;;AAKA,QAAI8oB,eAAJ,EAAqB;AACnB,YAAM31B,SAAS,GAAG,CAChB7C,KAAK,CAACC,OAAND,CAAcw4B,eAAdx4B,IACIw4B,eADJx4B,GAEIhJ,OAAO,CAACiO,aAARjO,EAHY,EAIhB6B,GAJgB,CAIZC,GAAG,IAAIA,GAAG,CAACiB,QAAJjB,EAJK,CAAlB;AAMAsU,MAAAA,MAAM,CAAC,UAAD,CAANA,GAAqB;AACnBmjB,QAAAA,QAAQ,EAAE,QADS;AAEnB1tB,QAAAA;AAFmB,OAArBuK;AAIF;;AAEA,QAAI7C,OAAJ,EAAa;AACX6C,MAAAA,MAAM,CAACwrB,SAAPxrB,GAAmB,IAAnBA;AACF;;AAEA,UAAMvJ,IAAI,GAAG,CAAC60B,kBAAD,EAAqBtrB,MAArB,CAAb;AACA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,qBAAjB,EAAwCpoB,IAAxC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAYvN,kCAAZ,CAAlB;;AACA,QAAI,WAAWgC,GAAf,EAAoB;AAClB,UAAIvK,IAAJ;;AACA,UAAI,UAAUuK,GAAG,CAAC7M,KAAlB,EAAyB;AACvBsC,QAAAA,IAAI,GAAGuK,GAAG,CAAC7M,KAAJ6M,CAAU5qB,IAAV4qB,CAAevK,IAAtBA;;AACA,YAAIA,IAAI,IAAIzY,KAAK,CAACC,OAAND,CAAcyY,IAAdzY,CAAZ,EAAiC;AAC/B,gBAAM64B,WAAW,GAAG,QAApB;AACA,gBAAMC,QAAQ,GAAGD,WAAW,GAAGpgB,IAAI,CAACsgB,IAALtgB,CAAUogB,WAAVpgB,CAA/B;AACA5N,UAAAA,OAAO,CAACsL,KAARtL,CAAcmY,GAAG,CAAC7M,KAAJ6M,CAAUhsB,OAAxB6T,EAAiCiuB,QAAjCjuB;AACF;AACF;;AACA,YAAM,IAAI2N,oBAAJ,CACJ,qCAAqCwK,GAAG,CAAC7M,KAAJ6M,CAAUhsB,OAD3C,EAEJyhB,IAFI,CAAN;AAIF;;AACA,WAAOuK,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;AAgBE;AACF;AACA;AACE;;;AACqB,QAAfpO,eAAe,CACnB3J,WADmB,EAEnB+yB,gBAFmB,EAGnB1pB,OAHmB,EAIY;AAC/B,QAAI,aAAarJ,WAAjB,EAA8B;AAC5B,UAAI+yB,gBAAgB,IAAIh5B,KAAK,CAACC,OAAND,CAAcg5B,gBAAdh5B,CAAxB,EAAyD;AACvD,cAAM,IAAIpH,KAAJ,CAAU,mBAAV,CAAN;AACF;;AAEA,YAAM4U,eAAe,GAAGvH,WAAW,CAAChO,SAAZgO,EAAxB;AACA,aAAO,MAAM,KAAKgzB,kBAAL,CAAwBzrB,eAAxB,EAAyCwrB,gBAAzC,CAAb;AACF;;AAEA,QAAIA,gBAAgB,KAAK3/B,SAArB2/B,IAAkC,CAACh5B,KAAK,CAACC,OAAND,CAAcg5B,gBAAdh5B,CAAvC,EAAwE;AACtE,YAAM,IAAIpH,KAAJ,CAAU,mBAAV,CAAN;AACF;;AAEA,UAAM2R,OAAO,GAAGyuB,gBAAhB;;AACA,QAAI/yB,WAAW,CAAC6D,SAAhB,EAA2B;AACzB7D,MAAAA,WAAW,CAAClP,IAAZkP,CAAiB,GAAGsE,OAApBtE;AACD,KAFD,MAEO;AACL,UAAI0xB,YAAY,GAAG,KAAKnL,wBAAxB;;AACA,eAAS;AACP,cAAMG,eAAe,GAAG,MAAM,KAAK+K,+BAAL,CAC5BC,YAD4B,CAA9B;AAGA1xB,QAAAA,WAAW,CAAC4D,oBAAZ5D,GAAmC0mB,eAAe,CAAC9iB,oBAAnD5D;AACAA,QAAAA,WAAW,CAACtC,eAAZsC,GAA8B0mB,eAAe,CAACtiB,SAA9CpE;AACAA,QAAAA,WAAW,CAAClP,IAAZkP,CAAiB,GAAGsE,OAApBtE;;AACA,YAAI,CAACA,WAAW,CAACvJ,SAAjB,EAA4B;AAC1B,gBAAM,IAAI9D,KAAJ,CAAU,YAAV,CAAN,CAD0B,CACI;AAChC;;AAEA,cAAM8D,SAAS,GAAGuJ,WAAW,CAACvJ,SAAZuJ,CAAsBvL,QAAtBuL,CAA+B,QAA/BA,CAAlB;;AACA,YAAI,CAAC,KAAKymB,cAAL,CAAoBG,qBAApB,CAA0C7hB,QAA1C,CAAmDtO,SAAnD,CAAL,EAAoE;AAClE;AACA;AACA,eAAKgwB,cAAL,CAAoBG,qBAApB,CAA0CxvB,IAA1C,CAA+CX,SAA/C;;AACA;AACD,SALD,MAKO;AACL;AACA;AACA;AACA;AACAi7B,UAAAA,YAAY,GAAG,IAAfA;AACF;AACF;AACF;;AAEA,UAAMnqB,eAAe,GAAGvH,WAAW,CAAChO,SAAZgO,EAAxB;AACA,WAAO,MAAM,KAAKgzB,kBAAL,CAAwBzrB,eAAxB,EAAyC8B,OAAzC,CAAb;AACF;AAEA;AACF;AACA;AACA;;;AAC0B,QAAlB2pB,kBAAkB,CACtBC,cADsB,EAEtB5pB,OAFsB,EAGS;AAC/B,UAAMopB,kBAAkB,GAAGvhC,QAAQ,CAAC+hC,cAAD,CAAR/hC,CAAyBuD,QAAzBvD,CAAkC,QAAlCA,CAA3B;AACA,UAAM6mB,MAAM,GAAG,MAAM,KAAKmb,sBAAL,CACnBT,kBADmB,EAEnBppB,OAFmB,CAArB;AAIA,WAAO0O,MAAP;AACF;AAEA;AACF;AACA;AACA;;;AAC8B,QAAtBmb,sBAAsB,CAC1BT,kBAD0B,EAE1BppB,OAF0B,EAGK;AAC/B,UAAMlC,MAAW,GAAG;AAACmjB,MAAAA,QAAQ,EAAE;AAAX,KAApB;AACA,UAAM/gB,aAAa,GAAGF,OAAO,IAAIA,OAAO,CAACE,aAAzC;AACA,UAAMC,mBAAmB,GACtBH,OAAO,IAAIA,OAAO,CAACG,mBAAnBH,IAA2C,KAAKI,UADnD;;AAGA,QAAIJ,OAAO,IAAIA,OAAO,CAACK,UAARL,IAAsB,IAArC,EAA2C;AACzClC,MAAAA,MAAM,CAACuC,UAAPvC,GAAoBkC,OAAO,CAACK,UAA5BvC;AACF;;AACA,QAAIkC,OAAO,IAAIA,OAAO,CAAClF,cAARkF,IAA0B,IAAzC,EAA+C;AAC7ClC,MAAAA,MAAM,CAAChD,cAAPgD,GAAwBkC,OAAO,CAAClF,cAAhCgD;AACF;;AACA,QAAIoC,aAAJ,EAAmB;AACjBpC,MAAAA,MAAM,CAACoC,aAAPpC,GAAuBoC,aAAvBpC;AACF;;AACA,QAAIqC,mBAAJ,EAAyB;AACvBrC,MAAAA,MAAM,CAACqC,mBAAPrC,GAA6BqC,mBAA7BrC;AACF;;AAEA,UAAMvJ,IAAI,GAAG,CAAC60B,kBAAD,EAAqBtrB,MAArB,CAAb;AACA,UAAMmhB,SAAS,GAAG,MAAM,KAAKtC,WAAL,CAAiB,iBAAjB,EAAoCpoB,IAApC,CAAxB;AACA,UAAMmf,GAAG,GAAGrE,MAAM,CAAC4P,SAAD,EAAY/C,wBAAZ,CAAlB;;AACA,QAAI,WAAWxI,GAAf,EAAoB;AAClB,UAAIvK,IAAJ;;AACA,UAAI,UAAUuK,GAAG,CAAC7M,KAAlB,EAAyB;AACvBsC,QAAAA,IAAI,GAAGuK,GAAG,CAAC7M,KAAJ6M,CAAU5qB,IAAV4qB,CAAevK,IAAtBA;AACF;;AACA,YAAM,IAAID,oBAAJ,CACJ,iCAAiCwK,GAAG,CAAC7M,KAAJ6M,CAAUhsB,OADvC,EAEJyhB,IAFI,CAAN;AAIF;;AACA,WAAOuK,GAAG,CAAChF,MAAX;AACF;AAEA;AACF;AACA;;;AACE0P,EAAAA,SAAS,GAAG;AACV,SAAKtB,sBAAL,GAA8B,IAA9B;AACA,SAAKC,sBAAL,GAA8B+M,WAAW,CAAC,MAAM;AAC9C;AACA,OAAC,YAAY;AACX,YAAI;AACF,gBAAM,KAAKjN,aAAL,CAAmBnR,MAAnB,CAA0B,MAA1B,CAAN,CADE,CAEF;AACD,SAHD,CAGE,MAAM,CAAC;AACV,OALD;AAMD,KARwC,EAQtC,IARsC,CAAzC;;AASA,SAAKqe,oBAAL;AACF;AAEA;AACF;AACA;;;AACE1L,EAAAA,UAAU,CAAChyB,GAAD,EAAa;AACrB,SAAKywB,sBAAL,GAA8B,KAA9B;AACAvhB,IAAAA,OAAO,CAACsL,KAARtL,CAAc,WAAdA,EAA2BlP,GAAG,CAAC3E,OAA/B6T;AACF;AAEA;AACF;AACA;;;AACE+iB,EAAAA,UAAU,CAAChU,IAAD,EAAe;AACvB,SAAKwS,sBAAL,GAA8B,KAA9B;AACA,SAAKG,uBAAL,GACE,CAAC,KAAKA,uBAAL,GAA+B,CAAhC,IAAqC+M,MAAM,CAACC,gBAD9C;;AAEA,QAAI,KAAKjN,wBAAT,EAAmC;AACjCkH,MAAAA,YAAY,CAAC,KAAKlH,wBAAN,CAAZkH;AACA,WAAKlH,wBAAL,GAAgC,IAAhC;AACF;;AACA,QAAI,KAAKD,sBAAT,EAAiC;AAC/BmN,MAAAA,aAAa,CAAC,KAAKnN,sBAAN,CAAbmN;AACA,WAAKnN,sBAAL,GAA8B,IAA9B;AACF;;AAEA,QAAIzS,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA,WAAKyf,oBAAL;;AACA;AACF,KAjBuB,CAmBvB;;;AACA,SAAKlM,4CAAL,GAAoD,EAApD;AACAr1B,IAAAA,MAAM,CAAC6J,OAAP7J,CACE,KAAKs1B,oBADPt1B,EAEEsD,OAFFtD,CAEU,CAAC,CAAC2hC,IAAD,EAAO3T,YAAP,CAAD,KAA0B;AAClC,WAAK4T,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,QAAAA,KAAK,EAAE;AAFmB,OAA5B;AAID,KAPD9K;AAQF;AAEA;AACF;AACA;;;AACU4hC,EAAAA,gBAAgB,CACtBD,IADsB,EAEtBE,gBAFsB,EAGtB;AAAA;;AACA,UAAMC,SAAS,4BAAG,KAAKxM,oBAAL,CAA0BqM,IAA1B,CAAH,0DAAG,sBAAiC72B,KAAnD;AACA,SAAKwqB,oBAAL,CAA0BqM,IAA1B,IAAkCE,gBAAlC;;AACA,QAAIC,SAAS,KAAKD,gBAAgB,CAAC/2B,KAAnC,EAA0C;AACxC,YAAMi3B,oBAAoB,GACxB,KAAK3M,uCAAL,CAA6CuM,IAA7C,CADF;;AAEA,UAAII,oBAAJ,EAA0B;AACxBA,QAAAA,oBAAoB,CAACz+B,OAArBy+B,CAA6BC,EAAE,IAAI;AACjC,cAAI;AACFA,YAAAA,EAAE,CAACH,gBAAgB,CAAC/2B,KAAlB,CAAFk3B,CADE,CAEF;AACD,WAHD,CAGE,MAAM,CAAC;AACV,SALDD;AAMF;AACF;AACF;AAEA;AACF;AACA;;;AACU9H,EAAAA,0BAA0B,CAChCgI,oBADgC,EAEhCrX,QAFgC,EAGE;AAAA,QAAA,qBAAA;;AAClC,UAAM+W,IAAI,GACR,KAAKxM,uCAAL,CAA6C8M,oBAA7C,CADF;;AAEA,QAAIN,IAAI,IAAI,IAAZ,EAAkB;AAChB,aAAO,MAAM,CAAE,CAAf;AACF;;AACA,UAAMI,oBAAoB,GAAI,CAAA,qBAAA,GAAA,KAAK3M,uCAAL,EAC5BuM,IAD4B,MAAA,qBAAA,CAC5BA,IAD4B,CAAA,GAExB,IAAIhtB,GAAJ,EAFwB,CAA9B;AAGAotB,IAAAA,oBAAoB,CAACrvB,GAArBqvB,CAAyBnX,QAAzBmX;AACA,WAAO,MAAM;AACXA,MAAAA,oBAAoB,CAACr2B,MAArBq2B,CAA4BnX,QAA5BmX;;AACA,UAAIA,oBAAoB,CAACt5B,IAArBs5B,KAA8B,CAAlC,EAAqC;AACnC,eAAO,KAAK3M,uCAAL,CAA6CuM,IAA7C,CAAP;AACF;AACD,KALD;AAMF;AAEA;AACF;AACA;;;AAC4B,QAApBJ,oBAAoB,GAAG;AAC3B,QAAIvhC,MAAM,CAACY,IAAPZ,CAAY,KAAKs1B,oBAAjBt1B,EAAuCa,MAAvCb,KAAkD,CAAtD,EAAyD;AACvD,UAAI,KAAKs0B,sBAAT,EAAiC;AAC/B,aAAKA,sBAAL,GAA8B,KAA9B;AACA,aAAKE,wBAAL,GAAgChc,UAAU,CAAC,MAAM;AAC/C,eAAKgc,wBAAL,GAAgC,IAAhC;;AACA,cAAI;AACF,iBAAKH,aAAL,CAAmB6N,KAAnB;AACD,WAFD,CAEE,OAAOr+B,GAAP,EAAY;AACZ;AACA,gBAAIA,GAAG,YAAY/C,KAAnB,EAA0B;AACxBiS,cAAAA,OAAO,CAACqY,GAARrY,CACG,yCAAwClP,GAAG,CAAC3E,OAAQ,EADvD6T;AAGF;AACF;AACD,SAZyC,EAYvC,GAZuC,CAA1C;AAaF;;AACA;AACF;;AAEA,QAAI,KAAKyhB,wBAAL,KAAkC,IAAtC,EAA4C;AAC1CkH,MAAAA,YAAY,CAAC,KAAKlH,wBAAN,CAAZkH;AACA,WAAKlH,wBAAL,GAAgC,IAAhC;AACA,WAAKF,sBAAL,GAA8B,IAA9B;AACF;;AAEA,QAAI,CAAC,KAAKA,sBAAV,EAAkC;AAChC,WAAKD,aAAL,CAAmB8N,OAAnB;;AACA;AACF;;AAEA,UAAMC,yBAAyB,GAAG,KAAK3N,uBAAvC;;AACA,UAAM4N,8BAA8B,GAAG,MAAM;AAC3C,aAAOD,yBAAyB,KAAK,KAAK3N,uBAA1C;AACD,KAFD;;AAIA,UAAMnc,OAAO,CAACwG,GAARxG,EACJ;AACA;AACA;AACA;AACAtY,IAAAA,MAAM,CAACY,IAAPZ,CAAY,KAAKs1B,oBAAjBt1B,EAAuCe,GAAvCf,CAA2C,MAAM2hC,IAAN,IAAc;AACvD,YAAM3T,YAAY,GAAG,KAAKsH,oBAAL,CAA0BqM,IAA1B,CAArB;;AACA,UAAI3T,YAAY,KAAKzsB,SAArB,EAAgC;AAC9B;AACA;AACF;;AACA,cAAQysB,YAAY,CAACljB,KAArB;AACE,aAAK,SAAL;AACA,aAAK,cAAL;AACE,cAAIkjB,YAAY,CAACsU,SAAbtU,CAAuBvlB,IAAvBulB,KAAgC,CAApC,EAAuC;AACrC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc,mBAAO,KAAKsH,oBAAL,CAA0BqM,IAA1B,CAAP;;AACA,gBAAI3T,YAAY,CAACljB,KAAbkjB,KAAuB,cAA3B,EAA2C;AACzC,qBAAO,KAAKqH,4CAAL,CACLrH,YAAY,CAACuU,oBADR,CAAP;AAGF;;AACA,kBAAM,KAAKhB,oBAAL,EAAN;AACA;AACF;;AACA,gBAAM,CAAC,YAAY;AACjB,kBAAM;AAACx1B,cAAAA,IAAD;AAAO8e,cAAAA;AAAP,gBAAiBmD,YAAvB;;AACA,gBAAI;AACF,mBAAK4T,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,gBAAAA,KAAK,EAAE;AAFmB,eAA5B;;AAIA,oBAAMy3B,oBAA0C,GAC7C,MAAM,KAAKlO,aAAL,CAAmBhiB,IAAnB,CAAwBwY,MAAxB,EAAgC9e,IAAhC,CADT;;AAEA,mBAAK61B,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BuU,gBAAAA,oBAF0B;AAG1Bz3B,gBAAAA,KAAK,EAAE;AAHmB,eAA5B;;AAKA,mBAAKuqB,4CAAL,CACEkN,oBADF,IAEIvU,YAAY,CAACsU,SAFjB;AAGA,oBAAM,KAAKf,oBAAL,EAAN;AACD,aAhBD,CAgBE,OAAO1K,CAAP,EAAU;AACV,kBAAIA,CAAC,YAAY/1B,KAAjB,EAAwB;AACtBiS,gBAAAA,OAAO,CAACsL,KAARtL,CACG,GAAE8X,MAAO,qBADZ9X,EAEEhH,IAFFgH,EAGE8jB,CAAC,CAAC33B,OAHJ6T;AAKF;;AACA,kBAAI,CAACsvB,8BAA8B,EAAnC,EAAuC;AACrC;AACF,eAVU,CAWV;;;AACA,mBAAKT,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,gBAAAA,KAAK,EAAE;AAFmB,eAA5B;;AAIA,oBAAM,KAAKy2B,oBAAL,EAAN;AACF;AACD,WApCK,GAAN;AAqCA;;AACF,aAAK,YAAL;AACE,cAAIvT,YAAY,CAACsU,SAAbtU,CAAuBvlB,IAAvBulB,KAAgC,CAApC,EAAuC;AACrC;AACA;AACA;AACA,kBAAM,CAAC,YAAY;AACjB,oBAAM;AAACuU,gBAAAA,oBAAD;AAAuBC,gBAAAA;AAAvB,kBAA4CxU,YAAlD;;AACA,kBACE,KAAKuH,+BAAL,CAAqCvoB,GAArC,CAAyCu1B,oBAAzC,CADF,EAEE;AACA;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB,qBAAKhN,+BAAL,CAAqC7pB,MAArC,CACE62B,oBADF;AAGD,eAfD,MAeO;AACL,qBAAKX,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,kBAAAA,KAAK,EAAE;AAFmB,iBAA5B;;AAIA,qBAAK82B,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,kBAAAA,KAAK,EAAE;AAFmB,iBAA5B;;AAIA,oBAAI;AACF,wBAAM,KAAKupB,aAAL,CAAmBhiB,IAAnB,CAAwBmwB,iBAAxB,EAA2C,CAC/CD,oBAD+C,CAA3C,CAAN;AAGD,iBAJD,CAIE,OAAO1L,CAAP,EAAU;AACV,sBAAIA,CAAC,YAAY/1B,KAAjB,EAAwB;AACtBiS,oBAAAA,OAAO,CAACsL,KAARtL,CAAiByvB,GAAAA,iBAAkB,SAAnCzvB,EAA6C8jB,CAAC,CAAC33B,OAA/C6T;AACF;;AACA,sBAAI,CAACsvB,8BAA8B,EAAnC,EAAuC;AACrC;AACF,mBANU,CAOV;;;AACA,uBAAKT,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,oBAAAA,KAAK,EAAE;AAFmB,mBAA5B;;AAIA,wBAAM,KAAKy2B,oBAAL,EAAN;AACA;AACF;AACF;;AACA,mBAAKK,gBAAL,CAAsBD,IAAtB,EAA4B,EAC1B,GAAG3T,YADuB;AAE1BljB,gBAAAA,KAAK,EAAE;AAFmB,eAA5B;;AAIA,oBAAM,KAAKy2B,oBAAL,EAAN;AACD,aAnDK,GAAN;AAoDF;;AACA;AA1HJ;AA+HD,KArIDvhC,CALIsY,CAAN;AA4IF;AAEA;AACF;AACA;;;AACUmqB,EAAAA,yBAAyB,CAG/BF,oBAH+B,EAI/BG,YAJ+B,EAKzB;AACN,UAAMJ,SAAS,GACb,KAAKjN,4CAAL,CAAkDkN,oBAAlD,CADF;;AAEA,QAAID,SAAS,KAAK/gC,SAAlB,EAA6B;AAC3B;AACF;;AACA+gC,IAAAA,SAAS,CAACh/B,OAAVg/B,CAAkBN,EAAE,IAAI;AACtB,UAAI;AACFA,QAAAA,EAAE,EACA;AACA;AACA;AACA;AACA,WAAGU,YALH,CAAFV;AAOD,OARD,CAQE,OAAOnL,CAAP,EAAU;AACV9jB,QAAAA,OAAO,CAACsL,KAARtL,CAAc8jB,CAAd9jB;AACF;AACD,KAZDuvB;AAaF;AAEA;AACF;AACA;;;AACEvM,EAAAA,wBAAwB,CAAC4M,YAAD,EAAuB;AAC7C,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CACnC8b,YADmC,EAEnC5U,yBAFmC,CAArC;;AAIA,SAAK0U,yBAAL,CAAsDzU,YAAtD,EAAoE,CAClE9H,MAAM,CAAC7kB,KAD2D,EAElE6kB,MAAM,CAACa,OAF2D,CAApE;AAIF;AAEA;AACF;AACA;;;AACU6b,EAAAA,iBAAiB,CACvBC,kBADuB;AAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI92B,EAAAA,IA1BuB,EA2BD;AACtB,UAAMk2B,oBAAoB,GAAG,KAAKhN,yBAAL,EAA7B;AACA,UAAM0M,IAAI,GAAG7D,qBAAmB,CAC9B,CAAC+E,kBAAkB,CAAChY,MAApB,EAA4B9e,IAA5B,CAD8B,CAAhC;AAIA,UAAM+2B,oBAAoB,GAAG,KAAKxN,oBAAL,CAA0BqM,IAA1B,CAA7B;;AACA,QAAImB,oBAAoB,KAAKvhC,SAA7B,EAAwC;AACtC,WAAK+zB,oBAAL,CAA0BqM,IAA1B,IAAkC,EAChC,GAAGkB,kBAD6B;AAEhC92B,QAAAA,IAFgC;AAGhCu2B,QAAAA,SAAS,EAAE,IAAI3tB,GAAJ,CAAQ,CAACkuB,kBAAkB,CAACjY,QAApB,CAAR,CAHqB;AAIhC9f,QAAAA,KAAK,EAAE;AAJyB,OAAlC;AAMD,KAPD,MAOO;AACLg4B,MAAAA,oBAAoB,CAACR,SAArBQ,CAA+BpwB,GAA/BowB,CAAmCD,kBAAkB,CAACjY,QAAtDkY;AACF;;AACA,SAAK3N,uCAAL,CAA6C8M,oBAA7C,IAAqEN,IAArE;;AACA,SAAKzM,mDAAL,CACE+M,oBADF,IAEI,YAAY;AACd,aAAO,KAAK/M,mDAAL,CACL+M,oBADK,CAAP;AAGA,aAAO,KAAK9M,uCAAL,CAA6C8M,oBAA7C,CAAP;AACA,YAAMjU,YAAY,GAAG,KAAKsH,oBAAL,CAA0BqM,IAA1B,CAArB;AACA73B,MAAAA,MAAM,CACJkkB,YAAY,KAAKzsB,SADb,EAEwE0gC,4EAAAA,oBAAqB,EAF7F,CAANn4B;AAIAkkB,MAAAA,YAAY,CAACsU,SAAbtU,CAAuBtiB,MAAvBsiB,CAA8B6U,kBAAkB,CAACjY,QAAjDoD;AACA,YAAM,KAAKuT,oBAAL,EAAN;AACD,KAdD;;AAeA,SAAKA,oBAAL;;AACA,WAAOU,oBAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,eAAe,CACbvkC,SADa,EAEbosB,QAFa,EAGbhT,UAHa,EAIS;AACtB,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACh4B,SAAS,CAACyD,QAAVzD,EAAD,CADW,EAEXoZ,UAAU,IAAI,KAAKmc,WAAnBnc,IAAkC,WAFvB,EAEoC;AAC/C,YAHW,CAAb;;AAKA,WAAO,KAAKgrB,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,kBAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAMLz2B,IANK,CAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AACmC,QAA3Bi3B,2BAA2B,CAC/Bf,oBAD+B,EAEhB;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,gBAFI,CAAN;AAIF;AAEA;AACF;AACA;;;AACEjM,EAAAA,+BAA+B,CAAC2M,YAAD,EAAuB;AACpD,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CACnC8b,YADmC,EAEnCzU,gCAFmC,CAArC;;AAIA,SAAKuU,yBAAL,CAA6DzU,YAA7D,EAA2E,CACzE;AACEkV,MAAAA,SAAS,EAAEhd,MAAM,CAAC7kB,KAAP6kB,CAAaliB,MAD1B;AAEEw7B,MAAAA,WAAW,EAAEtZ,MAAM,CAAC7kB,KAAP6kB,CAAala;AAF5B,KADyE,EAKzEka,MAAM,CAACa,OALkE,CAA3E;AAOF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEoc,EAAAA,sBAAsB,CACpBngC,SADoB,EAEpB4nB,QAFoB,EAGpBhT,UAHoB,EAIpBwrB,OAJoB,EAKE;AACtB,UAAMr3B,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAACxzB,SAAS,CAACf,QAAVe,EAAD,CADW,EAEX4U,UAAU,IAAI,KAAKmc,WAAnBnc,IAAkC,WAFvB,EAEoC;AAC/C;AAAQ;AAHG,MAIXwrB,OAAO,GAAG;AAACA,MAAAA,OAAO,EAAEA;AAAV,KAAH,GAAwB7hC;AAAS;AAJ7B,KAAb;;AAMA,WAAO,KAAKqhC,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,kBAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAMLz2B,IANK,CAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AAC0C,QAAlCs3B,kCAAkC,CACtCpB,oBADsC,EAEvB;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,wBAFI,CAAN;AAIF;AAEA;AACF;AACA;;;AACEqB,EAAAA,MAAM,CACJt5B,MADI,EAEJ4gB,QAFI,EAGJhT,UAHI,EAIkB;AACtB,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAAC,OAAOxsB,MAAP,KAAkB,QAAlB,GAA6B;AAACu5B,MAAAA,QAAQ,EAAE,CAACv5B,MAAM,CAACpH,QAAPoH,EAAD;AAAX,KAA7B,GAA+DA,MAAhE,CADW,EAEX4N,UAAU,IAAI,KAAKmc,WAAnBnc,IAAkC,WAFvB,CAEkC;AAFlC,KAAb;;AAIA,WAAO,KAAKgrB,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,eAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAMLz2B,IANK,CAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AAC4B,QAApBy3B,oBAAoB,CACxBvB,oBADwB,EAET;AACf,UAAM,KAAKgB,8BAAL,CAAoChB,oBAApC,EAA0D,MAA1D,CAAN;AACF;AAEA;AACF;AACA;;;AACE5L,EAAAA,qBAAqB,CAACsM,YAAD,EAAuB;AAC1C,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CAAC8b,YAAD,EAAe/O,sBAAf,CAArC;;AACA,SAAK6O,yBAAL,CAA6CzU,YAA7C,EAA2D,CACzD9H,MAAM,CAAC7kB,KADkD,EAEzD6kB,MAAM,CAACa,OAFkD,CAA3D;AAIF;AAEA;AACF;AACA;;;AACEkP,EAAAA,qBAAqB,CAAC0M,YAAD,EAAuB;AAC1C,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CAAC8b,YAAD,EAAerU,sBAAf,CAArC;;AACA,SAAKmU,yBAAL,CAAmDzU,YAAnD,EAAiE,CAAC9H,MAAD,CAAjE;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACEud,EAAAA,YAAY,CAAC7Y,QAAD,EAAqD;AAC/D,WAAO,KAAKgY,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,eAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAML;AAAE;AANG,KAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AACgC,QAAxBkB,wBAAwB,CAC5BzB,oBAD4B,EAEb;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,aAFI,CAAN;AAIF;AAEA;AACF;AACA;;;AACE/L,EAAAA,4BAA4B,CAACyM,YAAD,EAAuB;AACjD,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CACnC8b,YADmC,EAEnC7T,4BAFmC,CAArC;;AAIA,SAAK2T,yBAAL,CAAmDzU,YAAnD,EAAiE,CAAC9H,MAAD,CAAjE;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEyd,EAAAA,YAAY,CAAC/Y,QAAD,EAAqD;AAC/D,WAAO,KAAKgY,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,uBAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAML;AAAE;AANG,KAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AACgC,QAAxBoB,wBAAwB,CAC5B3B,oBAD4B,EAEb;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,aAFI,CAAN;AAIF;AAEA;AACF;AACA;;;AAE8C,QAA9BgB,8BAA8B,CAC1ChB,oBAD0C,EAE1C4B,gBAF0C,EAG1C;AACA,UAAMC,OAAO,GACX,KAAK5O,mDAAL,CACE+M,oBADF,CADF;;AAIA,QAAI6B,OAAJ,EAAa;AACX,YAAMA,OAAO,EAAb;AACD,KAFD,MAEO;AACL/wB,MAAAA,OAAO,CAACC,IAARD,CACE,wEACG,KAAIkvB,oBAAqB,WAAU4B,gBAAiB,WADvD,GAEE,qBAHJ9wB;AAKF;AACF;;AAEAyjB,EAAAA,UAAU,CACRzqB,IADQ,EAERg4B,QAFQ,EAGRtL,QAHQ,EAIRuF,KAJQ,EAKI;AACZ,UAAMpmB,UAAU,GAAGmsB,QAAQ,IAAI,KAAKhQ,WAApC;;AACA,QAAInc,UAAU,IAAI6gB,QAAd7gB,IAA0BomB,KAA9B,EAAqC;AACnC,UAAIxmB,OAAY,GAAG,EAAnB;;AACA,UAAIihB,QAAJ,EAAc;AACZjhB,QAAAA,OAAO,CAACihB,QAARjhB,GAAmBihB,QAAnBjhB;AACF;;AACA,UAAII,UAAJ,EAAgB;AACdJ,QAAAA,OAAO,CAACI,UAARJ,GAAqBI,UAArBJ;AACF;;AACA,UAAIwmB,KAAJ,EAAW;AACTxmB,QAAAA,OAAO,GAAGxX,MAAM,CAACC,MAAPD,CAAcwX,OAAdxX,EAAuBg+B,KAAvBh+B,CAAVwX;AACF;;AACAzL,MAAAA,IAAI,CAACxG,IAALwG,CAAUyL,OAAVzL;AACF;;AACA,WAAOA,IAAP;AACF;AAEA;AACF;AACA;;;AACE0xB,EAAAA,0BAA0B,CACxB1xB,IADwB,EAExBg4B,QAFwB,EAGxBtL,QAHwB,EAIxBuF,KAJwB,EAKZ;AACZ,UAAMpmB,UAAU,GAAGmsB,QAAQ,IAAI,KAAKhQ,WAApC;;AACA,QAAInc,UAAU,IAAI,CAAC,CAAC,WAAD,EAAc,WAAd,EAA2B1E,QAA3B,CAAoC0E,UAApC,CAAnB,EAAoE;AAClE,YAAM,IAAI9W,KAAJ,CACJ,gDACE,KAAKizB,WADP,GAEE,6CAHE,CAAN;AAKF;;AACA,WAAO,KAAKyC,UAAL,CAAgBzqB,IAAhB,EAAsBg4B,QAAtB,EAAgCtL,QAAhC,EAA0CuF,KAA1C,CAAP;AACF;AAEA;AACF;AACA;;;AACE7H,EAAAA,0BAA0B,CAACwM,YAAD,EAAuB;AAC/C,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CACnC8b,YADmC,EAEnC5T,2BAFmC,CAArC;;AAIA,QAAI7I,MAAM,CAAC7kB,KAAP6kB,KAAiB,mBAArB,EAA0C;AACxC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,WAAKqP,+BAAL,CAAqC7iB,GAArC,CAAyCsb,YAAzC;AACF;;AACA,SAAKyU,yBAAL,CACEzU,YADF,EAEE9H,MAAM,CAAC7kB,KAAP6kB,KAAiB,mBAAjBA,GACI,CAAC;AAACpe,MAAAA,IAAI,EAAE;AAAP,KAAD,EAAqBoe,MAAM,CAACa,OAA5B,CADJb,GAEI,CAAC;AAACpe,MAAAA,IAAI,EAAE,QAAP;AAAiBoe,MAAAA,MAAM,EAAEA,MAAM,CAAC7kB;AAAhC,KAAD,EAAyC6kB,MAAM,CAACa,OAAhD,CAJN;AAMF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE6S,EAAAA,WAAW,CACTh1B,SADS,EAETgmB,QAFS,EAGThT,UAHS,EAIa;AACtB,UAAM7L,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAAC5xB,SAAD,CADW,EAEXgT,UAAU,IAAI,KAAKmc,WAAnBnc,IAAkC,WAFvB,CAEkC;AAFlC,KAAb;;AAIA,UAAMqqB,oBAAoB,GAAG,KAAKW,iBAAL,CAC3B;AACEhY,MAAAA,QAAQ,EAAE,CAAC+X,YAAD,EAAe5b,OAAf,KAA2B;AACnC,YAAI4b,YAAY,CAAC76B,IAAb66B,KAAsB,QAA1B,EAAoC;AAClC/X,UAAAA,QAAQ,CAAC+X,YAAY,CAACzc,MAAd,EAAsBa,OAAtB,CAAR6D,CADkC,CAElC;AACA;;AACA,cAAI;AACF,iBAAKyP,uBAAL,CAA6B4H,oBAA7B,EADE,CAEF;AACD,WAHD,CAGE,OAAO+B,IAAP,EAAa,CACb;AAAA;AAEJ;AACD,OAbH;AAcEnZ,MAAAA,MAAM,EAAE,oBAdV;AAeE2X,MAAAA,iBAAiB,EAAE;AAfrB,KAD2B,EAkB3Bz2B,IAlB2B,CAA7B;;AAoBA,WAAOk2B,oBAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEgC,EAAAA,sBAAsB,CACpBr/B,SADoB,EAEpBgmB,QAFoB,EAGpBpT,OAHoB,EAIE;AACtB,UAAM;AAACI,MAAAA,UAAD;AAAa,SAAGomB;AAAhB,QAAyB,EAC7B,GAAGxmB,OAD0B;AAE7BI,MAAAA,UAAU,EACPJ,OAAO,IAAIA,OAAO,CAACI,UAAnBJ,IAAkC,KAAKuc,WAAvCvc,IAAsD,WAH5B,CAGuC;;AAHvC,KAA/B;;AAKA,UAAMzL,IAAI,GAAG,KAAKyqB,UAAL,CACX,CAAC5xB,SAAD,CADW,EAEXgT,UAFW,EAGXrW;AAAS;AAHE,MAIXy8B,KAJW,CAAb;;AAMA,UAAMiE,oBAAoB,GAAG,KAAKW,iBAAL,CAC3B;AACEhY,MAAAA,QAAQ,EAAE,CAAC+X,YAAD,EAAe5b,OAAf,KAA2B;AACnC6D,QAAAA,QAAQ,CAAC+X,YAAD,EAAe5b,OAAf,CAAR6D,CADmC,CAEnC;AACA;;AACA,YAAI;AACF,eAAKyP,uBAAL,CAA6B4H,oBAA7B,EADE,CAEF;AACD,SAHD,CAGE,OAAO+B,IAAP,EAAa,CACb;AAAA;AAEH,OAXH;AAYEnZ,MAAAA,MAAM,EAAE,oBAZV;AAaE2X,MAAAA,iBAAiB,EAAE;AAbrB,KAD2B,EAgB3Bz2B,IAhB2B,CAA7B;;AAkBA,WAAOk2B,oBAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AAC+B,QAAvB5H,uBAAuB,CAC3B4H,oBAD2B,EAEZ;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,kBAFI,CAAN;AAIF;AAEA;AACF;AACA;;;AACE7L,EAAAA,qBAAqB,CAACuM,YAAD,EAAuB;AAC1C,UAAM;AAACzc,MAAAA,MAAD;AAAS8H,MAAAA;AAAT,QAAyBnH,MAAM,CAAC8b,YAAD,EAAe3T,sBAAf,CAArC;;AACA,SAAKyT,yBAAL,CAAmDzU,YAAnD,EAAiE,CAAC9H,MAAD,CAAjE;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACEge,EAAAA,YAAY,CAACtZ,QAAD,EAAqD;AAC/D,WAAO,KAAKgY,iBAAL,CACL;AACEhY,MAAAA,QADF;AAEEC,MAAAA,MAAM,EAAE,eAFV;AAGE2X,MAAAA,iBAAiB,EAAE;AAHrB,KADK,EAML;AAAE;AANG,KAAP;AAQF;AAEA;AACF;AACA;AACA;AACA;;;AACgC,QAAxB2B,wBAAwB,CAC5BlC,oBAD4B,EAEb;AACf,UAAM,KAAKgB,8BAAL,CACJhB,oBADI,EAEJ,aAFI,CAAN;AAIF;;AA1oHsB;AC/7FxB;AACA;AACA;;AAMA;AACA;AACA;;;AACO,MAAMmC,OAAN,CAAc;AAGnB;AACF;AACA;AACA;AACA;AACA;AACEtkC,EAAAA,WAAW,CAACwkC,OAAD,EAA2B;AAAA,SAR9BD,QAQ8B,GARtB,KAAA,CAQsB;AACpC,SAAKA,QAAL,GAAgBC,OAAO,IAAIhmC,eAAe,EAA1C;AACF;AAEA;AACF;AACA;;;AACiB,SAARimC,QAAQ,GAAY;AACzB,WAAO,IAAIH,OAAJ,CAAY9lC,eAAe,EAA3B,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,SAAbkmC,aAAa,CAClB9lC,SADkB,EAElB8Y,OAFkB,EAGT;AACT,QAAI9Y,SAAS,CAACkB,UAAVlB,KAAyB,EAA7B,EAAiC;AAC/B,YAAM,IAAIoC,KAAJ,CAAU,qBAAV,CAAN;AACF;;AACA,UAAMtC,SAAS,GAAGE,SAAS,CAACS,KAAVT,CAAgB,EAAhBA,EAAoB,EAApBA,CAAlB;;AACA,QAAI,CAAC8Y,OAAD,IAAY,CAACA,OAAO,CAACitB,cAAzB,EAAyC;AACvC,YAAMlmC,aAAa,GAAGG,SAAS,CAACS,KAAVT,CAAgB,CAAhBA,EAAmB,EAAnBA,CAAtB;AACA,YAAMgmC,iBAAiB,GAAGjmC,YAAY,CAACF,aAAD,CAAtC;;AACA,WAAK,IAAIomC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,EAAtB,EAA0BA,EAAE,EAA5B,EAAgC;AAC9B,YAAInmC,SAAS,CAACmmC,EAAD,CAATnmC,KAAkBkmC,iBAAiB,CAACC,EAAD,CAAvC,EAA6C;AAC3C,gBAAM,IAAI7jC,KAAJ,CAAU,+BAAV,CAAN;AACF;AACF;AACF;;AACA,WAAO,IAAIsjC,OAAJ,CAAY;AAAC5lC,MAAAA,SAAD;AAAYE,MAAAA;AAAZ,KAAZ,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACiB,SAARkmC,QAAQ,CAAC7hC,IAAD,EAA4B;AACzC,UAAMvE,SAAS,GAAGC,YAAY,CAACsE,IAAD,CAA9B;AACA,UAAMrE,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB;AACAD,IAAAA,SAAS,CAACE,GAAVF,CAAcqE,IAAdrE;AACAA,IAAAA,SAAS,CAACE,GAAVF,CAAcF,SAAdE,EAAyB,EAAzBA;AACA,WAAO,IAAI0lC,OAAJ,CAAY;AAAC5lC,MAAAA,SAAD;AAAYE,MAAAA;AAAZ,KAAZ,CAAP;AACF;AAEA;AACF;AACA;;;AACe,MAATF,SAAS,GAAc;AACzB,WAAO,IAAIiD,SAAJ,CAAc,KAAK4iC,QAAL,CAAc7lC,SAA5B,CAAP;AACF;AAEA;AACF;AACA;;;AACe,MAATE,SAAS,GAAe;AAC1B,WAAO,IAAIC,UAAJ,CAAe,KAAK0lC,QAAL,CAAc3lC,SAA7B,CAAP;AACF;;AA7EmB;ACoErB;AACA;AACA;AACA;;;MACammC,gCAAgC,GAAG7kC,MAAM,CAACyc,MAAPzc,CAAc;AAC5D8kC,EAAAA,iBAAiB,EAAE;AACjBn/B,IAAAA,KAAK,EAAE,CADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CACAA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADA,EAEAs+B,GAAgB,CAAC,YAAD,CAFhB,EAGAt+B,YAAY,CAACkB,EAAblB,CAAgB,UAAhBA,CAHA,CAFMA;AAFS,GADyC;AAW5Du+B,EAAAA,iBAAiB,EAAE;AACjBr/B,IAAAA,KAAK,EAAE,CADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAFMA;AAFS,GAXyC;AAiB5Dw+B,EAAAA,iBAAiB,EAAE;AACjBt/B,IAAAA,KAAK,EAAE,CADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CACAA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADA,EAEAs+B,GAAgB,EAFhB,EAGAt+B,YAAY,CAACuH,GAAbvH,CACEyH,SAAgB,EADlBzH,EAEEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CAFFA,EAGE,WAHFA,CAHA,CAFMA;AAFS,GAjByC;AA+B5Dy+B,EAAAA,qBAAqB,EAAE;AACrBv/B,IAAAA,KAAK,EAAE,CADc;AAErB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAFMA;AAFa,GA/BqC;AAqC5D0+B,EAAAA,gBAAgB,EAAE;AAChBx/B,IAAAA,KAAK,EAAE,CADS;AAEhB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAAD,CAFMA;AAFQ;AArC0C,CAAdzG,C;;AA6CzC,MAAMolC,6BAAN,CAAoC;AACzC;AACF;AACA;AACEtlC,EAAAA,WAAW,GAAG,CAAC;;AAEa,SAArBga,qBAAqB,CAC1B1T,WAD0B,EAEE;AAC5B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AAEA,UAAMgX,qBAAqB,GAAGvT,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;AACA,UAAMd,KAAK,GAAGqU,qBAAqB,CAAC3Z,MAAtB2Z,CAA6B5T,WAAW,CAAC9F,IAAzC0Z,CAAd;AAEA,QAAIlS,IAAJ;;AACA,SAAK,MAAM,CAACu9B,UAAD,EAAah9B,MAAb,CAAX,IAAmCrI,MAAM,CAAC6J,OAAP7J,CACjC6kC,gCADiC7kC,CAAnC,EAEG;AACD,UAAKqI,MAAM,CAAS1C,KAAf0C,IAAwB1C,KAA7B,EAAoC;AAClCmC,QAAAA,IAAI,GAAGu9B,UAAPv9B;AACA;AACF;AACF;;AACA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIhH,KAAJ,CACJ,0DADI,CAAN;AAGF;;AACA,WAAOgH,IAAP;AACF;;AAE8B,SAAvBw9B,uBAAuB,CAC5Bl/B,WAD4B,EAEH;AACzB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKuiC,eAAL,CAAqBn/B,WAAW,CAACxF,IAAjC,EAAuC,CAAvC;AAEA,UAAM;AAAC4kC,MAAAA;AAAD,QAAe5sB,YAAU,CAC7BisB,gCAAgC,CAACC,iBADJ,EAE7B1+B,WAAW,CAAC9F,IAFiB,CAA/B;AAKA,WAAO;AACL6jB,MAAAA,SAAS,EAAE/d,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD1B;AAELgF,MAAAA,KAAK,EAAE5C,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFtB;AAGLwhC,MAAAA,UAAU,EAAEhE,MAAM,CAACgE,UAAD;AAHb,KAAP;AAKF;;AAE8B,SAAvBC,uBAAuB,CAC5Br/B,WAD4B,EAEH;AACzB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;;AACA,QAAIoD,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAjBuF,GAA0B,CAA9B,EAAiC;AAC/B,YAAM,IAAItF,KAAJ,CAC0BsF,8BAAAA,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAO,4BADlD,CAAN;AAGF;;AAEA,UAAM;AAACkK,MAAAA;AAAD,QAAc6N,YAAU,CAC5BisB,gCAAgC,CAACI,iBADL,EAE5B7+B,WAAW,CAAC9F,IAFgB,CAA9B;AAIA,WAAO;AACLoK,MAAAA,WAAW,EAAEtE,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELmgB,MAAAA,SAAS,EAAE/d,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF1B;AAGLgF,MAAAA,KAAK,EACH5C,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAjBuF,GAA0B,CAA1BA,GAA8BA,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAAlDoC,GAA2D7E,SAJxD;AAKLwJ,MAAAA,SAAS,EAAEA,SAAS,CAAChK,GAAVgK,CAAcrL,MAAM,IAAI,IAAI+B,SAAJ,CAAc/B,MAAd,CAAxBqL;AALN,KAAP;AAOF;;AAE6B,SAAtB26B,sBAAsB,CAC3Bt/B,WAD2B,EAEH;AACxB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKuiC,eAAL,CAAqBn/B,WAAW,CAACxF,IAAjC,EAAuC,CAAvC;AAEA,WAAO;AACL8J,MAAAA,WAAW,EAAEtE,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELmgB,MAAAA,SAAS,EAAE/d,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF1B;AAGL2hC,MAAAA,SAAS,EAAEv/B,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAH1B,KAAP;AAKF;;AAE8B,SAAvB4hC,uBAAuB,CAC5Bx/B,WAD4B,EAEH;AACzB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKuiC,eAAL,CAAqBn/B,WAAW,CAACxF,IAAjC,EAAuC,CAAvC;AAEA,WAAO;AACL8J,MAAAA,WAAW,EAAEtE,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELmgB,MAAAA,SAAS,EAAE/d,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAF1B,KAAP;AAIF;;AAEkC,SAA3B6hC,2BAA2B,CAChCz/B,WADgC,EAEH;AAC7B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKuiC,eAAL,CAAqBn/B,WAAW,CAACxF,IAAjC,EAAuC,CAAvC;AAEA,WAAO;AACL8J,MAAAA,WAAW,EAAEtE,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELmgB,MAAAA,SAAS,EAAE/d,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAF1B,KAAP;AAIF;AAEA;AACF;AACA;;;AACuB,SAAd+V,cAAc,CAAC/W,SAAD,EAAuB;AAC1C,QAAI,CAACA,SAAS,CAACjB,MAAViB,CAAiB8iC,yBAAyB,CAAC9iC,SAA3CA,CAAL,EAA4D;AAC1D,YAAM,IAAIlC,KAAJ,CACJ,kEADI,CAAN;AAGF;AACF;AACA;AACF;AACA;;;AACwB,SAAfykC,eAAe,CAAC3kC,IAAD,EAAmB4b,cAAnB,EAA2C;AAC/D,QAAI5b,IAAI,CAACC,MAALD,GAAc4b,cAAlB,EAAkC;AAChC,YAAM,IAAI1b,KAAJ,CAC0BF,8BAAAA,IAAI,CAACC,MAAO,4BAA2B2b,cAAe,EADhF,CAAN;AAGF;AACF;;AAhIyC;;AAmIpC,MAAMspB,yBAAN,CAAgC;AACrC;AACF;AACA;AACEhmC,EAAAA,WAAW,GAAG,CAAC;;AAMS,SAAjBimC,iBAAiB,CAACnpB,MAAD,EAAkC;AACxD,UAAM,CAACopB,kBAAD,EAAqBC,QAArB,IAAiCxkC,SAAS,CAACgC,sBAAVhC,CACrC,CAACmb,MAAM,CAACuH,SAAPvH,CAAiBvd,QAAjBud,EAAD,EAA8BjD,UAAU,CAACmD,MAAM,CAACF,MAAM,CAAC4oB,UAAR,CAAP,EAA4B,CAA5B,CAAxC,CADqC/jC,EAErC,KAAKuB,SAFgCvB,CAAvC;AAKA,UAAMqG,IAAI,GAAG+8B,gCAAgC,CAACC,iBAA9C;AACA,UAAMxkC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5B09B,MAAAA,UAAU,EAAE1oB,MAAM,CAACF,MAAM,CAAC4oB,UAAR,CADU;AAE5BS,MAAAA,QAAQ,EAAEA;AAFkB,KAAP,CAAvB;AAKA,UAAMrlC,IAAI,GAAG,CACX;AACEoD,MAAAA,MAAM,EAAEgiC,kBADV;AAEE38B,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADW,EAMX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAACuH,SADjB;AAEE9a,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANW,EAWX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAAC5T,KADjB;AAEEK,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAXW,EAgBX;AACEtF,MAAAA,MAAM,EAAEuY,aAAa,CAACvZ,SADxB;AAEEqG,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAhBW,CAAb;AAuBA,WAAO,CACL,IAAIoI,sBAAJ,CAA2B;AACzB1O,MAAAA,SAAS,EAAE,KAAKA,SADS;AAEzBpC,MAAAA,IAAI,EAAEA,IAFmB;AAGzBN,MAAAA,IAAI,EAAEA;AAHmB,KAA3B,CADK,EAML0lC,kBANK,CAAP;AAQF;;AAEwB,SAAjBE,iBAAiB,CAACtpB,MAAD,EAAkC;AACxD,UAAM9U,IAAI,GAAG+8B,gCAAgC,CAACG,iBAA9C;AACA,UAAM1kC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,UAAMlH,IAAI,GAAG,CACX;AACEoD,MAAAA,MAAM,EAAE4Y,MAAM,CAAClS,WADjB;AAEErB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADW,EAMX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAACuH,SADjB;AAEE9a,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANW,CAAb;AAaA,WAAO,IAAIoI,sBAAJ,CAA2B;AAChC1O,MAAAA,SAAS,EAAE,KAAKA,SADgB;AAEhCpC,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA;AAH0B,KAA3B,CAAP;AAKF;;AAEwB,SAAjB6lC,iBAAiB,CAACvpB,MAAD,EAAkC;AACxD,UAAM9U,IAAI,GAAG+8B,gCAAgC,CAACI,iBAA9C;AACA,UAAM3kC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BiD,MAAAA,SAAS,EAAE6R,MAAM,CAAC7R,SAAP6R,CAAiB7b,GAAjB6b,CAAqBwpB,IAAI,IAAIA,IAAI,CAAClkC,OAALkkC,EAA7BxpB;AADiB,KAAP,CAAvB;AAIA,UAAMhc,IAAI,GAAG,CACX;AACEoD,MAAAA,MAAM,EAAE4Y,MAAM,CAAClS,WADjB;AAEErB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADW,EAMX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAACuH,SADjB;AAEE9a,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANW,CAAb;;AAaA,QAAIsT,MAAM,CAAC5T,KAAX,EAAkB;AAChBpI,MAAAA,IAAI,CAAC2E,IAAL3E,CACE;AACEoD,QAAAA,MAAM,EAAE4Y,MAAM,CAAC5T,KADjB;AAEEK,QAAAA,QAAQ,EAAE,IAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OADF1I,EAME;AACEoD,QAAAA,MAAM,EAAEuY,aAAa,CAACvZ,SADxB;AAEEqG,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OANF1I;AAYF;;AAEA,WAAO,IAAI8Q,sBAAJ,CAA2B;AAChC1O,MAAAA,SAAS,EAAE,KAAKA,SADgB;AAEhCpC,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA;AAH0B,KAA3B,CAAP;AAKF;;AAE4B,SAArB+lC,qBAAqB,CAACzpB,MAAD,EAAsC;AAChE,UAAM9U,IAAI,GAAG+8B,gCAAgC,CAACK,qBAA9C;AACA,UAAM5kC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,UAAMlH,IAAI,GAAG,CACX;AACEoD,MAAAA,MAAM,EAAE4Y,MAAM,CAAClS,WADjB;AAEErB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADW,EAMX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAACuH,SADjB;AAEE9a,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANW,CAAb;AAaA,WAAO,IAAIoI,sBAAJ,CAA2B;AAChC1O,MAAAA,SAAS,EAAE,KAAKA,SADgB;AAEhCpC,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA;AAH0B,KAA3B,CAAP;AAKF;;AAEuB,SAAhBgmC,gBAAgB,CAAC1pB,MAAD,EAAiC;AACtD,UAAM9U,IAAI,GAAG+8B,gCAAgC,CAACM,gBAA9C;AACA,UAAM7kC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,UAAMlH,IAAI,GAAG,CACX;AACEoD,MAAAA,MAAM,EAAE4Y,MAAM,CAAClS,WADjB;AAEErB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADW,EAMX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAACuH,SADjB;AAEE9a,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANW,EAWX;AACEtF,MAAAA,MAAM,EAAE4Y,MAAM,CAAC+oB,SADjB;AAEEt8B,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAXW,CAAb;AAkBA,WAAO,IAAIoI,sBAAJ,CAA2B;AAChC1O,MAAAA,SAAS,EAAE,KAAKA,SADgB;AAEhCpC,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA;AAH0B,KAA3B,CAAP;AAKF;;AA3KqC;;AAA1BwlC,yBAAyB,CAM7B9iC,SANI8iC,GAMmB,IAAIrkC,SAAJ,CAC5B,6CAD4B,CANnBqkC;AC1Pb;AACA;AACA;;AACO,MAAMS,wBAAN,CAA+B;AACpC;AACF;AACA;AACEzmC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;;AAC8B,SAArBga,qBAAqB,CAC1B1T,WAD0B,EAEI;AAC9B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AAEA,UAAMgX,qBAAqB,GAAGvT,YAAY,CAACkB,EAAblB,CAAgB,aAAhBA,CAA9B;AACA,UAAMwT,SAAS,GAAGD,qBAAqB,CAAC3Z,MAAtB2Z,CAA6B5T,WAAW,CAAC9F,IAAzC0Z,CAAlB;AAEA,QAAIlS,IAAJ;;AACA,SAAK,MAAM,CAACoS,MAAD,EAAS7R,MAAT,CAAX,IAA+BrI,MAAM,CAAC6J,OAAP7J,CAC7BwmC,kCAD6BxmC,CAA/B,EAEG;AACD,UAAIqI,MAAM,CAAC1C,KAAP0C,IAAgB4R,SAApB,EAA+B;AAC7BnS,QAAAA,IAAI,GAAGoS,MAAPpS;AACA;AACF;AACF;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIhH,KAAJ,CACJ,4DADI,CAAN;AAGF;;AAEA,WAAOgH,IAAP;AACF;AAEA;AACF;AACA;;;AAC2B,SAAlB2+B,kBAAkB,CACvBrgC,WADuB,EAEH;AACpB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,UAAM;AAAC0jC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAyB/tB,YAAU,CACvC4tB,kCAAkC,CAACI,YADI,EAEvCxgC,WAAW,CAAC9F,IAF2B,CAAzC;AAIA,WAAO;AAAComC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAP;AACF;AAEA;AACF;AACA;;;AAC+B,SAAtBE,sBAAsB,CAC3BzgC,WAD2B,EAEH;AACxB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,UAAM;AAACuF,MAAAA;AAAD,QAAUqQ,YAAU,CACxB4tB,kCAAkC,CAACM,gBADX,EAExB1gC,WAAW,CAAC9F,IAFY,CAA1B;AAIA,WAAO;AAACiI,MAAAA;AAAD,KAAP;AACF;AAEA;AACF;AACA;;;AACkC,SAAzBw+B,yBAAyB,CAC9B3gC,WAD8B,EAEH;AAC3B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,UAAM;AAAC0jC,MAAAA;AAAD,QAAU9tB,YAAU,CACxB4tB,kCAAkC,CAACQ,mBADX,EAExB5gC,WAAW,CAAC9F,IAFY,CAA1B;AAIA,WAAO;AAAComC,MAAAA;AAAD,KAAP;AACF;AAEA;AACF;AACA;;;AACkC,SAAzBO,yBAAyB,CAC9B7gC,WAD8B,EAEH;AAC3B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,UAAM;AAACkkC,MAAAA;AAAD,QAAkBtuB,YAAU,CAChC4tB,kCAAkC,CAACW,mBADH,EAEhC/gC,WAAW,CAAC9F,IAFoB,CAAlC;AAIA,WAAO;AAAC4mC,MAAAA;AAAD,KAAP;AACF;AAEA;AACF;AACA;;;AACuB,SAAdntB,cAAc,CAAC/W,SAAD,EAAuB;AAC1C,QAAI,CAACA,SAAS,CAACjB,MAAViB,CAAiBokC,oBAAoB,CAACpkC,SAAtCA,CAAL,EAAuD;AACrD,YAAM,IAAIlC,KAAJ,CACJ,4DADI,CAAN;AAGF;AACF;;AArGoC;AAwGtC;AACA;AACA;;AAsDA;AACA;AACA;AACA;;;MACa0lC,kCAAkC,GAAGxmC,MAAM,CAACyc,MAAPzc,CAI/C;AACD4mC,EAAAA,YAAY,EAAE;AACZjhC,IAAAA,KAAK,EAAE,CADK;AAEZ0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CACAA,YAAY,CAACkB,EAAblB,CAAgB,aAAhBA,CADA,EAEAA,YAAY,CAACK,GAAbL,CAAiB,OAAjBA,CAFA,EAGAA,YAAY,CAACK,GAAbL,CAAiB,eAAjBA,CAHA,CAFMA;AAFI,GADb;AAWDqgC,EAAAA,gBAAgB,EAAE;AAChBnhC,IAAAA,KAAK,EAAE,CADS;AAEhB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACkB,EAAblB,CAAgB,aAAhBA,CAAD,EAAiCA,YAAY,CAACK,GAAbL,CAAiB,OAAjBA,CAAjC,CAFMA;AAFQ,GAXjB;AAiBDugC,EAAAA,mBAAmB,EAAE;AACnBrhC,IAAAA,KAAK,EAAE,CADY;AAEnB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACkB,EAAblB,CAAgB,aAAhBA,CAAD,EAAiCA,YAAY,CAACK,GAAbL,CAAiB,OAAjBA,CAAjC,CAFMA;AAFW,GAjBpB;AAuBD0gC,EAAAA,mBAAmB,EAAE;AACnBxhC,IAAAA,KAAK,EAAE,CADY;AAEnB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAEN,CAACA,YAAY,CAACkB,EAAblB,CAAgB,aAAhBA,CAAD,EAAiCmT,GAAG,CAAC,eAAD,CAApC,CAFMnT;AAFW;AAvBpB,CAJ+CzG,C;AAmClD;AACA;AACA;;AACO,MAAMonC,oBAAN,CAA2B;AAChC;AACF;AACA;AACEtnC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAKE;AACF;AACA;;;AACqB,SAAZunC,YAAY,CAACzqB,MAAD,EAAqD;AACtE,UAAM9U,IAAI,GAAG0+B,kCAAkC,CAACI,YAAhD;AACA,UAAMtmC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO8U,MAAP,CAAvB;AACA,WAAO,IAAIlL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;;AAEuB,SAAhBgnC,gBAAgB,CACrB1qB,MADqB,EAEG;AACxB,UAAM9U,IAAI,GAAG0+B,kCAAkC,CAACM,gBAAhD;AACA,UAAMxmC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO8U,MAAP,CAAvB;AACA,WAAO,IAAIlL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;;AAE0B,SAAnBinC,mBAAmB,CACxB3qB,MADwB,EAEA;AACxB,UAAM9U,IAAI,GAAG0+B,kCAAkC,CAACQ,mBAAhD;AACA,UAAM1mC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO8U,MAAP,CAAvB;AACA,WAAO,IAAIlL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;;AAE0B,SAAnBknC,mBAAmB,CACxB5qB,MADwB,EAEA;AACxB,UAAM9U,IAAI,GAAG0+B,kCAAkC,CAACW,mBAAhD;AACA,UAAM7mC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5Bo/B,MAAAA,aAAa,EAAEpqB,MAAM,CAACF,MAAM,CAACsqB,aAAR;AADO,KAAP,CAAvB;AAGA,WAAO,IAAIx1B,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE,KAAKA,SAFgB;AAGhC1C,MAAAA;AAHgC,KAA3B,CAAP;AAKF;;AA9DgC;;AAArB8mC,oBAAoB,CASxBpkC,SATIokC,GASmB,IAAI3lC,SAAJ,CAC5B,6CAD4B,CATnB2lC;AChNb,MAAMK,mBAAiB,GAAG,EAA1B;AACA,MAAMC,kBAAgB,GAAG,EAAzB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA;AACA;AACA;;AAiBA,MAAMC,0BAA0B,GAAGnhC,YAAY,CAACI,MAAbJ,CAYjC,CACAA,YAAY,CAACkB,EAAblB,CAAgB,eAAhBA,CADA,EAEAA,YAAY,CAACkB,EAAblB,CAAgB,SAAhBA,CAFA,EAGAA,YAAY,CAACohC,GAAbphC,CAAiB,iBAAjBA,CAHA,EAIAA,YAAY,CAACohC,GAAbphC,CAAiB,2BAAjBA,CAJA,EAKAA,YAAY,CAACohC,GAAbphC,CAAiB,iBAAjBA,CALA,EAMAA,YAAY,CAACohC,GAAbphC,CAAiB,2BAAjBA,CANA,EAOAA,YAAY,CAACohC,GAAbphC,CAAiB,mBAAjBA,CAPA,EAQAA,YAAY,CAACohC,GAAbphC,CAAiB,iBAAjBA,CARA,EASAA,YAAY,CAACohC,GAAbphC,CAAiB,yBAAjBA,CATA,CAZiCA,CAAnC;;AAwBO,MAAMqhC,cAAN,CAAqB;AAC1B;AACF;AACA;AACEhoC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAKE;AACF;AACA;AACA;AACA;;;AACuC,SAA9BioC,8BAA8B,CACnCnrB,MADmC,EAEX;AACxB,UAAM;AAACpe,MAAAA,SAAD;AAAYU,MAAAA,OAAZ;AAAqB0F,MAAAA,SAArB;AAAgCojC,MAAAA;AAAhC,QAAoDprB,MAA1D;AAEA9S,IAAAA,MAAM,CACJtL,SAAS,CAACqC,MAAVrC,KAAqBkpC,kBADjB,EAEkBA,sBAAAA,kBAAuClpC,uBAAAA,SAAS,CAACqC,MAAO,QAF1E,CAANiJ;AAKAA,IAAAA,MAAM,CACJlF,SAAS,CAAC/D,MAAV+D,KAAqB+iC,eADjB,EAEiBA,qBAAAA,eAAsC/iC,uBAAAA,SAAS,CAAC/D,MAAO,QAFxE,CAANiJ;AAKA,UAAMm+B,eAAe,GAAGL,0BAA0B,CAACtgC,IAAnD;AACA,UAAM4gC,eAAe,GAAGD,eAAe,GAAGzpC,SAAS,CAACqC,MAApD;AACA,UAAMsnC,iBAAiB,GAAGD,eAAe,GAAGtjC,SAAS,CAAC/D,MAAtD;AACA,UAAMunC,aAAa,GAAG,CAAtB;AAEA,UAAMjrB,eAAe,GAAG5d,MAAM,CAACiD,KAAPjD,CAAa4oC,iBAAiB,GAAGjpC,OAAO,CAAC2B,MAAzCtB,CAAxB;AAEA,UAAMoG,KAAK,GACTqiC,gBAAgB,IAAI,IAApBA,GACI,MADJA,CACU;AADVA,MAEIA,gBAHN;AAKAJ,IAAAA,0BAA0B,CAAC1nC,MAA3B0nC,CACE;AACEQ,MAAAA,aADF;AAEEC,MAAAA,OAAO,EAAE,CAFX;AAGEH,MAAAA,eAHF;AAIEI,MAAAA,yBAAyB,EAAE3iC,KAJ7B;AAKEsiC,MAAAA,eALF;AAMEM,MAAAA,yBAAyB,EAAE5iC,KAN7B;AAOEwiC,MAAAA,iBAPF;AAQEK,MAAAA,eAAe,EAAEtpC,OAAO,CAAC2B,MAR3B;AASE4nC,MAAAA,uBAAuB,EAAE9iC;AAT3B,KADFiiC,EAYEzqB,eAZFyqB;AAeAzqB,IAAAA,eAAe,CAAC1L,IAAhB0L,CAAqB3e,SAArB2e,EAAgC8qB,eAAhC9qB;AACAA,IAAAA,eAAe,CAAC1L,IAAhB0L,CAAqBvY,SAArBuY,EAAgC+qB,eAAhC/qB;AACAA,IAAAA,eAAe,CAAC1L,IAAhB0L,CAAqBje,OAArBie,EAA8BgrB,iBAA9BhrB;AAEA,WAAO,IAAIzL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE8kC,cAAc,CAAC9kC,SAFM;AAGhC1C,MAAAA,IAAI,EAAE6c;AAH0B,KAA3B,CAAP;AAKF;AAEA;AACF;AACA;AACA;;;AACwC,SAA/BurB,+BAA+B,CACpC9rB,MADoC,EAEZ;AACxB,UAAM;AAAC+rB,MAAAA,UAAD;AAAazpC,MAAAA,OAAb;AAAsB8oC,MAAAA;AAAtB,QAA0CprB,MAAhD;AAEA9S,IAAAA,MAAM,CACJ6+B,UAAU,CAAC9nC,MAAX8nC,KAAsBlB,mBADlB,EAEmBA,uBAAAA,mBAAwCkB,uBAAAA,UAAU,CAAC9nC,MAAO,QAF7E,CAANiJ;;AAKA,QAAI;AACF,YAAMw6B,OAAO,GAAGF,OAAO,CAACI,aAARJ,CAAsBuE,UAAtBvE,CAAhB;AACA,YAAM5lC,SAAS,GAAG8lC,OAAO,CAAC9lC,SAAR8lC,CAAkBpiC,OAAlBoiC,EAAlB;AACA,YAAM1/B,SAAS,GAAG3F,IAAI,CAACC,OAAD,EAAUolC,OAAO,CAAC5lC,SAAlB,CAAtB;AAEA,aAAO,KAAKqpC,8BAAL,CAAoC;AACzCvpC,QAAAA,SADyC;AAEzCU,QAAAA,OAFyC;AAGzC0F,QAAAA,SAHyC;AAIzCojC,QAAAA;AAJyC,OAApC,CAAP;AAMD,KAXD,CAWE,OAAO3pB,KAAP,EAAc;AACd,YAAM,IAAIvd,KAAJ,CAAyCud,+BAAAA,KAAM,EAA/C,CAAN;AACF;AACF;;AAnG0B;;AAAfypB,cAAc,CASlB9kC,SATI8kC,GASmB,IAAIrmC,SAAJ,CAC5B,6CAD4B,CATnBqmC,C,CCpDb;AACA;;AACAc,SAAS,CAAC7qC,KAAV6qC,CAAgBC,cAAhBD,GAAiC,CAAC5nC,GAAD,EAAkB,GAAG8nC,IAArB,KAA4C;AAC3E,QAAMC,CAAC,GAAGC,IAAI,CAACniB,MAALmiB,CAAY7lC,MAAZ6lC,EAAoBhoC,GAApBgoC,CAAV;AACAF,EAAAA,IAAI,CAACxlC,OAALwlC,CAAaG,GAAG,IAAIF,CAAC,CAACG,MAAFH,CAASE,GAATF,CAApBD;AACA,SAAOC,CAAC,CAACI,MAAFJ,EAAP;AACD,CAJDH;;AAMO,MAAMQ,SAAS,GAAG,CACvBC,OADuB,EAEvBC,OAFuB,KAGpBV,SAAS,CAACW,QAAVX,CAAmBS,OAAnBT,EAA4BU,OAA5BV,EAAqC;AAACY,EAAAA,GAAG,EAAE,KAAN;AAAaC,EAAAA,SAAS,EAAE;AAAxB,CAArCb,CAHE;;AAI0BA,SAAS,CAAC7qC,KAAV6qC,CAAgBc,iBAAhBd;AAC1B,MAAMe,eAAe,GAAGf,SAAS,CAACnqC,YAAlC;ACPP,MAAMgpC,iBAAiB,GAAG,EAA1B;AACA,MAAMmC,sBAAsB,GAAG,EAA/B;AACA,MAAMlC,gBAAgB,GAAG,EAAzB;AACA,MAAMmC,iCAAiC,GAAG,EAA1C;AAEA;AACA;AACA;;AA6BA,MAAMC,4BAA4B,GAAGrjC,YAAY,CAACI,MAAbJ,CAcnC,CACAA,YAAY,CAACkB,EAAblB,CAAgB,eAAhBA,CADA,EAEAA,YAAY,CAACohC,GAAbphC,CAAiB,iBAAjBA,CAFA,EAGAA,YAAY,CAACkB,EAAblB,CAAgB,2BAAhBA,CAHA,EAIAA,YAAY,CAACohC,GAAbphC,CAAiB,kBAAjBA,CAJA,EAKAA,YAAY,CAACkB,EAAblB,CAAgB,4BAAhBA,CALA,EAMAA,YAAY,CAACohC,GAAbphC,CAAiB,mBAAjBA,CANA,EAOAA,YAAY,CAACohC,GAAbphC,CAAiB,iBAAjBA,CAPA,EAQAA,YAAY,CAACkB,EAAblB,CAAgB,yBAAhBA,CARA,EASAA,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsB,YAAtBA,CATA,EAUAA,YAAY,CAACC,IAAbD,CAAkB,EAAlBA,EAAsB,WAAtBA,CAVA,EAWAA,YAAY,CAACkB,EAAblB,CAAgB,YAAhBA,CAXA,CAdmCA,CAArC;;AA4BO,MAAMsjC,gBAAN,CAAuB;AAC5B;AACF;AACA;AACEjqC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAKE;AACF;AACA;AACA;;;AAC8B,SAArBkqC,qBAAqB,CAC1BxrC,SAD0B,EAElB;AACRsL,IAAAA,MAAM,CACJtL,SAAS,CAACqC,MAAVrC,KAAqBkpC,gBADjB,EAEkBA,sBAAAA,gBAAuClpC,uBAAAA,SAAS,CAACqC,MAAO,QAF1E,CAANiJ;;AAKA,QAAI;AACF,aAAOvK,MAAM,CAACE,IAAPF,CAAY0qC,UAAU,CAAC5qC,QAAQ,CAACb,SAAD,CAAT,CAAtBe,EAA6CJ,KAA7CI,CACL,CAACqqC,sBADIrqC,CAAP;AAGD,KAJD,CAIE,OAAO8e,KAAP,EAAc;AACd,YAAM,IAAIvd,KAAJ,CAAkDud,wCAAAA,KAAM,EAAxD,CAAN;AACF;AACF;AAEA;AACF;AACA;AACA;;;AACuC,SAA9B0pB,8BAA8B,CACnCnrB,MADmC,EAEX;AACxB,UAAM;AAACpe,MAAAA,SAAD;AAAYU,MAAAA,OAAZ;AAAqB0F,MAAAA,SAArB;AAAgCslC,MAAAA,UAAhC;AAA4ClC,MAAAA;AAA5C,QACJprB,MADF;AAEA,WAAOmtB,gBAAgB,CAACI,+BAAjBJ,CAAiD;AACtDK,MAAAA,UAAU,EAAEL,gBAAgB,CAACC,qBAAjBD,CAAuCvrC,SAAvCurC,CAD0C;AAEtD7qC,MAAAA,OAFsD;AAGtD0F,MAAAA,SAHsD;AAItDslC,MAAAA,UAJsD;AAKtDlC,MAAAA;AALsD,KAAjD+B,CAAP;AAOF;AAEA;AACF;AACA;AACA;;;AACwC,SAA/BI,+BAA+B,CACpCvtB,MADoC,EAEZ;AACxB,UAAM;AACJwtB,MAAAA,UAAU,EAAEC,UADR;AAEJnrC,MAAAA,OAFI;AAGJ0F,MAAAA,SAHI;AAIJslC,MAAAA,UAJI;AAKJlC,MAAAA,gBAAgB,GAAG;AALf,QAMFprB,MANJ;AAQA,QAAIwtB,UAAJ;;AACA,QAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAIA,UAAU,CAACxlB,UAAXwlB,CAAsB,IAAtBA,CAAJ,EAAiC;AAC/BD,QAAAA,UAAU,GAAG7qC,MAAM,CAACE,IAAPF,CAAY8qC,UAAU,CAACC,MAAXD,CAAkB,CAAlBA,CAAZ9qC,EAAkC,KAAlCA,CAAb6qC;AACD,OAFD,MAEO;AACLA,QAAAA,UAAU,GAAG7qC,MAAM,CAACE,IAAPF,CAAY8qC,UAAZ9qC,EAAwB,KAAxBA,CAAb6qC;AACF;AACD,KAND,MAMO;AACLA,MAAAA,UAAU,GAAGC,UAAbD;AACF;;AAEAtgC,IAAAA,MAAM,CACJsgC,UAAU,CAACvpC,MAAXupC,KAAsBR,sBADlB,EAEeA,mBAAAA,sBAA6CQ,uBAAAA,UAAU,CAACvpC,MAAO,QAF9E,CAANiJ;AAKA,UAAMygC,SAAS,GAAG,IAAIV,iCAAtB;AACA,UAAMW,gBAAgB,GAAGD,SAAzB;AACA,UAAMrC,eAAe,GAAGqC,SAAS,GAAGH,UAAU,CAACvpC,MAA/C;AACA,UAAMsnC,iBAAiB,GAAGD,eAAe,GAAGtjC,SAAS,CAAC/D,MAA5BqnC,GAAqC,CAA/D;AACA,UAAME,aAAa,GAAG,CAAtB;AAEA,UAAMjrB,eAAe,GAAG5d,MAAM,CAACiD,KAAPjD,CACtBuqC,4BAA4B,CAACxiC,IAA7BwiC,GAAoC5qC,OAAO,CAAC2B,MADtBtB,CAAxB;AAIAuqC,IAAAA,4BAA4B,CAAC5pC,MAA7B4pC,CACE;AACE1B,MAAAA,aADF;AAEEF,MAAAA,eAFF;AAGEI,MAAAA,yBAAyB,EAAEN,gBAH7B;AAIEwC,MAAAA,gBAJF;AAKEC,MAAAA,0BAA0B,EAAEzC,gBAL9B;AAMEG,MAAAA,iBANF;AAOEK,MAAAA,eAAe,EAAEtpC,OAAO,CAAC2B,MAP3B;AAQE4nC,MAAAA,uBAAuB,EAAET,gBAR3B;AASEpjC,MAAAA,SAAS,EAAEvF,QAAQ,CAACuF,SAAD,CATrB;AAUEwlC,MAAAA,UAAU,EAAE/qC,QAAQ,CAAC+qC,UAAD,CAVtB;AAWEF,MAAAA;AAXF,KADFJ,EAcE3sB,eAdF2sB;AAiBA3sB,IAAAA,eAAe,CAAC1L,IAAhB0L,CAAqB9d,QAAQ,CAACH,OAAD,CAA7Bie,EAAwC2sB,4BAA4B,CAACxiC,IAArE6V;AAEA,WAAO,IAAIzL,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,EAD0B;AAEhCoC,MAAAA,SAAS,EAAE+mC,gBAAgB,CAAC/mC,SAFI;AAGhC1C,MAAAA,IAAI,EAAE6c;AAH0B,KAA3B,CAAP;AAKF;AAEA;AACF;AACA;AACA;;;AACwC,SAA/BurB,+BAA+B,CACpC9rB,MADoC,EAEZ;AACxB,UAAM;AAAC+rB,MAAAA,UAAU,EAAE+B,IAAb;AAAmBxrC,MAAAA,OAAnB;AAA4B8oC,MAAAA;AAA5B,QAAgDprB,MAAtD;AAEA9S,IAAAA,MAAM,CACJ4gC,IAAI,CAAC7pC,MAAL6pC,KAAgBjD,iBADZ,EAEmBA,uBAAAA,iBAAwCiD,uBAAAA,IAAI,CAAC7pC,MAAO,QAFvE,CAANiJ;;AAKA,QAAI;AACF,YAAM6+B,UAAU,GAAGtpC,QAAQ,CAACqrC,IAAD,CAA3B;AACA,YAAMlsC,SAAS,GAAGmrC,eAAe,CAC/BhB,UAD+B,EAE/B;AAAK;AAF0B,OAAfgB,CAGhBxqC,KAHgBwqC,CAGV,CAHUA,CAAlB,CAFE,CAKS;;AACX,YAAMgB,WAAW,GAAGprC,MAAM,CAACE,IAAPF,CAAY0qC,UAAU,CAAC5qC,QAAQ,CAACH,OAAD,CAAT,CAAtBK,CAApB;AACA,YAAM,CAACqF,SAAD,EAAYslC,UAAZ,IAA0Bd,SAAS,CAACuB,WAAD,EAAchC,UAAd,CAAzC;AAEA,aAAO,KAAKZ,8BAAL,CAAoC;AACzCvpC,QAAAA,SADyC;AAEzCU,QAAAA,OAFyC;AAGzC0F,QAAAA,SAHyC;AAIzCslC,QAAAA,UAJyC;AAKzClC,QAAAA;AALyC,OAApC,CAAP;AAOD,KAhBD,CAgBE,OAAO3pB,KAAP,EAAc;AACd,YAAM,IAAIvd,KAAJ,CAAyCud,+BAAAA,KAAM,EAA/C,CAAN;AACF;AACF;;AAxJ4B;;AAAjB0rB,gBAAgB,CASpB/mC,SATI+mC,GASmB,IAAItoC,SAAJ,CAC5B,6CAD4B,CATnBsoC;ACvDb;AACA;AACA;AACA;;MACaa,eAAe,GAAG,IAAInpC,SAAJ,CAC7B,6CAD6B,C;AAI/B;AACA;AACA;;AACO,MAAMopC,UAAN,CAAiB;AACtB;;AAEA;;AAGA;AACF;AACA;AACA;AACA;AACE/qC,EAAAA,WAAW,CAACgrC,MAAD,EAAoBC,UAApB,EAA2C;AAAA,SATtDD,MASsD,GAThD,KAAA,CASgD;AAThD,SAENC,UAFM,GAEI,KAAA,CAFJ;AAUJ,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACF;;AAdsB;AAsBxB;AACA;AACA;;;AACO,MAAMC,MAAN,CAAa;AAClB;;AAEA;;AAEA;;AAGA;AACF;AACA;AACElrC,EAAAA,WAAW,CAACmrC,aAAD,EAAwBjrB,KAAxB,EAAuCkrB,SAAvC,EAA6D;AAAA,SATxED,aASwE,GAT3D,KAAA,CAS2D;AAT3D,SAEbjrB,KAFa,GAER,KAAA,CAFQ;AAER,SAELkrB,SAFK,GAEI,KAAA,CAFJ;AAQH,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKjrB,KAAL,GAAaA,KAAb;AACA,SAAKkrB,SAAL,GAAiBA,SAAjB;AACF;AAEA;AACF;AACA;;;AAnBoB;;AAAPF,MAAM,CAoBVlpC,OApBIkpC,GAoBc,IAAIA,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBvpC,SAAS,CAACK,OAA3B,CApBdkpC;AAsJb;AACA;AACA;;AACO,MAAMG,gBAAN,CAAuB;AAC5B;AACF;AACA;AACErrC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;;AAC8B,SAArBga,qBAAqB,CAC1B1T,WAD0B,EAEJ;AACtB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AAEA,UAAMgX,qBAAqB,GAAGvT,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;AACA,UAAMwT,SAAS,GAAGD,qBAAqB,CAAC3Z,MAAtB2Z,CAA6B5T,WAAW,CAAC9F,IAAzC0Z,CAAlB;AAEA,QAAIlS,IAAJ;;AACA,SAAK,MAAM,CAACoS,MAAD,EAAS7R,MAAT,CAAX,IAA+BrI,MAAM,CAAC6J,OAAP7J,CAAeorC,yBAAfprC,CAA/B,EAA0E;AACxE,UAAIqI,MAAM,CAAC1C,KAAP0C,IAAgB4R,SAApB,EAA+B;AAC7BnS,QAAAA,IAAI,GAAGoS,MAAPpS;AACA;AACF;AACF;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIhH,KAAJ,CAAU,oDAAV,CAAN;AACF;;AAEA,WAAOgH,IAAP;AACF;AAEA;AACF;AACA;;;AACyB,SAAhBujC,gBAAgB,CACrBjlC,WADqB,EAEE;AACvB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC2G,MAAAA,UAAD;AAAaC,MAAAA;AAAb,QAAuBoR,YAAU,CACrCwyB,yBAAyB,CAACE,UADW,EAErCllC,WAAW,CAAC9F,IAFyB,CAAvC;AAKA,WAAO;AACLirC,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELuD,MAAAA,UAAU,EAAE,IAAIsjC,UAAJ,CACV,IAAIppC,SAAJ,CAAc8F,UAAU,CAACujC,MAAzB,CADU,EAEV,IAAIrpC,SAAJ,CAAc8F,UAAU,CAACwjC,UAAzB,CAFU,CAFP;AAMLvjC,MAAAA,MAAM,EAAE,IAAIwjC,MAAJ,CACNxjC,MAAM,CAACyjC,aADD,EAENzjC,MAAM,CAACwY,KAFD,EAGN,IAAIve,SAAJ,CAAc+F,MAAM,CAAC0jC,SAArB,CAHM;AANH,KAAP;AAYF;AAEA;AACF;AACA;;;AACuB,SAAdM,cAAc,CACnBplC,WADmB,EAEE;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACAgY,IAAAA,YAAU,CAACwyB,yBAAyB,CAACK,QAA3B,EAAqCrlC,WAAW,CAAC9F,IAAjD,CAAVsY;AAEA,WAAO;AACL2yB,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELqrB,MAAAA,UAAU,EAAEjpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF3B;AAGLkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAHjC,KAAP;AAKF;AAEA;AACF;AACA;;;AACwB,SAAf0nC,eAAe,CACpBtlC,WADoB,EAEE;AACtB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACA,UAAM;AAAC+qC,MAAAA,aAAD;AAAgBC,MAAAA;AAAhB,QAA0ChzB,YAAU,CACxDwyB,yBAAyB,CAACS,SAD8B,EAExDzlC,WAAW,CAAC9F,IAF4C,CAA1D;AAKA,UAAMwrC,CAAuB,GAAG;AAC9BP,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MADH;AAE9BkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFR;AAG9BsY,MAAAA,mBAAmB,EAAE,IAAI7a,SAAJ,CAAckqC,aAAd,CAHS;AAI9BC,MAAAA,sBAAsB,EAAE;AACtBjmC,QAAAA,KAAK,EAAEimC;AADe;AAJM,KAAhC;;AAQA,QAAIxlC,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAjBuF,GAA0B,CAA9B,EAAiC;AAC/B0lC,MAAAA,CAAC,CAACC,eAAFD,GAAoB1lC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAAxC8nC;AACF;;AACA,WAAOA,CAAP;AACF;AAEA;AACF;AACA;;;AACgC,SAAvBE,uBAAuB,CAC5B5lC,WAD4B,EAEE;AAC9B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AACJ+qC,MAAAA,aADI;AAEJC,MAAAA,sBAFI;AAGJK,MAAAA,aAHI;AAIJC,MAAAA;AAJI,QAKFtzB,YAAU,CACZwyB,yBAAyB,CAACe,iBADd,EAEZ/lC,WAAW,CAAC9F,IAFA,CALd;AAUA,UAAMwrC,CAA+B,GAAG;AACtCP,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MADK;AAEtCooC,MAAAA,aAAa,EAAEhmC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFG;AAGtCioC,MAAAA,aAAa,EAAEA,aAHuB;AAItCC,MAAAA,cAAc,EAAE,IAAIzqC,SAAJ,CAAcyqC,cAAd,CAJsB;AAKtC5vB,MAAAA,mBAAmB,EAAE,IAAI7a,SAAJ,CAAckqC,aAAd,CALiB;AAMtCC,MAAAA,sBAAsB,EAAE;AACtBjmC,QAAAA,KAAK,EAAEimC;AADe;AANc,KAAxC;;AAUA,QAAIxlC,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAjBuF,GAA0B,CAA9B,EAAiC;AAC/B0lC,MAAAA,CAAC,CAACC,eAAFD,GAAoB1lC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAAxC8nC;AACF;;AACA,WAAOA,CAAP;AACF;AAEA;AACF;AACA;;;AACoB,SAAXO,WAAW,CAACjmC,WAAD,EAAwD;AACxE,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACA,UAAM;AAAC0Z,MAAAA;AAAD,QAAa1B,YAAU,CAC3BwyB,yBAAyB,CAACkB,KADC,EAE3BlmC,WAAW,CAAC9F,IAFe,CAA7B;AAKA,WAAO;AACLirC,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELuoC,MAAAA,gBAAgB,EAAEnmC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFjC;AAGLkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAHjC;AAILsW,MAAAA;AAJK,KAAP;AAMF;AAEA;AACF;AACA;;;AACoB,SAAXkyB,WAAW,CAACpmC,WAAD,EAAwD;AACxE,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACAgY,IAAAA,YAAU,CAACwyB,yBAAyB,CAACqB,KAA3B,EAAkCrmC,WAAW,CAAC9F,IAA9C,CAAVsY;AAEA,WAAO;AACL2yB,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAEL0oC,MAAAA,iBAAiB,EAAEtmC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFlC;AAGLkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAHjC,KAAP;AAKF;AAEA;AACF;AACA;;;AACuB,SAAd2oC,cAAc,CACnBvmC,WADmB,EAEE;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACA,UAAM;AAAC0Z,MAAAA;AAAD,QAAa1B,YAAU,CAC3BwyB,yBAAyB,CAACwB,QADC,EAE3BxmC,WAAW,CAAC9F,IAFe,CAA7B;AAKA,UAAMwrC,CAAsB,GAAG;AAC7BP,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MADJ;AAE7B6W,MAAAA,QAAQ,EAAEzU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFD;AAG7BkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAHT;AAI7BsW,MAAAA;AAJ6B,KAA/B;;AAMA,QAAIlU,WAAW,CAACxF,IAAZwF,CAAiBvF,MAAjBuF,GAA0B,CAA9B,EAAiC;AAC/B0lC,MAAAA,CAAC,CAACC,eAAFD,GAAoB1lC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAAxC8nC;AACF;;AACA,WAAOA,CAAP;AACF;AAEA;AACF;AACA;;;AACyB,SAAhBe,gBAAgB,CACrBzmC,WADqB,EAEE;AACvB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AACAgY,IAAAA,YAAU,CAACwyB,yBAAyB,CAAC0B,UAA3B,EAAuC1mC,WAAW,CAAC9F,IAAnD,CAAVsY;AAEA,WAAO;AACL2yB,MAAAA,WAAW,EAAEnlC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD5B;AAELkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAFjC,KAAP;AAIF;AAEA;AACF;AACA;;;AACuB,SAAd+V,cAAc,CAAC/W,SAAD,EAAuB;AAC1C,QAAI,CAACA,SAAS,CAACjB,MAAViB,CAAiB+pC,YAAY,CAAC/pC,SAA9BA,CAAL,EAA+C;AAC7C,YAAM,IAAIlC,KAAJ,CAAU,oDAAV,CAAN;AACF;AACF;AAEA;AACF;AACA;;;AACuB,SAAduZ,cAAc,CAACzZ,IAAD,EAAmB4b,cAAnB,EAA2C;AAC9D,QAAI5b,IAAI,CAACC,MAALD,GAAc4b,cAAlB,EAAkC;AAChC,YAAM,IAAI1b,KAAJ,CAC0BF,8BAAAA,IAAI,CAACC,MAAO,4BAA2B2b,cAAe,EADhF,CAAN;AAGF;AACF;;AAxO4B;AA2O9B;AACA;AACA;;AA+CA;AACA;AACA;AACA;;;MACa4uB,yBAAyB,GAAGprC,MAAM,CAACyc,MAAPzc,CAItC;AACDsrC,EAAAA,UAAU,EAAE;AACV3lC,IAAAA,KAAK,EAAE,CADG;AAEV0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA6D,CACnEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADmE,EAEnEyH,UAAiB,EAFkD,EAGnEA,MAAa,EAHsD,CAA7DzH;AAFE,GADX;AASDolC,EAAAA,SAAS,EAAE;AACTlmC,IAAAA,KAAK,EAAE,CADE;AAET0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA4D,CAClEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADkE,EAElEyH,SAAgB,CAAC,eAAD,CAFkD,EAGlEzH,YAAY,CAACK,GAAbL,CAAiB,wBAAjBA,CAHkE,CAA5DA;AAFC,GATV;AAiBDglC,EAAAA,QAAQ,EAAE;AACR9lC,IAAAA,KAAK,EAAE,CADC;AAER0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA2D,CACjEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADiE,CAA3DA;AAFA,GAjBT;AAuBD6lC,EAAAA,KAAK,EAAE;AACL3mC,IAAAA,KAAK,EAAE,CADF;AAEL0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAwD,CAC9DA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD8D,EAE9DA,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAF8D,CAAxDA;AAFH,GAvBN;AA8BDmmC,EAAAA,QAAQ,EAAE;AACRjnC,IAAAA,KAAK,EAAE,CADC;AAER0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA2D,CACjEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADiE,EAEjEA,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAFiE,CAA3DA;AAFA,GA9BT;AAqCDqmC,EAAAA,UAAU,EAAE;AACVnnC,IAAAA,KAAK,EAAE,CADG;AAEV0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA6D,CACnEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADmE,CAA7DA;AAFE,GArCX;AA2CDgmC,EAAAA,KAAK,EAAE;AACL9mC,IAAAA,KAAK,EAAE,CADF;AAEL0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAwD,CAC9DA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAD8D,CAAxDA;AAFH,GA3CN;AAiDD0lC,EAAAA,iBAAiB,EAAE;AACjBxmC,IAAAA,KAAK,EAAE,CADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CACN,CACEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADF,EAEEyH,SAAgB,CAAC,eAAD,CAFlB,EAGEzH,YAAY,CAACK,GAAbL,CAAiB,wBAAjBA,CAHF,EAIEyH,UAAiB,CAAC,eAAD,CAJnB,EAKEA,SAAgB,CAAC,gBAAD,CALlB,CADMzH;AAFS;AAjDlB,CAJsCzG,C;AAmEzC;AACA;AACA;;AAMA;AACA;AACA;;MACagtC,wBAAwB,GAAGhtC,MAAM,CAACyc,MAAPzc,CAAc;AACpDitC,EAAAA,MAAM,EAAE;AACNtnC,IAAAA,KAAK,EAAE;AADD,GAD4C;AAIpDunC,EAAAA,UAAU,EAAE;AACVvnC,IAAAA,KAAK,EAAE;AADG;AAJwC,CAAd3F,C;AASxC;AACA;AACA;;AACO,MAAM+sC,YAAN,CAAmB;AACxB;AACF;AACA;AACEjtC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAcE;AACF;AACA;;;AACmB,SAAVqtC,UAAU,CAACvwB,MAAD,EAAwD;AACvE,UAAM;AAAC2uB,MAAAA,WAAD;AAAchkC,MAAAA,UAAd;AAA0BC,MAAAA,MAAM,EAAE4lC;AAAlC,QAAiDxwB,MAAvD;AACA,UAAMpV,MAAc,GAAG4lC,WAAW,IAAIpC,MAAM,CAAClpC,OAA7C;AACA,UAAMgG,IAAI,GAAGsjC,yBAAyB,CAACE,UAAvC;AACA,UAAMhrC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BP,MAAAA,UAAU,EAAE;AACVujC,QAAAA,MAAM,EAAEzrC,QAAQ,CAACkI,UAAU,CAACujC,MAAXvjC,CAAkBlI,QAAlBkI,EAAD,CADN;AAEVwjC,QAAAA,UAAU,EAAE1rC,QAAQ,CAACkI,UAAU,CAACwjC,UAAXxjC,CAAsBlI,QAAtBkI,EAAD;AAFV,OADgB;AAK5BC,MAAAA,MAAM,EAAE;AACNyjC,QAAAA,aAAa,EAAEzjC,MAAM,CAACyjC,aADhB;AAENjrB,QAAAA,KAAK,EAAExY,MAAM,CAACwY,KAFR;AAGNkrB,QAAAA,SAAS,EAAE7rC,QAAQ,CAACmI,MAAM,CAAC0jC,SAAP1jC,CAAiBnI,QAAjBmI,EAAD;AAHb;AALoB,KAAP,CAAvB;AAWA,UAAM2V,eAAe,GAAG;AACtBvc,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAEkT,kBAAT;AAA6B7N,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OAFI,CADgB;AAKtBtG,MAAAA,SAAS,EAAE,KAAKA,SALM;AAMtB1C,MAAAA;AANsB,KAAxB;AAQA,WAAO,IAAIoR,sBAAJ,CAA2ByL,eAA3B,CAAP;AACF;AAEA;AACF;AACA;AACA;;;AAC8B,SAArBJ,qBAAqB,CAC1BH,MAD0B,EAEb;AACb,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACQ,qBAAdR,CAAoC;AAClC9B,MAAAA,UAAU,EAAEmC,MAAM,CAACnC,UADe;AAElCC,MAAAA,gBAAgB,EAAEkC,MAAM,CAAC2uB,WAFS;AAGlCvwB,MAAAA,UAAU,EAAE4B,MAAM,CAAC5B,UAHe;AAIlCjY,MAAAA,IAAI,EAAE6Z,MAAM,CAAC7Z,IAJqB;AAKlCuX,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QALiB;AAMlCC,MAAAA,KAAK,EAAE,KAAKA,KANsB;AAOlCvX,MAAAA,SAAS,EAAE,KAAKA;AAPkB,KAApCuZ,CADFpO;AAYA,UAAM;AAACo9B,MAAAA,WAAD;AAAchkC,MAAAA,UAAd;AAA0BC,MAAAA;AAA1B,QAAoCoV,MAA1C;AACA,WAAOzO,WAAW,CAACuE,GAAZvE,CAAgB,KAAKg/B,UAAL,CAAgB;AAAC5B,MAAAA,WAAD;AAAchkC,MAAAA,UAAd;AAA0BC,MAAAA;AAA1B,KAAhB,CAAhB2G,CAAP;AACF;AAEA;AACF;AACA;;;AACsB,SAAbwO,aAAa,CAACC,MAAD,EAAgD;AAClE,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACI,aAAdJ,CAA4B;AAC1B9B,MAAAA,UAAU,EAAEmC,MAAM,CAACnC,UADO;AAE1BC,MAAAA,gBAAgB,EAAEkC,MAAM,CAAC2uB,WAFC;AAG1BjxB,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;AAI1BC,MAAAA,KAAK,EAAE,KAAKA,KAJc;AAK1BvX,MAAAA,SAAS,EAAE,KAAKA;AALU,KAA5BuZ,CADFpO;AAUA,UAAM;AAACo9B,MAAAA,WAAD;AAAchkC,MAAAA,UAAd;AAA0BC,MAAAA;AAA1B,QAAoCoV,MAA1C;AACA,WAAOzO,WAAW,CAACuE,GAAZvE,CAAgB,KAAKg/B,UAAL,CAAgB;AAAC5B,MAAAA,WAAD;AAAchkC,MAAAA,UAAd;AAA0BC,MAAAA;AAA1B,KAAhB,CAAhB2G,CAAP;AACF;AAEA;AACF;AACA;AACA;AACA;;;AACiB,SAARk/B,QAAQ,CAACzwB,MAAD,EAA2C;AACxD,UAAM;AAAC2uB,MAAAA,WAAD;AAAcryB,MAAAA,gBAAd;AAAgCmW,MAAAA;AAAhC,QAA8CzS,MAApD;AAEA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACK,QAAvC;AACA,UAAMnrC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,WAAO,IAAI8J,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAEqrB,UAAT;AAAqBhmB,QAAAA,QAAQ,EAAE,KAA/B;AAAsCC,QAAAA,UAAU,EAAE;AAAlD,OAFI,EAGJ;AAACtF,QAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAHI,EAIJ;AACEtF,QAAAA,MAAM,EAAEsT,2BADV;AAEEjO,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAJI,EASJ;AAACtF,QAAAA,MAAM,EAAE4mC,eAAT;AAA0BvhC,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OATI,EAUJ;AAACtF,QAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAVI,CADqB;AAa3BtG,MAAAA,SAAS,EAAE,KAAKA,SAbW;AAc3B1C,MAAAA;AAd2B,KAAtB,CAAP;AAgBF;AAEA;AACF;AACA;AACA;;;AACkB,SAATgtC,SAAS,CAAC1wB,MAAD,EAA4C;AAC1D,UAAM;AACJ2uB,MAAAA,WADI;AAEJryB,MAAAA,gBAFI;AAGJoD,MAAAA,mBAHI;AAIJsvB,MAAAA,sBAJI;AAKJG,MAAAA;AALI,QAMFnvB,MANJ;AAQA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACS,SAAvC;AACA,UAAMvrC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5B6jC,MAAAA,aAAa,EAAEtsC,QAAQ,CAACid,mBAAmB,CAACjd,QAApBid,EAAD,CADK;AAE5BsvB,MAAAA,sBAAsB,EAAEA,sBAAsB,CAACjmC;AAFnB,KAAP,CAAvB;AAKA,UAAM/E,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE;AAA3D,KAFW,EAGX;AAACtF,MAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE;AAAvD,KAHW,CAAb;;AAKA,QAAIyiC,eAAJ,EAAqB;AACnBnrC,MAAAA,IAAI,CAAC2E,IAAL3E,CAAU;AACRoD,QAAAA,MAAM,EAAE+nC,eADA;AAER1iC,QAAAA,QAAQ,EAAE,KAFF;AAGRC,QAAAA,UAAU,EAAE;AAHJ,OAAV1I;AAKF;;AACA,WAAO,IAAIgR,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;AACA;;;AAC0B,SAAjBitC,iBAAiB,CAAC3wB,MAAD,EAAoD;AAC1E,UAAM;AACJ2uB,MAAAA,WADI;AAEJa,MAAAA,aAFI;AAGJH,MAAAA,aAHI;AAIJC,MAAAA,cAJI;AAKJ5vB,MAAAA,mBALI;AAMJsvB,MAAAA,sBANI;AAOJG,MAAAA;AAPI,QAQFnvB,MARJ;AAUA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACe,iBAAvC;AACA,UAAM7rC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5B6jC,MAAAA,aAAa,EAAEtsC,QAAQ,CAACid,mBAAmB,CAACjd,QAApBid,EAAD,CADK;AAE5BsvB,MAAAA,sBAAsB,EAAEA,sBAAsB,CAACjmC,KAFnB;AAG5BsmC,MAAAA,aAAa,EAAEA,aAHa;AAI5BC,MAAAA,cAAc,EAAE7sC,QAAQ,CAAC6sC,cAAc,CAAC7sC,QAAf6sC,EAAD;AAJI,KAAP,CAAvB;AAOA,UAAMtrC,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAEooC,aAAT;AAAwB/iC,MAAAA,QAAQ,EAAE,IAAlC;AAAwCC,MAAAA,UAAU,EAAE;AAApD,KAFW,EAGX;AAACtF,MAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE;AAA3D,KAHW,CAAb;;AAKA,QAAIyiC,eAAJ,EAAqB;AACnBnrC,MAAAA,IAAI,CAAC2E,IAAL3E,CAAU;AACRoD,QAAAA,MAAM,EAAE+nC,eADA;AAER1iC,QAAAA,QAAQ,EAAE,KAFF;AAGRC,QAAAA,UAAU,EAAE;AAHJ,OAAV1I;AAKF;;AACA,WAAO,IAAIgR,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;;;AACyB,SAAhBktC,gBAAgB,CAAC5wB,MAAD,EAAmD;AACxE,UAAM;AAAC2uB,MAAAA,WAAD;AAAcryB,MAAAA,gBAAd;AAAgCqzB,MAAAA,gBAAhC;AAAkDjyB,MAAAA;AAAlD,QAA8DsC,MAApE;AACA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACkB,KAAvC;AACA,UAAMhsC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAACwS,MAAAA;AAAD,KAAP,CAAvB;AACA,WAAO,IAAI5I,sBAAJ,CAA2B;AAChC9Q,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAEuoC,gBAAT;AAA2BljC,QAAAA,QAAQ,EAAE,KAArC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAFI,EAGJ;AAACtF,QAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAHI,CAD0B;AAMhCtG,MAAAA,SAAS,EAAE,KAAKA,SANgB;AAOhC1C,MAAAA;AAPgC,KAA3B,CAAP;AASF;AAEA;AACF;AACA;;;AACc,SAALmtC,KAAK,CAAC7wB,MAAD,EAAwC;AAClD,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACI,aAAdJ,CAA4B;AAC1B9B,MAAAA,UAAU,EAAEmC,MAAM,CAAC1D,gBADO;AAE1BwB,MAAAA,gBAAgB,EAAEkC,MAAM,CAAC2vB,gBAFC;AAG1BjyB,MAAAA,QAAQ,EAAE,CAHgB;AAI1BC,MAAAA,KAAK,EAAE,KAAKA,KAJc;AAK1BvX,MAAAA,SAAS,EAAE,KAAKA;AALU,KAA5BuZ,CADFpO;AASA,WAAOA,WAAW,CAACuE,GAAZvE,CAAgB,KAAKq/B,gBAAL,CAAsB5wB,MAAtB,CAAhBzO,CAAP;AACF;AAEA;AACF;AACA;AACA;;;AACsB,SAAbu/B,aAAa,CAAC9wB,MAAD,EAAgD;AAClE,UAAM;AACJ2uB,MAAAA,WADI;AAEJryB,MAAAA,gBAFI;AAGJqzB,MAAAA,gBAHI;AAIJvxB,MAAAA,UAJI;AAKJjY,MAAAA,IALI;AAMJuX,MAAAA;AANI,QAOFsC,MAPJ;AAQA,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACgB,QAAdhB,CAAuB;AACrBpB,MAAAA,aAAa,EAAEoxB,gBADM;AAErBvxB,MAAAA,UAFqB;AAGrBjY,MAAAA,IAHqB;AAIrBwX,MAAAA,KAAK,EAAE,KAAKA,KAJS;AAKrBvX,MAAAA,SAAS,EAAE,KAAKA;AALK,KAAvBuZ,CADFpO;AASA,WAAOA,WAAW,CAACuE,GAAZvE,CACL,KAAKq/B,gBAAL,CAAsB;AACpBjC,MAAAA,WADoB;AAEpBryB,MAAAA,gBAFoB;AAGpBqzB,MAAAA,gBAHoB;AAIpBjyB,MAAAA;AAJoB,KAAtB,CADKnM,CAAP;AAQF;AAEA;AACF;AACA;;;AACc,SAALw/B,KAAK,CAAC/wB,MAAD,EAAwC;AAClD,UAAM;AAAC2uB,MAAAA,WAAD;AAAcmB,MAAAA,iBAAd;AAAiCxzB,MAAAA;AAAjC,QAAqD0D,MAA3D;AACA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACqB,KAAvC;AACA,UAAMnsC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,WAAO,IAAI8J,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAE0oC,iBAAT;AAA4BrjC,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OAFI,EAGJ;AAACtF,QAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAHI,EAIJ;AACEtF,QAAAA,MAAM,EAAEsT,2BADV;AAEEjO,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE;AAHd,OAJI,EASJ;AAACtF,QAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OATI,CADqB;AAY3BtG,MAAAA,SAAS,EAAE,KAAKA,SAZW;AAa3B1C,MAAAA;AAb2B,KAAtB,CAAP;AAeF;AAEA;AACF;AACA;;;AACiB,SAARstC,QAAQ,CAAChxB,MAAD,EAA2C;AACxD,UAAM;AAAC2uB,MAAAA,WAAD;AAAcryB,MAAAA,gBAAd;AAAgC2B,MAAAA,QAAhC;AAA0CP,MAAAA,QAA1C;AAAoDyxB,MAAAA;AAApD,QACJnvB,MADF;AAEA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAACwB,QAAvC;AACA,UAAMtsC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAACwS,MAAAA;AAAD,KAAP,CAAvB;AAEA,UAAM1Z,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAE6W,QAAT;AAAmBxR,MAAAA,QAAQ,EAAE,KAA7B;AAAoCC,MAAAA,UAAU,EAAE;AAAhD,KAFW,EAGX;AAACtF,MAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE;AAA3D,KAHW,EAIX;AACEtF,MAAAA,MAAM,EAAEsT,2BADV;AAEEjO,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAJW,EASX;AAACtF,MAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE;AAAvD,KATW,CAAb;;AAWA,QAAIyiC,eAAJ,EAAqB;AACnBnrC,MAAAA,IAAI,CAAC2E,IAAL3E,CAAU;AACRoD,QAAAA,MAAM,EAAE+nC,eADA;AAER1iC,QAAAA,QAAQ,EAAE,KAFF;AAGRC,QAAAA,UAAU,EAAE;AAHJ,OAAV1I;AAKF;;AACA,WAAO,IAAIgR,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;;;AACmB,SAAVutC,UAAU,CAACjxB,MAAD,EAA6C;AAC5D,UAAM;AAAC2uB,MAAAA,WAAD;AAAcryB,MAAAA;AAAd,QAAkC0D,MAAxC;AACA,UAAM9U,IAAI,GAAGsjC,yBAAyB,CAAC0B,UAAvC;AACA,UAAMxsC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,CAAvB;AAEA,WAAO,IAAI8J,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEunC,WAAT;AAAsBliC,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE;AAAnD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAFI,EAGJ;AAACtF,QAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE;AAAvD,OAHI,CADqB;AAM3BtG,MAAAA,SAAS,EAAE,KAAKA,SANW;AAO3B1C,MAAAA;AAP2B,KAAtB,CAAP;AASF;;AA3VwB;;AAAbysC,YAAY,CAShB/pC,SATI+pC,GASmB,IAAItrC,SAAJ,CAC5B,6CAD4B,CATnBsrC;AAAAA,YAAY,CAoBhBxyB,KApBIwyB,GAoBY,GApBZA;AC3jBb;AACA;AACA;;AACO,MAAMe,QAAN,CAAe;AAIA;AAEpBhuC,EAAAA,WAAW,CACTwvB,UADS,EAETye,eAFS,EAGTC,oBAHS,EAITjmB,UAJS,EAKT;AAAA,SAVFuH,UAUE,GAVQ,KAAA,CAUR;AAVQ,SACVye,eADU,GACK,KAAA,CADL;AACK,SACfC,oBADe,GACK,KAAA,CADL;AACK,SACpBjmB,UADoB,GACV,KAAA,CADU;AASlB,SAAKuH,UAAL,GAAkBA,UAAlB;AACA,SAAKye,eAAL,GAAuBA,eAAvB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKjmB,UAAL,GAAkBA,UAAlB;AACF;;AAhBoB;AAmBtB;AACA;AACA;;AAkDA;AACA;AACA;;;AACO,MAAMkmB,eAAN,CAAsB;AAC3B;AACF;AACA;AACEnuC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;;AAC8B,SAArBga,qBAAqB,CAC1B1T,WAD0B,EAEL;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AAEA,UAAMgX,qBAAqB,GAAGvT,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CAA9B;AACA,UAAMwT,SAAS,GAAGD,qBAAqB,CAAC3Z,MAAtB2Z,CAA6B5T,WAAW,CAAC9F,IAAzC0Z,CAAlB;AAEA,QAAIlS,IAAJ;;AACA,SAAK,MAAM,CAACoS,MAAD,EAAS7R,MAAT,CAAX,IAA+BrI,MAAM,CAAC6J,OAAP7J,CAAekuC,wBAAfluC,CAA/B,EAAyE;AACvE,UAAIqI,MAAM,CAAC1C,KAAP0C,IAAgB4R,SAApB,EAA+B;AAC7BnS,QAAAA,IAAI,GAAGoS,MAAPpS;AACA;AACF;AACF;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIhH,KAAJ,CAAU,mDAAV,CAAN;AACF;;AAEA,WAAOgH,IAAP;AACF;AAEA;AACF;AACA;;;AACgC,SAAvBqmC,uBAAuB,CAC5B/nC,WAD4B,EAEH;AACzB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC8G,MAAAA;AAAD,QAAakR,YAAU,CAC3Bs1B,wBAAwB,CAACE,iBADE,EAE3BhoC,WAAW,CAAC9F,IAFe,CAA7B;AAKA,WAAO;AACL+uB,MAAAA,UAAU,EAAEjpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAELsrB,MAAAA,UAAU,EAAElpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF3B;AAGL0D,MAAAA,QAAQ,EAAE,IAAIomC,QAAJ,CACR,IAAIrsC,SAAJ,CAAciG,QAAQ,CAAC4nB,UAAvB,CADQ,EAER,IAAI7tB,SAAJ,CAAciG,QAAQ,CAACqmC,eAAvB,CAFQ,EAGR,IAAItsC,SAAJ,CAAciG,QAAQ,CAACsmC,oBAAvB,CAHQ,EAIRtmC,QAAQ,CAACqgB,UAJD;AAHL,KAAP;AAUF;AAEA;AACF;AACA;;;AACwB,SAAf2jB,eAAe,CACpBtlC,WADoB,EAEC;AACrB,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC+qC,MAAAA,aAAD;AAAgB0C,MAAAA;AAAhB,QAAyCz1B,YAAU,CACvDs1B,wBAAwB,CAACrC,SAD8B,EAEvDzlC,WAAW,CAAC9F,IAF2C,CAAzD;AAKA,WAAO;AACL+uB,MAAAA,UAAU,EAAEjpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAELkV,MAAAA,gBAAgB,EAAE9S,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAFjC;AAGLsY,MAAAA,mBAAmB,EAAE,IAAI7a,SAAJ,CAAckqC,aAAd,CAHhB;AAIL0C,MAAAA,qBAAqB,EAAE;AACrB1oC,QAAAA,KAAK,EAAE0oC;AADc;AAJlB,KAAP;AAQF;AAEA;AACF;AACA;;;AACgC,SAAvBrC,uBAAuB,CAC5B5lC,WAD4B,EAEC;AAC7B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AACJgH,MAAAA,yBAAyB,EAAE;AACzB0mC,QAAAA,qCADyB;AAEzBC,QAAAA,8BAFyB;AAGzB5C,QAAAA,aAHyB;AAIzB0C,QAAAA;AAJyB;AADvB,QAOFz1B,YAAU,CACZs1B,wBAAwB,CAAC/B,iBADb,EAEZ/lC,WAAW,CAAC9F,IAFA,CAPd;AAYA,WAAO;AACLkuC,MAAAA,oCAAoC,EAAEpoC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MADrD;AAELsqC,MAAAA,qCAAqC,EAAE,IAAI7sC,SAAJ,CACrC6sC,qCADqC,CAFlC;AAKLC,MAAAA,8BAA8B,EAAEA,8BAL3B;AAMLjyB,MAAAA,mBAAmB,EAAE,IAAI7a,SAAJ,CAAckqC,aAAd,CANhB;AAOL0C,MAAAA,qBAAqB,EAAE;AACrB1oC,QAAAA,KAAK,EAAE0oC;AADc,OAPlB;AAULhf,MAAAA,UAAU,EAAEjpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAV3B,KAAP;AAYF;AAEA;AACF;AACA;;;AACuB,SAAd2oC,cAAc,CACnBvmC,WADmB,EAEY;AAC/B,SAAK2T,cAAL,CAAoB3T,WAAW,CAACpD,SAAhC;AACA,SAAKqX,cAAL,CAAoBjU,WAAW,CAACxF,IAAhC,EAAsC,CAAtC;AAEA,UAAM;AAAC0Z,MAAAA;AAAD,QAAa1B,YAAU,CAC3Bs1B,wBAAwB,CAACtB,QADE,EAE3BxmC,WAAW,CAAC9F,IAFe,CAA7B;AAKA,WAAO;AACL+uB,MAAAA,UAAU,EAAEjpB,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAD3B;AAELyqC,MAAAA,0BAA0B,EAAEroC,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC,MAF3C;AAGLsW,MAAAA,QAHK;AAILO,MAAAA,QAAQ,EAAEzU,WAAW,CAACxF,IAAZwF,CAAiB,CAAjBA,EAAoBpC;AAJzB,KAAP;AAMF;AAEA;AACF;AACA;;;AACuB,SAAd+V,cAAc,CAAC/W,SAAD,EAAuB;AAC1C,QAAI,CAACA,SAAS,CAACjB,MAAViB,CAAiB0rC,WAAW,CAAC1rC,SAA7BA,CAAL,EAA8C;AAC5C,YAAM,IAAIlC,KAAJ,CAAU,mDAAV,CAAN;AACF;AACF;AAEA;AACF;AACA;;;AACuB,SAAduZ,cAAc,CAACzZ,IAAD,EAAmB4b,cAAnB,EAA2C;AAC9D,QAAI5b,IAAI,CAACC,MAALD,GAAc4b,cAAlB,EAAkC;AAChC,YAAM,IAAI1b,KAAJ,CAC0BF,8BAAAA,IAAI,CAACC,MAAO,4BAA2B2b,cAAe,EADhF,CAAN;AAGF;AACF;;AA7J2B;AAgK7B;AACA;AACA;;;AAoCA,MAAM0xB,wBAAwB,GAAGluC,MAAM,CAACyc,MAAPzc,CAI9B;AACDouC,EAAAA,iBAAiB,EAAE;AACjBzoC,IAAAA,KAAK,EAAE,CADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAmE,CACzEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADyE,EAEzEyH,QAAe,EAF0D,CAAnEzH;AAFS,GADlB;AAQDolC,EAAAA,SAAS,EAAE;AACTlmC,IAAAA,KAAK,EAAE,CADE;AAET0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA2D,CACjEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADiE,EAEjEyH,SAAgB,CAAC,eAAD,CAFiD,EAGjEzH,YAAY,CAACK,GAAbL,CAAiB,uBAAjBA,CAHiE,CAA3DA;AAFC,GARV;AAgBDmmC,EAAAA,QAAQ,EAAE;AACRjnC,IAAAA,KAAK,EAAE,CADC;AAER0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAA0D,CAChEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADgE,EAEhEA,YAAY,CAACgB,IAAbhB,CAAkB,UAAlBA,CAFgE,CAA1DA;AAFA,GAhBT;AAuBD0lC,EAAAA,iBAAiB,EAAE;AACjBxmC,IAAAA,KAAK,EAAE,EADU;AAEjB0C,IAAAA,MAAM,EAAE5B,YAAY,CAACI,MAAbJ,CAAmE,CACzEA,YAAY,CAACK,GAAbL,CAAiB,aAAjBA,CADyE,EAEzEyH,yBAAgC,EAFyC,CAAnEzH;AAFS;AAvBlB,CAJ8BzG,CAAjC;AAoCA;AACA;AACA;;AAMA;AACA;AACA;;MACa2uC,uBAAuB,GAAG3uC,MAAM,CAACyc,MAAPzc,CAAc;AACnD4uC,EAAAA,KAAK,EAAE;AACLjpC,IAAAA,KAAK,EAAE;AADF,GAD4C;AAInDunC,EAAAA,UAAU,EAAE;AACVvnC,IAAAA,KAAK,EAAE;AADG;AAJuC,CAAd3F,C;AASvC;AACA;AACA;;AACO,MAAM0uC,WAAN,CAAkB;AACvB;AACF;AACA;AACE5uC,EAAAA,WAAW,GAAG,CAAC;AAEf;AACF;AACA;;AAcE;AACF;AACA;;;AAC0B,SAAjB+uC,iBAAiB,CACtBjyB,MADsB,EAEE;AACxB,UAAM;AAACyS,MAAAA,UAAD;AAAaC,MAAAA,UAAb;AAAyB5nB,MAAAA;AAAzB,QAAqCkV,MAA3C;AACA,UAAM9U,IAAI,GAAGomC,wBAAwB,CAACE,iBAAtC;AACA,UAAM9tC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BJ,MAAAA,QAAQ,EAAE;AACR4nB,QAAAA,UAAU,EAAEjwB,QAAQ,CAACqI,QAAQ,CAAC4nB,UAAT5nB,CAAoBrI,QAApBqI,EAAD,CADZ;AAERqmC,QAAAA,eAAe,EAAE1uC,QAAQ,CAACqI,QAAQ,CAACqmC,eAATrmC,CAAyBrI,QAAzBqI,EAAD,CAFjB;AAGRsmC,QAAAA,oBAAoB,EAAE3uC,QAAQ,CAC5BqI,QAAQ,CAACsmC,oBAATtmC,CAA8BrI,QAA9BqI,EAD4B,CAHtB;AAMRqgB,QAAAA,UAAU,EAAErgB,QAAQ,CAACqgB;AANb;AADkB,KAAP,CAAvB;AAUA,UAAM5K,eAAe,GAAG;AACtBvc,MAAAA,IAAI,EAAE,CACJ;AAACoD,QAAAA,MAAM,EAAEqrB,UAAT;AAAqBhmB,QAAAA,QAAQ,EAAE,KAA/B;AAAsCC,QAAAA,UAAU,EAAE;AAAlD,OADI,EAEJ;AAACtF,QAAAA,MAAM,EAAEkT,kBAAT;AAA6B7N,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OAFI,EAGJ;AAACtF,QAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE;AAA3D,OAHI,EAIJ;AAACtF,QAAAA,MAAM,EAAEsrB,UAAT;AAAqBjmB,QAAAA,QAAQ,EAAE,IAA/B;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OAJI,CADgB;AAOtBtG,MAAAA,SAAS,EAAE,KAAKA,SAPM;AAQtB1C,MAAAA;AARsB,KAAxB;AAUA,WAAO,IAAIoR,sBAAJ,CAA2ByL,eAA3B,CAAP;AACF;AAEA;AACF;AACA;;;AACsB,SAAbR,aAAa,CAACC,MAAD,EAA+C;AACjE,UAAMzO,WAAW,GAAG,IAAIyD,WAAJ,EAApB;AACAzD,IAAAA,WAAW,CAACuE,GAAZvE,CACEoO,aAAa,CAACI,aAAdJ,CAA4B;AAC1B9B,MAAAA,UAAU,EAAEmC,MAAM,CAACnC,UADO;AAE1BC,MAAAA,gBAAgB,EAAEkC,MAAM,CAACyS,UAFC;AAG1B/U,MAAAA,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;AAI1BC,MAAAA,KAAK,EAAE,KAAKA,KAJc;AAK1BvX,MAAAA,SAAS,EAAE,KAAKA;AALU,KAA5BuZ,CADFpO;AAUA,WAAOA,WAAW,CAACuE,GAAZvE,CACL,KAAK0gC,iBAAL,CAAuB;AACrBxf,MAAAA,UAAU,EAAEzS,MAAM,CAACyS,UADE;AAErBC,MAAAA,UAAU,EAAE1S,MAAM,CAAClV,QAAPkV,CAAgB0S,UAFP;AAGrB5nB,MAAAA,QAAQ,EAAEkV,MAAM,CAAClV;AAHI,KAAvB,CADKyG,CAAP;AAOF;AAEA;AACF;AACA;;;AACkB,SAATm/B,SAAS,CAAC1wB,MAAD,EAA2C;AACzD,UAAM;AACJyS,MAAAA,UADI;AAEJnW,MAAAA,gBAFI;AAGJoD,MAAAA,mBAHI;AAIJ+xB,MAAAA;AAJI,QAKFzxB,MALJ;AAOA,UAAM9U,IAAI,GAAGomC,wBAAwB,CAACrC,SAAtC;AACA,UAAMvrC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5B6jC,MAAAA,aAAa,EAAEtsC,QAAQ,CAACid,mBAAmB,CAACjd,QAApBid,EAAD,CADK;AAE5B+xB,MAAAA,qBAAqB,EAAEA,qBAAqB,CAAC1oC;AAFjB,KAAP,CAAvB;AAKA,UAAM/E,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEqrB,UAAT;AAAqBhmB,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE;AAA3D,KAFW,EAGX;AAACtF,MAAAA,MAAM,EAAEkV,gBAAT;AAA2B7P,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE;AAAvD,KAHW,CAAb;AAMA,WAAO,IAAIsI,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;AACA;;;AAC0B,SAAjBitC,iBAAiB,CAAC3wB,MAAD,EAAmD;AACzE,UAAM;AACJ4xB,MAAAA,oCADI;AAEJF,MAAAA,qCAFI;AAGJC,MAAAA,8BAHI;AAIJjyB,MAAAA,mBAJI;AAKJ+xB,MAAAA,qBALI;AAMJhf,MAAAA;AANI,QAOFzS,MAPJ;AASA,UAAM9U,IAAI,GAAGomC,wBAAwB,CAAC/B,iBAAtC;AACA,UAAM7rC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAC5BF,MAAAA,yBAAyB,EAAE;AACzB0mC,QAAAA,qCAAqC,EAAEjvC,QAAQ,CAC7CivC,qCAAqC,CAACjvC,QAAtCivC,EAD6C,CADtB;AAIzBC,QAAAA,8BAA8B,EAAEA,8BAJP;AAKzB5C,QAAAA,aAAa,EAAEtsC,QAAQ,CAACid,mBAAmB,CAACjd,QAApBid,EAAD,CALE;AAMzB+xB,QAAAA,qBAAqB,EAAEA,qBAAqB,CAAC1oC;AANpB;AADC,KAAP,CAAvB;AAWA,UAAM/E,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEqrB,UAAT;AAAqBhmB,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAE8S,mBAAT;AAA8BzN,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE;AAA3D,KAFW,EAGX;AACEtF,MAAAA,MAAM,EAAEwqC,oCADV;AAEEnlC,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAHW,CAAb;AAUA,WAAO,IAAIsI,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;;;AACiB,SAARstC,QAAQ,CAAChxB,MAAD,EAAqD;AAClE,UAAM;AAACyS,MAAAA,UAAD;AAAaof,MAAAA,0BAAb;AAAyCn0B,MAAAA,QAAzC;AAAmDO,MAAAA;AAAnD,QAA+D+B,MAArE;AACA,UAAM9U,IAAI,GAAGomC,wBAAwB,CAACtB,QAAtC;AACA,UAAMtsC,IAAI,GAAGmY,UAAU,CAAC3Q,IAAD,EAAO;AAACwS,MAAAA;AAAD,KAAP,CAAvB;AAEA,UAAM1Z,IAAI,GAAG,CACX;AAACoD,MAAAA,MAAM,EAAEqrB,UAAT;AAAqBhmB,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KADW,EAEX;AAACtF,MAAAA,MAAM,EAAE6W,QAAT;AAAmBxR,MAAAA,QAAQ,EAAE,KAA7B;AAAoCC,MAAAA,UAAU,EAAE;AAAhD,KAFW,EAGX;AAACtF,MAAAA,MAAM,EAAEyqC,0BAAT;AAAqCplC,MAAAA,QAAQ,EAAE,IAA/C;AAAqDC,MAAAA,UAAU,EAAE;AAAjE,KAHW,CAAb;AAMA,WAAO,IAAIsI,WAAJ,GAAkBc,GAAlB,CAAsB;AAC3B9R,MAAAA,IAD2B;AAE3BoC,MAAAA,SAAS,EAAE,KAAKA,SAFW;AAG3B1C,MAAAA;AAH2B,KAAtB,CAAP;AAKF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqB,SAAZwuC,YAAY,CACjBlyB,MADiB,EAEjBmyB,yBAFiB,EAGjBC,iBAHiB,EAIJ;AACb,QAAIpyB,MAAM,CAACtC,QAAPsC,GAAkBmyB,yBAAyB,GAAGC,iBAAlD,EAAqE;AACnE,YAAM,IAAIluC,KAAJ,CACJ,0DADI,CAAN;AAGF;;AACA,WAAO4tC,WAAW,CAACd,QAAZc,CAAqB9xB,MAArB8xB,CAAP;AACF;;AA9LuB;;AAAZA,WAAW,CASf1rC,SATI0rC,GASmB,IAAIjtC,SAAJ,CAC5B,6CAD4B,CATnBitC;AAAAA,WAAW,CAoBfn0B,KApBIm0B,GAoBY,IApBZA;MCjVAO,kBAAkB,GAAG,IAAIxtC,SAAJ,CAChC,6CADgC,C;AAIlC;AACA;AACA;;AAoBA,MAAMytC,UAAU,GAAG9oB,IAAI,CAAC;AACtBpE,EAAAA,IAAI,EAAEoD,MAAM,EADU;AAEtB+pB,EAAAA,OAAO,EAAE3oB,QAAQ,CAACpB,MAAM,EAAP,CAFK;AAGtBgqB,EAAAA,OAAO,EAAE5oB,QAAQ,CAACpB,MAAM,EAAP,CAHK;AAItBiqB,EAAAA,eAAe,EAAE7oB,QAAQ,CAACpB,MAAM,EAAP;AAJH,CAAD,CAAvB;AAOA;AACA;AACA;;AACO,MAAMkqB,aAAN,CAAoB;AACzB;AACF;AACA;;AAEE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACExvC,EAAAA,WAAW,CAACkB,GAAD,EAAiBopB,IAAjB,EAA6B;AAAA,SAZxCppB,GAYwC,GAZrC,KAAA,CAYqC;AAZrC,SAIHopB,IAJG,GAIC,KAAA,CAJD;AAaD,SAAKppB,GAAL,GAAWA,GAAX;AACA,SAAKopB,IAAL,GAAYA,IAAZ;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACuB,SAAdmlB,cAAc,CACnB7vC,MADmB,EAEG;AACtB,QAAI2O,SAAS,GAAG,CAAC,GAAG3O,MAAJ,CAAhB;AACA,UAAM8vC,cAAc,GAAGjiC,YAAqB,CAACc,SAAD,CAA5C;AACA,QAAImhC,cAAc,KAAK,CAAvB,EAA0B,OAAO,IAAP;AAE1B,UAAMC,UAA4B,GAAG,EAArC;;AACA,SAAK,IAAIlhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAM/P,SAAS,GAAG,IAAIiD,SAAJ,CAAc4M,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmBlN,iBAAnBkN,CAAd,CAAlB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgBlN,iBAAhBkN,CAAZA;AACA,YAAMhF,QAAQ,GAAGgF,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,EAAmB,CAAnBA,EAAsB,CAAtBA,MAA6B,CAA9C;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAAClP,KAAVkP,CAAgB,CAAhBA,CAAZA;AACAohC,MAAAA,UAAU,CAAClqC,IAAXkqC,CAAgB;AAACjxC,QAAAA,SAAD;AAAY6K,QAAAA;AAAZ,OAAhBomC;AACF;;AAEA,QAAIA,UAAU,CAAC,CAAD,CAAVA,CAAcjxC,SAAdixC,CAAwB1tC,MAAxB0tC,CAA+BR,kBAA/BQ,CAAJ,EAAwD;AACtD,UAAIA,UAAU,CAAC,CAAD,CAAVA,CAAcpmC,QAAlB,EAA4B;AAC1B,cAAMqmC,OAAY,GAAGxhC,UAAiB,GAAG7N,MAApB6N,CAA2B3O,MAAM,CAACE,IAAPF,CAAY8O,SAAZ9O,CAA3B2O,CAArB;AACA,cAAMkc,IAAI,GAAGvX,IAAI,CAAC88B,KAAL98B,CAAW68B,OAAX78B,CAAb;AACA+8B,QAAAA,QAAU,CAACxlB,IAAD,EAAO8kB,UAAP,CAAVU;AACA,eAAO,IAAIN,aAAJ,CAAkBG,UAAU,CAAC,CAAD,CAAVA,CAAcjxC,SAAhC,EAA2C4rB,IAA3C,CAAP;AACF;AACF;;AAEA,WAAO,IAAP;AACF;;AAtDyB;;MCzCdylB,eAAe,GAAG,IAAIpuC,SAAJ,CAC7B,6CAD6B,C;AAgE/B;AACA;AACA;AACA;AACA;;AACA,MAAMquC,iBAAiB,GAAGrpC,YAAY,CAACI,MAAbJ,CAAqC,CAC7DyH,SAAgB,CAAC,YAAD,CAD6C,EAE7DA,SAAgB,CAAC,sBAAD,CAF6C,EAG7DzH,YAAY,CAACkB,EAAblB,CAAgB,YAAhBA,CAH6D,EAI7DA,YAAY,CAACqS,IAAbrS,EAJ6D,EAIxC;AACrBA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAACqS,IAAbrS,CAAkB,MAAlBA,CADkB,EAElBA,YAAY,CAACK,GAAbL,CAAiB,mBAAjBA,CAFkB,CAApBA,CADFA,EAKEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CALFA,EAME,OANFA,CAL6D,EAa7DA,YAAY,CAACkB,EAAblB,CAAgB,eAAhBA,CAb6D,EAc7DA,YAAY,CAACqS,IAAbrS,CAAkB,UAAlBA,CAd6D,EAe7DA,YAAY,CAACqS,IAAbrS,EAf6D,EAexC;AACrBA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAACqS,IAAbrS,CAAkB,OAAlBA,CADkB,EAElByH,SAAgB,CAAC,iBAAD,CAFE,CAApBzH,CADFA,EAKEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CALFA,EAME,kBANFA,CAhB6D,EAwB7DA,YAAY,CAACI,MAAbJ,CACE,CACEA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClByH,SAAgB,CAAC,kBAAD,CADE,EAElBzH,YAAY,CAACqS,IAAbrS,CAAkB,6BAAlBA,CAFkB,EAGlBA,YAAY,CAACqS,IAAbrS,CAAkB,aAAlBA,CAHkB,CAApBA,CADFA,EAME,EANFA,EAOE,KAPFA,CADF,EAUEA,YAAY,CAACqS,IAAbrS,CAAkB,KAAlBA,CAVF,EAWEA,YAAY,CAACkB,EAAblB,CAAgB,SAAhBA,CAXF,CADFA,EAcE,aAdFA,CAxB6D,EAwC7DA,YAAY,CAACqS,IAAbrS,EAxC6D,EAwCxC;AACrBA,YAAY,CAACuH,GAAbvH,CACEA,YAAY,CAACI,MAAbJ,CAAoB,CAClBA,YAAY,CAACqS,IAAbrS,CAAkB,OAAlBA,CADkB,EAElBA,YAAY,CAACqS,IAAbrS,CAAkB,SAAlBA,CAFkB,EAGlBA,YAAY,CAACqS,IAAbrS,CAAkB,aAAlBA,CAHkB,CAApBA,CADFA,EAMEA,YAAY,CAACM,MAAbN,CAAoBA,YAAY,CAACK,GAAbL,EAApBA,EAAwC,CAAC,CAAzCA,CANFA,EAOE,cAPFA,CAzC6D,EAkD7DA,YAAY,CAACI,MAAbJ,CACE,CAACA,YAAY,CAACqS,IAAbrS,CAAkB,MAAlBA,CAAD,EAA4BA,YAAY,CAACqS,IAAbrS,CAAkB,WAAlBA,CAA5B,CADFA,EAEE,eAFFA,CAlD6D,CAArCA,CAA1B;AAoEA;AACA;AACA;;AACO,MAAMspC,WAAN,CAAkB;AAWvB;AACF;AACA;AACEjwC,EAAAA,WAAW,CAACiM,IAAD,EAAwB;AAAA,SAbnCujB,UAamC,GAbzB,KAAA,CAayB;AAbzB,SACV0e,oBADU,GACU,KAAA,CADV;AACU,SACpBjmB,UADoB,GACV,KAAA,CADU;AACV,SACV4H,QADU,GACF,KAAA,CADE;AACF,SACRqgB,KADQ,GACH,KAAA,CADG;AACH,SACLC,gBADK,GACW,KAAA,CADX;AACW,SAChBC,WADgB,GACL,KAAA,CADK;AACL,SACXzgB,YADW,GACC,KAAA,CADD;AACC,SACZ0gB,aADY,GACC,KAAA,CADD;AAOV,SAAK7gB,UAAL,GAAkBvjB,IAAI,CAACujB,UAAvB;AACA,SAAK0e,oBAAL,GAA4BjiC,IAAI,CAACiiC,oBAAjC;AACA,SAAKjmB,UAAL,GAAkBhc,IAAI,CAACgc,UAAvB;AACA,SAAK4H,QAAL,GAAgB5jB,IAAI,CAAC4jB,QAArB;AACA,SAAKqgB,KAAL,GAAajkC,IAAI,CAACikC,KAAlB;AACA,SAAKC,gBAAL,GAAwBlkC,IAAI,CAACkkC,gBAA7B;AACA,SAAKC,WAAL,GAAmBnkC,IAAI,CAACmkC,WAAxB;AACA,SAAKzgB,YAAL,GAAoB1jB,IAAI,CAAC0jB,YAAzB;AACA,SAAK0gB,aAAL,GAAqBpkC,IAAI,CAACokC,aAA1B;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;;AACwB,SAAf/2B,eAAe,CACpB1Z,MADoB,EAEP;AACb,UAAM0wC,aAAa,GAAG,CAAtB;AACA,UAAMC,EAAE,GAAGP,iBAAiB,CAACzvC,MAAlByvC,CAAyBzwC,QAAQ,CAACK,MAAD,CAAjCowC,EAA2CM,aAA3CN,CAAX;AAEA,QAAIngB,QAAuB,GAAG0gB,EAAE,CAAC1gB,QAAjC;;AACA,QAAI,CAAC0gB,EAAE,CAACC,aAAR,EAAuB;AACrB3gB,MAAAA,QAAQ,GAAG,IAAXA;AACF;;AAEA,WAAO,IAAIogB,WAAJ,CAAgB;AACrBzgB,MAAAA,UAAU,EAAE,IAAI7tB,SAAJ,CAAc4uC,EAAE,CAAC/gB,UAAjB,CADS;AAErB0e,MAAAA,oBAAoB,EAAE,IAAIvsC,SAAJ,CAAc4uC,EAAE,CAACrC,oBAAjB,CAFD;AAGrBjmB,MAAAA,UAAU,EAAEsoB,EAAE,CAACtoB,UAHM;AAIrBioB,MAAAA,KAAK,EAAEK,EAAE,CAACL,KAJW;AAKrBrgB,MAAAA,QALqB;AAMrBsgB,MAAAA,gBAAgB,EAAEI,EAAE,CAACJ,gBAAHI,CAAoBtvC,GAApBsvC,CAAwBE,oBAAxBF,CANG;AAOrBH,MAAAA,WAAW,EAAEM,cAAc,CAACH,EAAE,CAACH,WAAJ,CAPN;AAQrBzgB,MAAAA,YAAY,EAAE4gB,EAAE,CAAC5gB,YARI;AASrB0gB,MAAAA,aAAa,EAAEE,EAAE,CAACF;AATG,KAAhB,CAAP;AAWF;;AAtDuB;;AAyDzB,SAASI,oBAAT,CAA8B;AAC5BxC,EAAAA,eAD4B;AAE5B/tB,EAAAA;AAF4B,CAA9B,EAGwC;AACtC,SAAO;AACLA,IAAAA,KADK;AAEL+tB,IAAAA,eAAe,EAAE,IAAItsC,SAAJ,CAAcssC,eAAd;AAFZ,GAAP;AAIF;;AAEA,SAAS0C,gBAAT,CAA0B;AACxBv3B,EAAAA,gBADwB;AAExBw3B,EAAAA,2BAFwB;AAGxBC,EAAAA;AAHwB,CAA1B,EAI8B;AAC5B,SAAO;AACLz3B,IAAAA,gBAAgB,EAAE,IAAIzX,SAAJ,CAAcyX,gBAAd,CADb;AAELw3B,IAAAA,2BAFK;AAGLC,IAAAA;AAHK,GAAP;AAKF;;AAEA,SAASH,cAAT,CAAwB;AAACpuC,EAAAA,GAAD;AAAMwuC,EAAAA,GAAN;AAAWC,EAAAA;AAAX,CAAxB,EAAwE;AACtE,MAAIA,OAAJ,EAAa;AACX,WAAO,EAAP;AACF;;AAEA,SAAO,CACL,GAAGzuC,GAAG,CAACjD,KAAJiD,CAAUwuC,GAAG,GAAG,CAAhBxuC,EAAmBrB,GAAnBqB,CAAuBquC,gBAAvBruC,CADE,EAEL,GAAGA,GAAG,CAACjD,KAAJiD,CAAU,CAAVA,EAAawuC,GAAbxuC,EAAkBrB,GAAlBqB,CAAsBquC,gBAAtBruC,CAFE,CAAP;AAIF;;AC3OA,MAAMkiB,QAAQ,GAAG;AACfwsB,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,8BADJ;AAEJC,IAAAA,OAAO,EAAE,+BAFL;AAGJ,oBAAgB;AAHZ,GADS;AAMfC,EAAAA,KAAK,EAAE;AACLF,IAAAA,MAAM,EAAE,+BADH;AAELC,IAAAA,OAAO,EAAE,gCAFJ;AAGL,oBAAgB;AAHX;AANQ,CAAjB;AAeA;AACA;AACA;;AACO,SAASE,aAAT,CAAuBC,OAAvB,EAA0CC,GAA1C,EAAiE;AACtE,QAAMpwC,GAAG,GAAGowC,GAAG,KAAK,KAARA,GAAgB,MAAhBA,GAAyB,OAArC;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO7sB,QAAQ,CAACtjB,GAAD,CAARsjB,CAAc,QAAdA,CAAP;AACF;;AAEA,QAAM9B,GAAG,GAAG8B,QAAQ,CAACtjB,GAAD,CAARsjB,CAAc6sB,OAAd7sB,CAAZ;;AACA,MAAI,CAAC9B,GAAL,EAAU;AACR,UAAM,IAAI1hB,KAAJ,CAAW,WAAUE,GAAgBmwC,aAAAA,OAAQ,EAA7C,CAAN;AACF;;AACA,SAAO3uB,GAAP;AACF;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AAOA;;;AACO,eAAe6uB,4BAAf,CACL98B,UADK,EAEL6sB,cAFK,EAGLkQ,oCAHK,EAOLC,mBAPK,EAQ0B;AAC/B,MAAIC,oBAAJ;AACA,MAAIh6B,OAAJ;;AACA,MACE85B,oCAAoC,IACpCtxC,MAAM,CAAC8E,SAAP9E,CAAiBoS,cAAjBpS,CAAgCqS,IAAhCrS,CACEsxC,oCADFtxC,EAEE,sBAFFA,CAFF,EAME;AACAwxC,IAAAA,oBAAoB,GAClBF,oCADFE;AAEAh6B,IAAAA,OAAO,GAAG+5B,mBAAV/5B;AACD,GAVD,MAUO,IACL85B,oCAAoC,IACpCtxC,MAAM,CAAC8E,SAAP9E,CAAiBoS,cAAjBpS,CAAgCqS,IAAhCrS,CACEsxC,oCADFtxC,EAEE,YAFFA,CAFK,EAML;AACAwxC,IAAAA,oBAAoB,GAClBF,oCADFE;AAEAh6B,IAAAA,OAAO,GAAG+5B,mBAAV/5B;AACD,GAVM,MAUA;AACLA,IAAAA,OAAO,GAAG85B,oCAAV95B;AAGF;;AACA,QAAMC,WAAW,GAAGD,OAAO,IAAI;AAC7BE,IAAAA,aAAa,EAAEF,OAAO,CAACE,aADM;AAE7BC,IAAAA,mBAAmB,EAAEH,OAAO,CAACG,mBAARH,IAA+BA,OAAO,CAACI,UAF/B;AAG7BtF,IAAAA,cAAc,EAAEkF,OAAO,CAAClF;AAHK,GAA/B;AAMA,QAAM1N,SAAS,GAAG,MAAM2P,UAAU,CAAC4sB,kBAAX5sB,CACtB6sB,cADsB7sB,EAEtBkD,WAFsBlD,CAAxB;AAKA,QAAMqD,UAAU,GAAGJ,OAAO,IAAIA,OAAO,CAACI,UAAtC;AACA,QAAM+hB,mBAAmB,GAAG6X,oBAAoB,GAC5Cj9B,UAAU,CAACyD,kBAAXzD,CAA8Bi9B,oBAA9Bj9B,EAAoDqD,UAApDrD,CAD4C,GAE5CA,UAAU,CAACyD,kBAAXzD,CAA8B3P,SAA9B2P,EAAyCqD,UAAzCrD,CAFJ;AAGA,QAAMwD,MAAM,GAAG,CAAC,MAAM4hB,mBAAP,EAA4Bt4B,KAA3C;;AAEA,MAAI0W,MAAM,CAAClU,GAAX,EAAgB;AACd,UAAM,IAAI/C,KAAJ,CACH,mBAAkB8D,SAAU,YAAWiO,IAAI,CAACC,SAALD,CAAekF,MAAflF,CAAuB,GAD3D,CAAN;AAGF;;AAEA,SAAOjO,SAAP;AACF;ACjFA;AACA;AACA;;;AACO,MAAM6sC,gBAAgB,GAAG,UAAzB","sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}