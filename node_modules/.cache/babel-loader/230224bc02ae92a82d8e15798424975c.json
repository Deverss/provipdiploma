{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayType = void 0;\n\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n\nconst byteArray_1 = require(\"../util/byteArray\");\n\nconst merkleize_1 = require(\"../util/merkleize\");\n\nconst composite_1 = require(\"./composite\");\n\nconst bitArray_1 = require(\"../view/bitArray\");\n\nconst bitArray_2 = require(\"../viewDU/bitArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/**\n * BitArray: ordered array collection of boolean values\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\n\n\nclass BitArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = true;\n  }\n\n  getView(tree) {\n    return new bitArray_1.BitArrayTreeView(this, tree);\n  }\n\n  getViewDU(node) {\n    return new bitArray_2.BitArrayTreeViewDU(this, node);\n  }\n\n  commitView(view) {\n    return view.node;\n  }\n\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n\n  cacheOfViewDU(view) {\n    return view.cache;\n  } // Merkleization\n\n\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value.uint8Array);\n  } // Proofs\n\n\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n\n  getPropertyType() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n\n  getIndexProperty() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    } // include the length chunk\n\n\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n\n    return gindices;\n  } // JSON\n\n\n  fromJson(json) {\n    const uint8Array = byteArray_1.fromHexString(json);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength); // value_deserializeFromBytes MUST validate length (limit, or length)\n\n    return this.value_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n\n  toJson(value) {\n    return byteArray_1.toHexString(this.serialize(value));\n  }\n\n  clone(value) {\n    return value.clone();\n  }\n\n  equals(a, b) {\n    return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);\n  }\n\n}\n\nexports.BitArrayType = BitArrayType;","map":{"version":3,"sources":["../../src/type/bitArray.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAEA;;AAEA;;;;;AAKG;;;AACH,MAAsB,YAAtB,SAA2C,WAAA,CAAA,aAA3C,CAAwG;AAAxG,EAAA,WAAA,GAAA;;AACW,SAAA,aAAA,GAAgB,IAAhB;AAyFV;;AAvFC,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,WAAO,IAAI,UAAA,CAAA,gBAAJ,CAAqB,IAArB,EAA2B,IAA3B,CAAP;AACD;;AAED,EAAA,SAAS,CAAC,IAAD,EAAW;AAClB,WAAO,IAAI,UAAA,CAAA,kBAAJ,CAAuB,IAAvB,EAA6B,IAA7B,CAAP;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAAuB;AAC/B,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,EAAA,YAAY,CAAC,IAAD,EAAyB;AACnC,IAAA,IAAI,CAAC,MAAL;AACA,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,EAAA,aAAa,CAAC,IAAD,EAAyB;AACpC,WAAO,IAAI,CAAC,KAAZ;AACD,GAtBqG,CAwBtG;;;AAEU,EAAA,QAAQ,CAAC,KAAD,EAAgB;AAChC,WAAO,WAAA,CAAA,mBAAA,CAAoB,KAAK,CAAC,UAA1B,CAAP;AACD,GA5BqG,CA8BtG;;;AAEA,EAAA,iBAAiB,GAAA;AACf;AACA,WAAO,IAAP;AACD;;AAED,EAAA,eAAe,GAAA;AACb;AACA,UAAM,KAAK,CAAC,0CAAD,CAAX;AACD;;AAED,EAAA,gBAAgB,GAAA;AACd;AACA,UAAM,KAAK,CAAC,0CAAD,CAAX;AACD;;AAED,EAAA,kBAAkB,CAAC,IAAD,EAAW;AAC3B,WAAO;AAAC,MAAA,IAAD;AAAO,MAAA,IAAI,EAAE;AAAb,KAAP;AACD;;AAED,EAAA,oBAAoB,CAAC,UAAD,EAAqB,QAArB,EAAoC;AACtD,UAAM,OAAO,GAAG,KAAK,eAAL,CAAqB,QAArB,CAAhB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,OAAO,GAAG,EAApB,CAAnB;AACA,UAAM,UAAU,GAAG,wBAAA,CAAA,cAAA,CAAe,CAAC,UAAD,EAAa,wBAAA,CAAA,QAAA,CAAS,KAAK,KAAd,EAAqB,MAAM,CAAC,CAAD,CAA3B,CAAb,CAAf,CAAnB;AACA,UAAM,QAAQ,GAAG,IAAI,KAAJ,CAAkB,UAAlB,CAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,MAAM,GAAG,UAAzB,EAAqC,CAAC,GAAG,UAAzC,EAAqD,CAAC,IAAI,MAAM,EAAhE,EAAoE;AAClE,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAd;AACD,KAPqD,CAStD;;;AACA,QAAI,KAAK,MAAT,EAAiB;AACf,MAAA,QAAQ,CAAC,IAAT,CAAc,wBAAA,CAAA,cAAA,CAAe,CAAC,UAAD,EAAa,WAAA,CAAA,aAAb,CAAf,CAAd;AACD;;AAED,WAAO,QAAP;AACD,GAlEqG,CAsEtG;;;AAEA,EAAA,QAAQ,CAAC,IAAD,EAAc;AACpB,UAAM,UAAU,GAAG,WAAA,CAAA,aAAA,CAAc,IAAd,CAAnB;AACA,UAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,UAAU,CAAC,MAAxB,EAAgC,UAAU,CAAC,UAA3C,EAAuD,UAAU,CAAC,UAAlE,CAAjB,CAFoB,CAGpB;;AACA,WAAO,KAAK,0BAAL,CAAgC;AAAC,MAAA,UAAD;AAAa,MAAA;AAAb,KAAhC,EAAwD,CAAxD,EAA2D,UAAU,CAAC,MAAtE,CAAP;AACD;;AAED,EAAA,MAAM,CAAC,KAAD,EAAgB;AACpB,WAAO,WAAA,CAAA,WAAA,CAAY,KAAK,SAAL,CAAe,KAAf,CAAZ,CAAP;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAgB;AACnB,WAAO,KAAK,CAAC,KAAN,EAAP;AACD;;AAED,EAAA,MAAM,CAAC,CAAD,EAAc,CAAd,EAAyB;AAC7B,WAAO,CAAC,CAAC,MAAF,KAAa,CAAC,CAAC,MAAf,IAAyB,WAAA,CAAA,eAAA,CAAgB,CAAC,CAAC,UAAlB,EAA8B,CAAC,CAAC,UAAhC,CAAhC;AACD;;AAzFqG;;AAAxG,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\nconst bitArray_1 = require(\"../view/bitArray\");\nconst bitArray_2 = require(\"../viewDU/bitArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * BitArray: ordered array collection of boolean values\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitArrayType extends composite_1.CompositeType {\n    constructor() {\n        super(...arguments);\n        this.isViewMutable = true;\n    }\n    getView(tree) {\n        return new bitArray_1.BitArrayTreeView(this, tree);\n    }\n    getViewDU(node) {\n        return new bitArray_2.BitArrayTreeViewDU(this, node);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Merkleization\n    getRoots(value) {\n        return merkleize_1.splitIntoRootChunks(value.uint8Array);\n    }\n    // Proofs\n    getPropertyGindex() {\n        // Stop navigating below this type. Must only request complete data\n        return null;\n    }\n    getPropertyType() {\n        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n        throw Error(\"Must only request BitArray complete data\");\n    }\n    getIndexProperty() {\n        /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n        throw Error(\"Must only request BitArray complete data\");\n    }\n    tree_fromProofNode(node) {\n        return { node, done: true };\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        const byteLen = this.tree_getByteLen(rootNode);\n        const chunkCount = Math.ceil(byteLen / 32);\n        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n        const gindices = new Array(chunkCount);\n        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n            gindices[i] = gindex;\n        }\n        // include the length chunk\n        if (this.isList) {\n            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        const uint8Array = byteArray_1.fromHexString(json);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        // value_deserializeFromBytes MUST validate length (limit, or length)\n        return this.value_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    toJson(value) {\n        return byteArray_1.toHexString(this.serialize(value));\n    }\n    clone(value) {\n        return value.clone();\n    }\n    equals(a, b) {\n        return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);\n    }\n}\nexports.BitArrayType = BitArrayType;\n//# sourceMappingURL=bitArray.js.map"]},"metadata":{},"sourceType":"script"}