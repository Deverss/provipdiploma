{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoneType = void 0;\n\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n\nconst basic_1 = require(\"./basic\");\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\nclass NoneType extends basic_1.BasicType {\n  constructor() {\n    super(...arguments);\n    this.typeName = \"none\";\n    this.byteLength = 0;\n    this.itemsPerChunk = 32;\n    this.fixedSize = 0;\n    this.minSize = 0;\n    this.maxSize = 0;\n  }\n\n  defaultValue() {\n    return null;\n  } // bytes serdes\n\n\n  value_serializeToBytes(output, offset, value) {\n    return offset;\n  }\n\n  value_deserializeFromBytes(data, start) {\n    return null;\n  }\n\n  tree_serializeToBytes(output, offset, node) {\n    return offset;\n  }\n\n  tree_deserializeFromBytes(data, start, end) {\n    return persistent_merkle_tree_1.zeroNode(0);\n  } // Fast tree opts\n\n\n  tree_getFromNode(leafNode) {\n    return null;\n  }\n\n  tree_setToNode(leafNode, value) {\n    return;\n  }\n\n  tree_getFromPackedNode(leafNode, index) {\n    return null;\n  }\n\n  tree_setToPackedNode(leafNode, index, value) {\n    return;\n  } // JSON\n\n\n  fromJson(json) {\n    if (json !== null) {\n      throw Error(\"JSON invalid type none must be null\");\n    }\n\n    return null;\n  }\n\n  toJson(value) {\n    return null;\n  }\n\n}\n\nexports.NoneType = NoneType;","map":{"version":3,"sources":["../../src/type/none.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AACA;;;AAEA,MAAa,QAAb,SAA8B,OAAA,CAAA,SAA9B,CAA6C;AAA7C,EAAA,WAAA,GAAA;;AACW,SAAA,QAAA,GAAW,MAAX;AACA,SAAA,UAAA,GAAa,CAAb;AACA,SAAA,aAAA,GAAgB,EAAhB;AACA,SAAA,SAAA,GAAY,CAAZ;AACA,SAAA,OAAA,GAAU,CAAV;AACA,SAAA,OAAA,GAAU,CAAV;AAsDV;;AApDC,EAAA,YAAY,GAAA;AACV,WAAO,IAAP;AACD,GAV0C,CAY3C;;;AAEA,EAAA,sBAAsB,CAAC,MAAD,EAAoB,MAApB,EAAoC,KAApC,EAA+C;AACnE,WAAO,MAAP;AACD;;AAED,EAAA,0BAA0B,CAAC,IAAD,EAAkB,KAAlB,EAA+B;AACvD,WAAO,IAAP;AACD;;AAED,EAAA,qBAAqB,CAAC,MAAD,EAAoB,MAApB,EAAoC,IAApC,EAA8C;AACjE,WAAO,MAAP;AACD;;AAED,EAAA,yBAAyB,CAAC,IAAD,EAAkB,KAAlB,EAAiC,GAAjC,EAA4C;AACnE,WAAO,wBAAA,CAAA,QAAA,CAAS,CAAT,CAAP;AACD,GA5B0C,CA8B3C;;;AAEA,EAAA,gBAAgB,CAAC,QAAD,EAAmB;AACjC,WAAO,IAAP;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAqB,KAArB,EAAgC;AAC5C;AACD;;AAED,EAAA,sBAAsB,CAAC,QAAD,EAAqB,KAArB,EAAkC;AACtD,WAAO,IAAP;AACD;;AAED,EAAA,oBAAoB,CAAC,QAAD,EAAqB,KAArB,EAAoC,KAApC,EAA+C;AACjE;AACD,GA9C0C,CAgD3C;;;AAEA,EAAA,QAAQ,CAAC,IAAD,EAAc;AACpB,QAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM,KAAK,CAAC,qCAAD,CAAX;AACD;;AACD,WAAO,IAAP;AACD;;AAED,EAAA,MAAM,CAAC,KAAD,EAAY;AAChB,WAAO,IAAP;AACD;;AA3D0C;;AAA7C,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoneType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"./basic\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nclass NoneType extends basic_1.BasicType {\n    constructor() {\n        super(...arguments);\n        this.typeName = \"none\";\n        this.byteLength = 0;\n        this.itemsPerChunk = 32;\n        this.fixedSize = 0;\n        this.minSize = 0;\n        this.maxSize = 0;\n    }\n    defaultValue() {\n        return null;\n    }\n    // bytes serdes\n    value_serializeToBytes(output, offset, value) {\n        return offset;\n    }\n    value_deserializeFromBytes(data, start) {\n        return null;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return offset;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return persistent_merkle_tree_1.zeroNode(0);\n    }\n    // Fast tree opts\n    tree_getFromNode(leafNode) {\n        return null;\n    }\n    tree_setToNode(leafNode, value) {\n        return;\n    }\n    tree_getFromPackedNode(leafNode, index) {\n        return null;\n    }\n    tree_setToPackedNode(leafNode, index, value) {\n        return;\n    }\n    // JSON\n    fromJson(json) {\n        if (json !== null) {\n            throw Error(\"JSON invalid type none must be null\");\n        }\n        return null;\n    }\n    toJson(value) {\n        return null;\n    }\n}\nexports.NoneType = NoneType;\n//# sourceMappingURL=none.js.map"]},"metadata":{},"sourceType":"script"}