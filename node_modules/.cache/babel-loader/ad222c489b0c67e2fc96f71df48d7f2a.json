{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst _u64_js_1 = require(\"./_u64.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Various per round constants calculations\n\n\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _7n = BigInt(7);\n\nconst _256n = BigInt(256);\n\nconst _0x71n = BigInt(0x71);\n\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x)); // Rotational\n\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64); // Iota\n\n  let t = _0n;\n\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n\n  _SHA3_IOTA.push(t);\n}\n\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true); // Left rotation (without 0, 32, 64)\n\n\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\n\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s); // Same as keccakf1600, but allows to skip some rounds\n\n\nfunction keccakP(s, rounds = 24) {\n  const B = new Uint32Array(5 * 2); // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    } // Rho (ρ) and Pi (π)\n\n\n    let curH = s[2];\n    let curL = s[3];\n\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    } // Chi (χ)\n\n\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    } // Iota (ι)\n\n\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n\n  B.fill(0);\n}\n\nexports.keccakP = keccakP;\n\nclass Keccak extends utils_js_1.Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false; // Can be passed from user as dkLen\n\n    _assert_js_1.default.number(outputLen); // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n\n\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = (0, utils_js_1.u32)(this.state);\n  }\n\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n\n  update(data) {\n    _assert_js_1.default.exists(this);\n\n    const {\n      blockLen,\n      state\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n\n      if (this.pos === blockLen) this.keccak();\n    }\n\n    return this;\n  }\n\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this; // Do the padding\n\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n\n  writeInto(out) {\n    _assert_js_1.default.exists(this, false);\n\n    _assert_js_1.default.bytes(out);\n\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n\n    return out;\n  }\n\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n\n  xof(bytes) {\n    _assert_js_1.default.number(bytes);\n\n    return this.xofInto(new Uint8Array(bytes));\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.output(out, this);\n\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds; // Suffix can change in cSHAKE\n\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n\n}\n\nexports.Keccak = Keccak;\n\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\n\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\n\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\n\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\n\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"sources":["src/sha3.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA,C,CAUA;;;AACA,MAAM,CAAC,OAAD,EAAU,SAAV,EAAqB,UAArB,IAAmE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAzE;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,GAAD,CAApB;;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,IAAD,CAArB;;AACA,KAAK,IAAI,KAAK,GAAG,CAAZ,EAAe,CAAC,GAAG,GAAnB,EAAwB,CAAC,GAAG,CAA5B,EAA+B,CAAC,GAAG,CAAxC,EAA2C,KAAK,GAAG,EAAnD,EAAuD,KAAK,EAA5D,EAAgE;AAC9D;AACA,GAAC,CAAD,EAAI,CAAJ,IAAS,CAAC,CAAD,EAAI,CAAC,IAAI,CAAJ,GAAQ,IAAI,CAAb,IAAkB,CAAtB,CAAT;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,KAAK,IAAI,CAAJ,GAAQ,CAAb,CAAb,EAH8D,CAI9D;;AACA,EAAA,SAAS,CAAC,IAAV,CAAiB,CAAC,KAAK,GAAG,CAAT,KAAe,KAAK,GAAG,CAAvB,CAAD,GAA8B,CAA/B,GAAoC,EAAnD,EAL8D,CAM9D;;AACA,MAAI,CAAC,GAAG,GAAR;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,IAAA,CAAC,GAAG,CAAE,CAAC,IAAI,GAAN,GAAc,CAAC,CAAC,IAAI,GAAN,IAAa,MAA5B,IAAuC,KAA3C;AACA,QAAI,CAAC,GAAG,GAAR,EAAa,CAAC,IAAI,GAAG,IAAK,CAAC,GAAG,IAAI,MAAM,CAAC,CAAD,CAAd,IAAqB,GAAlC;AACd;;AACD,EAAA,UAAU,CAAC,IAAX,CAAgB,CAAhB;AACD;;AACD,MAAM,CAAC,WAAD,EAAc,WAAd,IAA6B,SAAA,CAAA,OAAA,CAAI,KAAJ,CAAU,UAAV,EAAsB,IAAtB,CAAnC,C,CAEA;;;AACA,MAAM,KAAK,GAAG,CAAC,CAAD,EAAY,CAAZ,EAAuB,CAAvB,KACZ,CAAC,GAAG,EAAJ,GAAS,SAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAT,GAA+B,SAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CADjC;;AAEA,MAAM,KAAK,GAAG,CAAC,CAAD,EAAY,CAAZ,EAAuB,CAAvB,KACZ,CAAC,GAAG,EAAJ,GAAS,SAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAT,GAA+B,SAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CADjC,C,CAGA;;;AACA,SAAgB,OAAhB,CAAwB,CAAxB,EAAwC,MAAA,GAAiB,EAAzD,EAA2D;AACzD,QAAM,CAAC,GAAG,IAAI,WAAJ,CAAgB,IAAI,CAApB,CAAV,CADyD,CAEzD;;AACA,OAAK,IAAI,KAAK,GAAG,KAAK,MAAtB,EAA8B,KAAK,GAAG,EAAtC,EAA0C,KAAK,EAA/C,EAAmD;AACjD;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAC,GAAG,EAAL,CAAR,GAAmB,CAAC,CAAC,CAAC,GAAG,EAAL,CAApB,GAA+B,CAAC,CAAC,CAAC,GAAG,EAAL,CAAhC,GAA2C,CAAC,CAAC,CAAC,GAAG,EAAL,CAAnD;;AAC7B,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,IAAI,CAA7B,EAAgC;AAC9B,YAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,EAAvB;AACA,YAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,EAAvB;AACA,YAAM,EAAE,GAAG,CAAC,CAAC,IAAD,CAAZ;AACA,YAAM,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,CAAR,CAAZ;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAAL,GAAmB,CAAC,CAAC,IAAD,CAA/B;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAAL,GAAmB,CAAC,CAAC,IAAI,GAAG,CAAR,CAA/B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,IAAI,EAA7B,EAAiC;AAC/B,QAAA,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,IAAY,EAAZ;AACA,QAAA,CAAC,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAD,IAAgB,EAAhB;AACD;AACF,KAdgD,CAejD;;;AACA,QAAI,IAAI,GAAG,CAAC,CAAC,CAAD,CAAZ;AACA,QAAI,IAAI,GAAG,CAAC,CAAC,CAAD,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,YAAM,KAAK,GAAG,SAAS,CAAC,CAAD,CAAvB;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAhB;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAhB;AACA,YAAM,EAAE,GAAG,OAAO,CAAC,CAAD,CAAlB;AACA,MAAA,IAAI,GAAG,CAAC,CAAC,EAAD,CAAR;AACA,MAAA,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAN,CAAR;AACA,MAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,EAAR;AACA,MAAA,CAAC,CAAC,EAAE,GAAG,CAAN,CAAD,GAAY,EAAZ;AACD,KA3BgD,CA4BjD;;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,IAAI,EAA7B,EAAiC;AAC/B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAC,GAAG,CAAL,CAAR;;AAC7B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,IAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,IAAU,EAAX,CAAF,GAAmB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,IAAU,EAAX,CAAhC;AAC9B,KAhCgD,CAiCjD;;;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,WAAW,CAAC,KAAD,CAAnB;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,WAAW,CAAC,KAAD,CAAnB;AACD;;AACD,EAAA,CAAC,CAAC,IAAF,CAAO,CAAP;AACD;;AAzCD,OAAA,CAAA,OAAA,GAAA,OAAA;;AA2CA,MAAa,MAAb,SAA4B,UAAA,CAAA,IAA5B,CAAwC;AAOtC;AACA,EAAA,WAAA,CACS,QADT,EAES,MAFT,EAGS,SAHT,EAIY,SAAA,GAAY,KAJxB,EAKY,MAAA,GAAiB,EAL7B,EAK+B;AAE7B;AANO,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACG,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAXF,SAAA,GAAA,GAAM,CAAN;AACA,SAAA,MAAA,GAAS,CAAT;AACA,SAAA,QAAA,GAAW,KAAX;AAEA,SAAA,SAAA,GAAY,KAAZ,CAOqB,CAG7B;;AACA,IAAA,YAAA,CAAA,OAAA,CAAO,MAAP,CAAc,SAAd,EAJ6B,CAK7B;;;AACA,QAAI,KAAK,KAAK,QAAV,IAAsB,KAAK,QAAL,IAAiB,GAA3C,EACE,MAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACF,SAAK,KAAL,GAAa,IAAI,UAAJ,CAAe,GAAf,CAAb;AACA,SAAK,OAAL,GAAe,CAAA,GAAA,UAAA,CAAA,GAAA,EAAI,KAAK,KAAT,CAAf;AACD;;AACS,EAAA,MAAM,GAAA;AACd,IAAA,OAAO,CAAC,KAAK,OAAN,EAAe,KAAK,MAApB,CAAP;AACA,SAAK,MAAL,GAAc,CAAd;AACA,SAAK,GAAL,GAAW,CAAX;AACD;;AACD,EAAA,MAAM,CAAC,IAAD,EAAY;AAChB,IAAA,YAAA,CAAA,OAAA,CAAO,MAAP,CAAc,IAAd;;AACA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA;AAAZ,QAAsB,IAA5B;AACA,IAAA,IAAI,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAAQ,IAAR,CAAP;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,MAAjB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,GAAxB,GAA+B;AAC7B,YAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,KAAK,GAAzB,EAA8B,GAAG,GAAG,GAApC,CAAb;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B,KAAK,CAAC,KAAK,GAAL,EAAD,CAAL,IAAqB,IAAI,CAAC,GAAG,EAAJ,CAAzB;;AAC/B,UAAI,KAAK,GAAL,KAAa,QAAjB,EAA2B,KAAK,MAAL;AAC5B;;AACD,WAAO,IAAP;AACD;;AACS,EAAA,MAAM,GAAA;AACd,QAAI,KAAK,QAAT,EAAmB;AACnB,SAAK,QAAL,GAAgB,IAAhB;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA,MAAT;AAAiB,MAAA,GAAjB;AAAsB,MAAA;AAAtB,QAAmC,IAAzC,CAHc,CAId;;AACA,IAAA,KAAK,CAAC,GAAD,CAAL,IAAc,MAAd;AACA,QAAI,CAAC,MAAM,GAAG,IAAV,MAAoB,CAApB,IAAyB,GAAG,KAAK,QAAQ,GAAG,CAAhD,EAAmD,KAAK,MAAL;AACnD,IAAA,KAAK,CAAC,QAAQ,GAAG,CAAZ,CAAL,IAAuB,IAAvB;AACA,SAAK,MAAL;AACD;;AACS,EAAA,SAAS,CAAC,GAAD,EAAgB;AACjC,IAAA,YAAA,CAAA,OAAA,CAAO,MAAP,CAAc,IAAd,EAAoB,KAApB;;AACA,IAAA,YAAA,CAAA,OAAA,CAAO,KAAP,CAAa,GAAb;;AACA,SAAK,MAAL;AACA,UAAM,SAAS,GAAG,KAAK,KAAvB;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,GAAG,CAAC,MAA5B,EAAoC,GAAG,GAAG,GAA1C,GAAiD;AAC/C,UAAI,KAAK,MAAL,IAAe,QAAnB,EAA6B,KAAK,MAAL;AAC7B,YAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,KAAK,MAAzB,EAAiC,GAAG,GAAG,GAAvC,CAAb;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,KAAK,MAAxB,EAAgC,KAAK,MAAL,GAAc,IAA9C,CAAR,EAA6D,GAA7D;AACA,WAAK,MAAL,IAAe,IAAf;AACA,MAAA,GAAG,IAAI,IAAP;AACD;;AACD,WAAO,GAAP;AACD;;AACD,EAAA,OAAO,CAAC,GAAD,EAAgB;AACrB;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB,MAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACrB,WAAO,KAAK,SAAL,CAAe,GAAf,CAAP;AACD;;AACD,EAAA,GAAG,CAAC,KAAD,EAAc;AACf,IAAA,YAAA,CAAA,OAAA,CAAO,MAAP,CAAc,KAAd;;AACA,WAAO,KAAK,OAAL,CAAa,IAAI,UAAJ,CAAe,KAAf,CAAb,CAAP;AACD;;AACD,EAAA,UAAU,CAAC,GAAD,EAAgB;AACxB,IAAA,YAAA,CAAA,OAAA,CAAO,MAAP,CAAc,GAAd,EAAmB,IAAnB;;AACA,QAAI,KAAK,QAAT,EAAmB,MAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACnB,SAAK,SAAL,CAAe,GAAf;AACA,SAAK,OAAL;AACA,WAAO,GAAP;AACD;;AACD,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,UAAL,CAAgB,IAAI,UAAJ,CAAe,KAAK,SAApB,CAAhB,CAAP;AACD;;AACD,EAAA,OAAO,GAAA;AACL,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB;AACD;;AACD,EAAA,UAAU,CAAC,EAAD,EAAY;AACpB,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,MAAZ;AAAoB,MAAA,SAApB;AAA+B,MAAA,MAA/B;AAAuC,MAAA;AAAvC,QAAqD,IAA3D;AACA,IAAA,EAAE,KAAF,EAAE,GAAK,IAAI,MAAJ,CAAW,QAAX,EAAqB,MAArB,EAA6B,SAA7B,EAAwC,SAAxC,EAAmD,MAAnD,CAAL,CAAF;AACA,IAAA,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,OAApB;AACA,IAAA,EAAE,CAAC,GAAH,GAAS,KAAK,GAAd;AACA,IAAA,EAAE,CAAC,MAAH,GAAY,KAAK,MAAjB;AACA,IAAA,EAAE,CAAC,QAAH,GAAc,KAAK,QAAnB;AACA,IAAA,EAAE,CAAC,MAAH,GAAY,MAAZ,CAPoB,CAQpB;;AACA,IAAA,EAAE,CAAC,MAAH,GAAY,MAAZ;AACA,IAAA,EAAE,CAAC,SAAH,GAAe,SAAf;AACA,IAAA,EAAE,CAAC,SAAH,GAAe,SAAf;AACA,IAAA,EAAE,CAAC,SAAH,GAAe,KAAK,SAApB;AACA,WAAO,EAAP;AACD;;AAvGqC;;AAAxC,OAAA,CAAA,MAAA,GAAA,MAAA;;AA0GA,MAAM,GAAG,GAAG,CAAC,MAAD,EAAiB,QAAjB,EAAmC,SAAnC,KACV,CAAA,GAAA,UAAA,CAAA,eAAA,EAAgB,MAAM,IAAI,MAAJ,CAAW,QAAX,EAAqB,MAArB,EAA6B,SAA7B,CAAtB,CADF;;AAGa,OAAA,CAAA,QAAA,GAAW,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAd;AACb;;;AAGG;;AACU,OAAA,CAAA,QAAA,GAAW,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAd;AACA,OAAA,CAAA,QAAA,GAAW,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAd;AACA,OAAA,CAAA,QAAA,GAAW,GAAG,CAAC,IAAD,EAAO,EAAP,EAAW,MAAM,CAAjB,CAAd;AACA,OAAA,CAAA,UAAA,GAAa,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAhB;AACb;;;AAGG;;AACU,OAAA,CAAA,UAAA,GAAa,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAhB;AACA,OAAA,CAAA,UAAA,GAAa,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAhB;AACA,OAAA,CAAA,UAAA,GAAa,GAAG,CAAC,IAAD,EAAO,EAAP,EAAW,MAAM,CAAjB,CAAhB;;AAIb,MAAM,QAAQ,GAAG,CAAC,MAAD,EAAiB,QAAjB,EAAmC,SAAnC,KACf,CAAA,GAAA,UAAA,CAAA,uBAAA,EACE,CAAC,IAAA,GAAkB,EAAnB,KACE,IAAI,MAAJ,CAAW,QAAX,EAAqB,MAArB,EAA6B,IAAI,CAAC,KAAL,KAAe,SAAf,GAA2B,SAA3B,GAAuC,IAAI,CAAC,KAAzE,EAAgF,IAAhF,CAFJ,CADF;;AAMa,OAAA,CAAA,QAAA,GAAW,QAAQ,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAnB;AACA,OAAA,CAAA,QAAA,GAAW,QAAQ,CAAC,IAAD,EAAO,GAAP,EAAY,MAAM,CAAlB,CAAnB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map"]},"metadata":{},"sourceType":"script"}