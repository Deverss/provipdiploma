{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, WalletLoginError, Web3AuthError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nclass MetamaskAdapter extends BaseEvmAdapter {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.addChain(this.chainConfig, true);\n        await this.switchChain(this.chainConfig, true);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n\n      const disconnectHandler = () => {\n        var _this$provider; // ready to be connected again\n\n\n        this.disconnect();\n        (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeListener(\"disconnect\", disconnectHandler);\n      };\n\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider2;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    (_this$provider2 = this.provider) === null || _this$provider2 === void 0 ? void 0 : _this$provider2.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    await super.disconnect();\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async addChain(chainConfig) {\n    var _this$metamaskProvide;\n\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init);\n    await ((_this$metamaskProvide = this.metamaskProvider) === null || _this$metamaskProvide === void 0 ? void 0 : _this$metamaskProvide.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorer],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    }));\n    this.addChainConfig(chainConfig);\n  }\n\n  async switchChain(params) {\n    var _this$metamaskProvide2;\n\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    await ((_this$metamaskProvide2 = this.metamaskProvider) === null || _this$metamaskProvide2 === void 0 ? void 0 : _this$metamaskProvide2.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n\n}\n\nexport { MetamaskAdapter };","map":{"version":3,"sources":["../src/metamaskAdapter.ts"],"names":["MetamaskAdapter","BaseEvmAdapter","ADAPTER_NAMESPACES","EIP155","_defineProperty","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","log","debug","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletLoginError","notConnectedError","CONNECTING","adapter","request","method","chainId","chainConfig","addChain","switchChain","disconnectHandler","disconnect","removeListener","on","reconnected","Web3AuthError","connectionError","cleanup","disconnectSession","removeAllListeners","getUserInfo","checkAddChainRequirements","params","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","addChainConfig","checkSwitchChainRequirements","setAdapterSettings","getChainConfig"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, WalletLoginError, Web3AuthError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nclass MetamaskAdapter extends BaseEvmAdapter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"metamaskProvider\", null);\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n      if (chainId !== this.chainConfig.chainId) {\n        await this.addChain(this.chainConfig, true);\n        await this.switchChain(this.chainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        var _this$provider;\n        // ready to be connected again\n        this.disconnect();\n        (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n  async disconnect() {\n    var _this$provider2;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    (_this$provider2 = this.provider) === null || _this$provider2 === void 0 ? void 0 : _this$provider2.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async addChain(chainConfig) {\n    var _this$metamaskProvide;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init);\n    await ((_this$metamaskProvide = this.metamaskProvider) === null || _this$metamaskProvide === void 0 ? void 0 : _this$metamaskProvide.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorer],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    }));\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$metamaskProvide2;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    await ((_this$metamaskProvide2 = this.metamaskProvider) === null || _this$metamaskProvide2 === void 0 ? void 0 : _this$metamaskProvide2.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}