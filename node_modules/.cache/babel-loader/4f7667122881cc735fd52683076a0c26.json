{"ast":null,"code":"import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletInitializationError, isHexStrict, WalletLoginError, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { stripHexPrefix, isValidAddress, privateToAddress, addHexPrefix, BN } from 'ethereumjs-util';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport Common, { Hardfork } from '@ethereumjs/common';\n\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  var getAccounts = _ref.getAccounts,\n      getPrivateKey = _ref.getPrivateKey,\n      processDecryptMessage = _ref.processDecryptMessage,\n      processEncryptionPublicKey = _ref.processEncryptionPublicKey,\n      processEthSignMessage = _ref.processEthSignMessage,\n      processPersonalMessage = _ref.processPersonalMessage,\n      processTransaction = _ref.processTransaction,\n      processSignTransaction = _ref.processSignTransaction,\n      processTypedMessage = _ref.processTypedMessage,\n      processTypedMessageV3 = _ref.processTypedMessageV3,\n      processTypedMessageV4 = _ref.processTypedMessageV4;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  function validateAndNormalizeKeyholder(_x, _x2) {\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  } //\n  // account lookups\n  //\n\n\n  function _validateAndNormalizeKeyholder() {\n    _validateAndNormalizeKeyholder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, req) {\n      var accounts, normalizedAccounts, normalizedAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof address === \"string\" && address.length > 0)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return getAccounts(req);\n\n            case 3:\n              accounts = _context.sent;\n              normalizedAccounts = accounts.map(function (_address) {\n                return _address.toLowerCase();\n              });\n              normalizedAddress = address.toLowerCase();\n\n              if (!normalizedAccounts.includes(normalizedAddress)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", normalizedAddress);\n\n            case 8:\n              throw ethErrors.rpc.invalidParams({\n                message: \"Invalid parameters: must provide an Ethereum address.\"\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  }\n\n  function lookupAccounts(_x3, _x4) {\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function _lookupAccounts() {\n    _lookupAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              res.result = _context2.sent;\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function lookupDefaultAccount(_x5, _x6) {\n    return _lookupDefaultAccount.apply(this, arguments);\n  } //\n  // transaction signatures\n  //\n\n\n  function _lookupDefaultAccount() {\n    _lookupDefaultAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              accounts = _context3.sent;\n              res.result = accounts[0] || null;\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _lookupDefaultAccount.apply(this, arguments);\n  }\n\n  function sendTransaction(_x7, _x8) {\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function _sendTransaction() {\n    _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (processTransaction) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context4.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context4.sent;\n              _context4.next = 8;\n              return processTransaction(txParams, req);\n\n            case 8:\n              res.result = _context4.sent;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function signTransaction(_x9, _x10) {\n    return _signTransaction.apply(this, arguments);\n  } //\n  // message signatures\n  //\n\n\n  function _signTransaction() {\n    _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (processSignTransaction) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context5.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context5.sent;\n              _context5.next = 8;\n              return processSignTransaction(txParams, req);\n\n            case 8:\n              res.result = _context5.sent;\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _signTransaction.apply(this, arguments);\n  }\n\n  function ethSign(_x11, _x12) {\n    return _ethSign.apply(this, arguments);\n  }\n\n  function _ethSign() {\n    _ethSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res) {\n      var address, message, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (processEthSignMessage) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context6.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context6.sent;\n              message = req.params[1];\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context6.next = 10;\n              return processEthSignMessage(msgParams, req);\n\n            case 10:\n              res.result = _context6.sent;\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _ethSign.apply(this, arguments);\n  }\n\n  function signTypedData(_x13, _x14) {\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function _signTypedData() {\n    _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req, res) {\n      var message, address, version, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (processTypedMessage) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              message = req.params[0];\n              _context7.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context7.sent;\n              version = \"V1\";\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context7.next = 11;\n              return processTypedMessage(msgParams, req, version);\n\n            case 11:\n              res.result = _context7.sent;\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function signTypedDataV3(_x15, _x16) {\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function _signTypedDataV() {\n    _signTypedDataV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (processTypedMessageV3) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context8.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context8.sent;\n              message = req.params[1];\n              version = \"V3\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context8.next = 10;\n              return processTypedMessageV3(msgParams, req, version);\n\n            case 10:\n              res.result = _context8.sent;\n\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function signTypedDataV4(_x17, _x18) {\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function _signTypedDataV2() {\n    _signTypedDataV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (processTypedMessageV4) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context9.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context9.sent;\n              message = req.params[1];\n              version = \"V4\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context9.next = 10;\n              return processTypedMessageV4(msgParams, req, version);\n\n            case 10:\n              res.result = _context9.sent;\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function personalSign(_x19, _x20) {\n    return _personalSign.apply(this, arguments);\n  }\n\n  function _personalSign() {\n    _personalSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(req, res) {\n      var firstParam, secondParam, extraParams, address, message, warning, msgParams;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (processPersonalMessage) {\n                _context10.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              // process normally\n              firstParam = req.params[0];\n              secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n              extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n              // To gracefully respect users who adopted this API early,\n              // we are currently gracefully recovering from the wrong param order\n              // when it is clearly identifiable.\n              //\n              // That means when the first param is definitely an address,\n              // and the second param is definitely not, but is hex.\n\n              if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n                warning = \"The eth_personalSign method requires params ordered \";\n                warning += \"[message, address]. This was previously handled incorrectly, \";\n                warning += \"and has been corrected automatically. \";\n                warning += \"Please switch this param order for smooth behavior in the future.\";\n                res.warning = warning;\n                address = firstParam;\n                message = secondParam;\n              } else {\n                message = firstParam;\n                address = secondParam;\n              }\n\n              _context10.next = 8;\n              return validateAndNormalizeKeyholder(address, req);\n\n            case 8:\n              address = _context10.sent;\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              }); // eslint-disable-next-line require-atomic-updates\n\n              _context10.next = 12;\n              return processPersonalMessage(msgParams, req);\n\n            case 12:\n              res.result = _context10.sent;\n\n            case 13:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _personalSign.apply(this, arguments);\n  }\n\n  function encryptionPublicKey(_x21, _x22) {\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function _encryptionPublicKey() {\n    _encryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(req, res) {\n      var address;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (processEncryptionPublicKey) {\n                _context11.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context11.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context11.sent;\n              _context11.next = 7;\n              return processEncryptionPublicKey(address, req);\n\n            case 7:\n              res.result = _context11.sent;\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function decryptMessage(_x23, _x24) {\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function _decryptMessage() {\n    _decryptMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(req, res) {\n      var ciphertext, address, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (processDecryptMessage) {\n                _context12.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              ciphertext = req.params[0];\n              _context12.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context12.sent;\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: ciphertext\n              });\n              res.result = processDecryptMessage(msgParams, req);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function fetchPrivateKey(_x25, _x26) {\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  function _fetchPrivateKey() {\n    _fetchPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (getPrivateKey) {\n                _context13.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              res.result = getPrivateKey(req);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  var getAccounts = providerHandlers.getAccounts,\n      getPrivateKey = providerHandlers.getPrivateKey,\n      processTransaction = providerHandlers.processTransaction,\n      processSignTransaction = providerHandlers.processSignTransaction,\n      processEthSignMessage = providerHandlers.processEthSignMessage,\n      processTypedMessage = providerHandlers.processTypedMessage,\n      processTypedMessageV3 = providerHandlers.processTypedMessageV3,\n      processTypedMessageV4 = providerHandlers.processTypedMessageV4,\n      processPersonalMessage = providerHandlers.processPersonalMessage,\n      processEncryptionPublicKey = providerHandlers.processEncryptionPublicKey,\n      processDecryptMessage = providerHandlers.processDecryptMessage;\n  var ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts: getAccounts,\n    getPrivateKey: getPrivateKey,\n    processTransaction: processTransaction,\n    processEthSignMessage: processEthSignMessage,\n    processSignTransaction: processSignTransaction,\n    processTypedMessage: processTypedMessage,\n    processTypedMessageV3: processTypedMessageV3,\n    processTypedMessageV4: processTypedMessageV4,\n    processPersonalMessage: processPersonalMessage,\n    processEncryptionPublicKey: processEncryptionPublicKey,\n    processDecryptMessage: processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\n\nfunction createChainSwitchMiddleware(_ref) {\n  var addChain = _ref.addChain,\n      switchChain = _ref.switchChain;\n\n  function addNewChain(_x, _x2) {\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function _addNewChain() {\n    _addNewChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n      var _req$params;\n\n      var chainParams;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n\n            case 3:\n              if (chainParams.chainId) {\n                _context.next = 5;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n\n            case 5:\n              if (!(!chainParams.rpcUrls || chainParams.rpcUrls.length === 0)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n\n            case 7:\n              if (chainParams.nativeCurrency) {\n                _context.next = 9;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n            case 9:\n              _context.next = 11;\n              return addChain(chainParams);\n\n            case 11:\n              res.result = _context.sent;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function updateChain(_x3, _x4) {\n    return _updateChain.apply(this, arguments);\n  }\n\n  function _updateChain() {\n    _updateChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n      var _req$params2;\n\n      var chainParams;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n\n            case 3:\n              _context2.next = 5;\n              return switchChain(chainParams);\n\n            case 5:\n              res.result = _context2.sent;\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _updateChain.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n} // #region account middlewares\n\n\nfunction createAccountMiddleware(_ref2) {\n  var updatePrivatekey = _ref2.updatePrivatekey;\n\n  function updateAccount(_x5, _x6) {\n    return _updateAccount.apply(this, arguments);\n  }\n\n  function _updateAccount() {\n    _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n      var _req$params3;\n\n      var accountParams;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n\n              if (accountParams !== null && accountParams !== void 0 && accountParams.privateKey) {\n                _context3.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n\n            case 3:\n              _context3.next = 5;\n              return updatePrivatekey(accountParams);\n\n            case 5:\n              res.result = _context3.sent;\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _updateAccount.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\n\nfunction createChainIdMiddleware(chainId) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  var chainId = providerConfig.chainId,\n      rpcTarget = providerConfig.rpcTarget;\n  var fetchMiddleware = createFetchMiddleware({\n    rpcTarget: rpcTarget\n  });\n  var networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware: networkMiddleware,\n    fetchMiddleware: fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  var connector = _ref.connector;\n  return {\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                accounts = connector.accounts;\n\n                if (!(accounts && accounts.length)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", accounts);\n\n              case 3:\n                throw new Error(\"Failed to get accounts\");\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getAccounts(_x) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    processTransaction: function () {\n      var _processTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return connector.sendTransaction(txParams);\n\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function processTransaction(_x2, _x3) {\n        return _processTransaction.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connector.signTransaction(txParams);\n\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function processSignTransaction(_x4, _x5) {\n        return _processSignTransaction.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connector.signMessage([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function processEthSignMessage(_x6, _x7) {\n        return _processEthSignMessage.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return connector.signPersonalMessage([msgParams.data, msgParams.from]);\n\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function processPersonalMessage(_x8, _x9) {\n        return _processPersonalMessage.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function processTypedMessage(_x10, _x11) {\n        return _processTypedMessage.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(msgParams) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function processTypedMessageV3(_x12) {\n        return _processTypedMessageV.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(msgParams) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function processTypedMessageV4(_x13) {\n        return _processTypedMessageV2.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function processEncryptionPublicKey(_x14) {\n        return _processEncryptionPublicKey.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(_) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar WalletConnectProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(WalletConnectProvider, _BaseProvider);\n\n  var _super = _createSuper$1(WalletConnectProvider);\n\n  function WalletConnectProvider(_ref) {\n    var _this;\n\n    var config = _ref.config,\n        state = _ref.state,\n        connector = _ref.connector;\n\n    _classCallCheck(this, WalletConnectProvider);\n\n    _this = _super.call(this, {\n      config: {\n        chainConfig: _objectSpread$4(_objectSpread$4({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$4(_objectSpread$4({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connector\", null);\n\n    _this.connector = connector || null;\n    return _this;\n  }\n\n  _createClass(WalletConnectProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.connector) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n                  code: 4902\n                });\n\n              case 2:\n                _context.next = 4;\n                return this.setupProvider(this.connector);\n\n              case 4:\n                return _context.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connector) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.onConnectorStateUpdate(connector);\n                _context2.next = 3;\n                return this.setupEngine(connector);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref2) {\n        var chainId, _ref2$addChain, addChain, _ref2$lookup, lookup, currentChainConfig, rpcTarget, displayName;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                chainId = _ref2.chainId, _ref2$addChain = _ref2.addChain, addChain = _ref2$addChain === void 0 ? true : _ref2$addChain, _ref2$lookup = _ref2.lookup, lookup = _ref2$lookup === void 0 ? true : _ref2$lookup;\n\n                if (this.connector) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n                  code: 4902\n                });\n\n              case 3:\n                currentChainConfig = this.getChainConfig(chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                rpcTarget = currentChainConfig.rpcTarget, displayName = currentChainConfig.displayName;\n\n                if (!addChain) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _context3.prev = 7;\n                _context3.next = 10;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: chainId,\n                    chainName: displayName,\n                    rpcUrls: [rpcTarget]\n                  }]\n                });\n\n              case 10:\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](7);\n                log.error(_context3.t0);\n\n              case 15:\n                _context3.prev = 15;\n                _context3.next = 18;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_switchEthereumChain\",\n                  params: [{\n                    chainId: chainId\n                  }]\n                });\n\n              case 18:\n                _context3.next = 25;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t1 = _context3[\"catch\"](15);\n                log.error(_context3.t1); // ignore this error because metamask & others return provider.result as null\n                // wallet connect thinks this is wrong\n\n                if (!(_context3.t1.message !== \"JSON RPC response format is invalid\")) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                throw _context3.t1;\n\n              case 25:\n                this.configure({\n                  chainConfig: currentChainConfig\n                });\n\n                if (!lookup) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 29;\n                return this.lookupNetwork(this.connector);\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[7, 12], [15, 20]]);\n      }));\n\n      function switchChain(_x2) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"addChain\",\n    value: function () {\n      var _addChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(chainConfig) {\n        var rpcTarget, displayName;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.connector) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n              case 2:\n                rpcTarget = chainConfig.rpcTarget, displayName = chainConfig.displayName;\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: chainConfig.chainId,\n                    chainName: displayName,\n                    rpcUrls: [rpcTarget]\n                  }]\n                });\n\n              case 6:\n                _get(_getPrototypeOf(WalletConnectProvider.prototype), \"addChain\", this).call(this, chainConfig);\n\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](3);\n                log.error(_context4.t0);\n                throw _context4.t0;\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 9]]);\n      }));\n\n      function addChain(_x3) {\n        return _addChain.apply(this, arguments);\n      }\n\n      return addChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connector) {\n        var chainId, connectedHexChainId;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (connector.connected) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n              case 2:\n                if (this.provider) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 4:\n                chainId = this.config.chainConfig.chainId;\n                connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n\n                if (!(chainId !== connectedHexChainId)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n\n              case 8:\n                this.provider.emit(\"connect\", {\n                  chainId: chainId\n                });\n                this.provider.emit(\"chainChanged\", this.state.chainId);\n                return _context5.abrupt(\"return\", connectedHexChainId);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lookupNetwork(_x4) {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"setupEngine\",\n    value: function () {\n      var _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connector) {\n        var providerHandlers, ethMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                providerHandlers = getProviderHandlers$1({\n                  connector: connector\n                });\n                this.update({\n                  accounts: connector.accounts || []\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                engine = new JRPCEngine();\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n\n                if (this.config.skipLookupNetwork) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 12;\n                return this.lookupNetwork(connector);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setupEngine(_x5) {\n        return _setupEngine.apply(this, arguments);\n      }\n\n      return setupEngine;\n    }()\n  }, {\n    key: \"onConnectorStateUpdate\",\n    value: function () {\n      var _onConnectorStateUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connector) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                connector.on(\"session_update\", /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(error, payload) {\n                    var _payload$params$, accounts, connectedChainId, rpcUrl, connectedHexChainId, maybeConfig;\n\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            if (_this2.provider) {\n                              _context7.next = 2;\n                              break;\n                            }\n\n                            throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n                          case 2:\n                            if (!error) {\n                              _context7.next = 5;\n                              break;\n                            }\n\n                            _this2.provider.emit(\"error\", error);\n\n                            return _context7.abrupt(\"return\");\n\n                          case 5:\n                            _payload$params$ = payload.params[0], accounts = _payload$params$.accounts, connectedChainId = _payload$params$.chainId, rpcUrl = _payload$params$.rpcUrl; // Check if accounts changed and trigger event\n\n                            if (accounts !== null && accounts !== void 0 && accounts.length && _this2.state.accounts[0] !== accounts[0]) {\n                              _this2.update({\n                                accounts: accounts\n                              }); // await this.setupEngine(connector);\n\n\n                              _this2.provider.emit(\"accountsChanged\", accounts);\n                            }\n\n                            connectedHexChainId = \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n                            if (!(connectedChainId && _this2.state.chainId !== connectedHexChainId)) {\n                              _context7.next = 13;\n                              break;\n                            }\n\n                            maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {}; // Handle rpcUrl update\n\n                            _this2.configure({\n                              chainConfig: _objectSpread$4(_objectSpread$4({}, maybeConfig), {}, {\n                                chainId: connectedHexChainId,\n                                rpcTarget: rpcUrl,\n                                chainNamespace: CHAIN_NAMESPACES.EIP155\n                              })\n                            });\n\n                            _context7.next = 13;\n                            return _this2.setupEngine(connector);\n\n                          case 13:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7);\n                  }));\n\n                  return function (_x7, _x8) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function onConnectorStateUpdate(_x6) {\n        return _onConnectorStateUpdate.apply(this, arguments);\n      }\n\n      return onConnectorStateUpdate;\n    }()\n  }]);\n\n  return WalletConnectProvider;\n}(BaseProvider);\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            providerFactory = new WalletConnectProvider({\n              config: {\n                chainConfig: params.chainConfig,\n                skipLookupNetwork: params.skipLookupNetwork\n              }\n            });\n            _context9.next = 3;\n            return providerFactory.setupProvider(params.connector);\n\n          case 3:\n            return _context9.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x9) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\nvar BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nvar BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nvar BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\"); // Setter Maps\n\nvar toBigNumber = {\n  hex: function hex(n) {\n    return typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16);\n  },\n  dec: function dec(n) {\n    return new BigNumber(n, 10);\n  }\n};\nvar toNormalizedDenomination = {\n  WEI: function WEI(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER);\n  },\n  GWEI: function GWEI(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER);\n  },\n  ETH: function ETH(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER);\n  }\n};\nvar toSpecifiedDenomination = {\n  WEI: function WEI(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP);\n  },\n  GWEI: function GWEI(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP);\n  },\n  ETH: function ETH(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP);\n  }\n};\nvar baseChange = {\n  hex: function hex(n) {\n    return n.toString(16);\n  },\n  dec: function dec(n) {\n    return new BigNumber(n).toString(10);\n  }\n};\n\nvar converter = function converter(params) {\n  var value = params.value,\n      fromNumericBase = params.fromNumericBase,\n      fromDenomination = params.fromDenomination,\n      toNumericBase = params.toNumericBase,\n      toDenomination = params.toDenomination,\n      numberOfDecimals = params.numberOfDecimals;\n  var convertedValue = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n\n  return convertedValue;\n};\n\nvar conversionUtil = function conversionUtil(value, _ref) {\n  var _ref$fromNumericBase = _ref.fromNumericBase,\n      fromNumericBase = _ref$fromNumericBase === void 0 ? \"hex\" : _ref$fromNumericBase,\n      toNumericBase = _ref.toNumericBase,\n      fromDenomination = _ref.fromDenomination,\n      toDenomination = _ref.toDenomination,\n      numberOfDecimals = _ref.numberOfDecimals;\n  return converter({\n    fromNumericBase: fromNumericBase,\n    toNumericBase: toNumericBase,\n    fromDenomination: fromDenomination,\n    toDenomination: toDenomination,\n    numberOfDecimals: numberOfDecimals,\n    value: value || \"0\"\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\n\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction normalizeGWEIDecimalNumbers(n) {\n  var numberAsWEIHex = decGWEIToHexWEI(n);\n  var numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nfunction fetchEip1159GasEstimates(_x) {\n  return _fetchEip1159GasEstimates.apply(this, arguments);\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\n\n\nfunction _fetchEip1159GasEstimates() {\n  _fetchEip1159GasEstimates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var estimates, normalizedEstimates;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return get(url);\n\n          case 2:\n            estimates = _context.sent;\n            normalizedEstimates = _objectSpread$3(_objectSpread$3({}, estimates), {}, {\n              estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n              low: _objectSpread$3(_objectSpread$3({}, estimates.low), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n              }),\n              medium: _objectSpread$3(_objectSpread$3({}, estimates.medium), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n              }),\n              high: _objectSpread$3(_objectSpread$3({}, estimates.high), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n              })\n            });\n            return _context.abrupt(\"return\", normalizedEstimates);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchEip1159GasEstimates.apply(this, arguments);\n}\n\nfunction fetchLegacyGasPriceEstimates(_x2) {\n  return _fetchLegacyGasPriceEstimates.apply(this, arguments);\n}\n\nfunction _fetchLegacyGasPriceEstimates() {\n  _fetchLegacyGasPriceEstimates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return get(url, {\n              referrer: url,\n              referrerPolicy: \"no-referrer-when-downgrade\",\n              method: \"GET\",\n              mode: \"cors\"\n            });\n\n          case 2:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              low: result.SafeGasPrice,\n              medium: result.ProposeGasPrice,\n              high: result.FastGasPrice\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchLegacyGasPriceEstimates.apply(this, arguments);\n}\n\nvar validateTypedMessageParams = function validateTypedMessageParams(parameters, activeChainId) {\n  var _data$domain;\n\n  try {\n    assert.ok(parameters && _typeof(parameters) === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    var data = null;\n    var chainId = null;\n\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(function () {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(function () {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(function () {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, \"Primary type of \\\"\".concat(data.primaryType, \"\\\" has no type definition.\"));\n        var validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = (_data$domain = data.domain) === null || _data$domain === void 0 ? void 0 : _data$domain.chainId;\n\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), \"Cannot sign messages for chainId \\\"\".concat(chainId, \"\\\", because Web3Auth is switching networks.\"));\n\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n\n          assert.strictEqual(chainId, activeChainId, \"Provided chainId \\\"\".concat(chainId, \"\\\" must match the active chainId \\\"\").concat(activeChainId, \"\\\"\"));\n        }\n\n        break;\n\n      default:\n        assert.fail(\"Unknown typed data version \\\"\".concat(parameters.version, \"\\\"\"));\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction signTx(_x, _x2, _x3) {\n  return _signTx.apply(this, arguments);\n}\n\nfunction _signTx() {\n  _signTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(txParams, privKey, txFormatter) {\n    var finalTxParams, common, unsignedEthTx, signedTx;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return txFormatter.formatTransaction(txParams);\n\n          case 2:\n            finalTxParams = _context11.sent;\n            _context11.next = 5;\n            return txFormatter.getCommonConfiguration();\n\n          case 5:\n            common = _context11.sent;\n            unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n              common: common\n            });\n            signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n            return _context11.abrupt(\"return\", signedTx);\n\n          case 9:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _signTx.apply(this, arguments);\n}\n\nfunction getProviderHandlers(_ref) {\n  var txFormatter = _ref.txFormatter,\n      privKey = _ref.privKey,\n      getProviderEngineProxy = _ref.getProviderEngineProxy;\n  return {\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))]);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getAccounts(_x4) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", privKey);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getPrivateKey(_x5) {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    processTransaction: function () {\n      var _processTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams, _) {\n        var providerEngineProxy, signedTx, txHash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                _context3.next = 5;\n                return signTx(txParams, privKey, txFormatter);\n\n              case 5:\n                signedTx = _context3.sent;\n                _context3.next = 8;\n                return providerEngineProxy.request({\n                  method: \"eth_sendRawTransaction\",\n                  params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n                });\n\n              case 8:\n                txHash = _context3.sent;\n                return _context3.abrupt(\"return\", txHash);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function processTransaction(_x6, _x7) {\n        return _processTransaction.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txParams, _) {\n        var providerEngineProxy, signedTx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                _context4.next = 5;\n                return signTx(txParams, privKey, txFormatter);\n\n              case 5:\n                signedTx = _context4.sent;\n                return _context4.abrupt(\"return\", \"0x\".concat(signedTx.toString(\"hex\")));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function processSignTransaction(_x8, _x9) {\n        return _processSignTransaction.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msgParams, _) {\n        var rawMessageSig;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                rawMessageSig = signMessage(privKey, msgParams.data);\n                return _context5.abrupt(\"return\", rawMessageSig);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function processEthSignMessage(_x10, _x11) {\n        return _processEthSignMessage.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = personalSign({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data\n                });\n                return _context6.abrupt(\"return\", sig);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function processPersonalMessage(_x12, _x13) {\n        return _processPersonalMessage.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, params, data, sig;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                log.debug(\"processTypedMessage\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context7.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context7.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                params = _objectSpread$2(_objectSpread$2({}, msgParams), {}, {\n                  version: SignTypedDataVersion.V1\n                });\n                validateTypedMessageParams(params, finalChainId);\n                data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V1\n                });\n                return _context7.abrupt(\"return\", sig);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function processTypedMessage(_x14, _x15) {\n        return _processTypedMessage.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, data, sig;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log.debug(\"processTypedMessageV3\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context8.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context8.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                validateTypedMessageParams(msgParams, finalChainId);\n                data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V3\n                });\n                return _context8.abrupt(\"return\", sig);\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function processTypedMessageV3(_x16, _x17) {\n        return _processTypedMessageV.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, data, sig;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                log.debug(\"processTypedMessageV4\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context9.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context9.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                validateTypedMessageParams(msgParams, finalChainId);\n                data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V4\n                });\n                return _context9.abrupt(\"return\", sig);\n\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function processTypedMessageV4(_x18, _x19) {\n        return _processTypedMessageV2.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(address, _) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                log.info(\"processEncryptionPublicKey\", address);\n                return _context10.abrupt(\"return\", getEncryptionPublicKey(privKey));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function processEncryptionPublicKey(_x20, _x21) {\n        return _processEncryptionPublicKey.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(msgParams, _) {\n      log.info(\"processDecryptMessage\", msgParams);\n      var stripped = stripHexPrefix(msgParams.data);\n      var buff = Buffer.from(stripped, \"hex\");\n      var decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\n\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  var numberBN = new BN(numerator);\n  var denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nvar LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nvar EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nvar TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nvar TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nvar GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar TransactionFormatter = /*#__PURE__*/function () {\n  function TransactionFormatter(_ref) {\n    var getProviderEngineProxy = _ref.getProviderEngineProxy;\n\n    _classCallCheck(this, TransactionFormatter);\n\n    _defineProperty(this, \"chainConfig\", null);\n\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  _createClass(TransactionFormatter, [{\n    key: \"providerProxy\",\n    get: function get() {\n      return this.getProviderEngineProxy();\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_provider_config\",\n                  params: []\n                });\n\n              case 2:\n                this.chainConfig = _context.sent;\n                _context.next = 5;\n                return this.getEIP1559Compatibility();\n\n              case 5:\n                this.isEIP1559Compatible = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"getCommonConfiguration\",\n    value: function () {\n      var _getCommonConfiguration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$chainConfig, name, chainId, hardfork, customChainParams;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                _this$chainConfig = this.chainConfig, name = _this$chainConfig.displayName, chainId = _this$chainConfig.chainId;\n                hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n                customChainParams = {\n                  name: name,\n                  chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n                  networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n                  defaultHardfork: hardfork\n                };\n                return _context2.abrupt(\"return\", Common.custom(customChainParams));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getCommonConfiguration() {\n        return _getCommonConfiguration.apply(this, arguments);\n      }\n\n      return getCommonConfiguration;\n    }()\n  }, {\n    key: \"formatTransaction\",\n    value: function () {\n      var _formatTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams) {\n        var clonedTxParams, defaultGasLimit, _defaultGasLimit, _yield$this$getDefaul, defaultGasPrice, defaultMaxFeePerGas, defaultMaxPriorityFeePerGas;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                clonedTxParams = _objectSpread$1({}, txParams);\n\n                if (!(clonedTxParams.nonce === undefined)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.providerProxy.request({\n                  method: \"eth_getTransactionCount\",\n                  params: [txParams.from, \"latest\"]\n                });\n\n              case 6:\n                clonedTxParams.nonce = _context3.sent;\n\n              case 7:\n                if (!(!this.isEIP1559Compatible && clonedTxParams.gasPrice)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n                if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas; // if gas is not provided explicitly, estimate it.\n\n                if (clonedTxParams.gas) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                _context3.next = 13;\n                return this.getDefaultGasLimit(clonedTxParams);\n\n              case 13:\n                defaultGasLimit = _context3.sent;\n\n                if (defaultGasLimit) {\n                  clonedTxParams.gasLimit = defaultGasLimit;\n                }\n\n                _context3.next = 18;\n                break;\n\n              case 17:\n                clonedTxParams.gasLimit = clonedTxParams.gas;\n\n              case 18:\n                return _context3.abrupt(\"return\", clonedTxParams);\n\n              case 19:\n                if (clonedTxParams.gas) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 22;\n                return this.getDefaultGasLimit(clonedTxParams);\n\n              case 22:\n                _defaultGasLimit = _context3.sent;\n\n                if (_defaultGasLimit) {\n                  clonedTxParams.gasLimit = _defaultGasLimit;\n                }\n\n                _context3.next = 27;\n                break;\n\n              case 26:\n                clonedTxParams.gasLimit = clonedTxParams.gas;\n\n              case 27:\n                _context3.next = 29;\n                return this.getDefaultGasFees(clonedTxParams);\n\n              case 29:\n                _yield$this$getDefaul = _context3.sent;\n                defaultGasPrice = _yield$this$getDefaul.gasPrice;\n                defaultMaxFeePerGas = _yield$this$getDefaul.maxFeePerGas;\n                defaultMaxPriorityFeePerGas = _yield$this$getDefaul.maxPriorityFeePerGas;\n\n                if (this.isEIP1559Compatible) {\n                  // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n                  //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n                  if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                    clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n                    clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n                  } else {\n                    if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n                      // with the one returned by the gasFeeController, if that is available.\n                      clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n                    }\n\n                    if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n                      // with the one returned by the gasFeeController, if that is available.\n                      clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n                    }\n\n                    if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n                      // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n                      // available.\n                      clonedTxParams.maxFeePerGas = defaultGasPrice;\n                    }\n\n                    if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n                      // available  then we set maxPriorityFeePerGas to\n                      // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n                      // set by the dapp, or the maxFeePerGas from the controller.\n                      clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n                    }\n                  } // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n\n                  delete clonedTxParams.gasPrice;\n                } else {\n                  // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n                  // when not on a EIP1559 compatible network\n                  delete clonedTxParams.maxPriorityFeePerGas;\n                  delete clonedTxParams.maxFeePerGas;\n                } // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n                // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n                // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n                // were available from either the dapp or the network.\n\n\n                if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n                  clonedTxParams.gasPrice = defaultGasPrice;\n                }\n\n                clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n                clonedTxParams.chainId = this.chainConfig.chainId;\n                return _context3.abrupt(\"return\", clonedTxParams);\n\n              case 38:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function formatTransaction(_x) {\n        return _formatTransaction.apply(this, arguments);\n      }\n\n      return formatTransaction;\n    }()\n  }, {\n    key: \"fetchEthGasPriceEstimate\",\n    value: function () {\n      var _fetchEthGasPriceEstimate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var gasPrice;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_gasPrice\",\n                  params: []\n                });\n\n              case 2:\n                gasPrice = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function fetchEthGasPriceEstimate() {\n        return _fetchEthGasPriceEstimate.apply(this, arguments);\n      }\n\n      return fetchEthGasPriceEstimate;\n    }()\n  }, {\n    key: \"getEIP1559Compatibility\",\n    value: function () {\n      var _getEIP1559Compatibility = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var latestBlock, supportsEIP1559;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_getBlockByNumber\",\n                  params: [\"latest\", false]\n                });\n\n              case 2:\n                latestBlock = _context5.sent;\n                supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n                return _context5.abrupt(\"return\", !!supportsEIP1559);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getEIP1559Compatibility() {\n        return _getEIP1559Compatibility.apply(this, arguments);\n      }\n\n      return getEIP1559Compatibility;\n    }()\n  }, {\n    key: \"fetchGasFeeEstimateData\",\n    value: function () {\n      var _fetchGasFeeEstimateData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var isLegacyGasAPICompatible, chainId, gasData, estimates, _estimates, _estimates2;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n                chainId = Number.parseInt(this.chainConfig.chainId, 16);\n                _context6.prev = 4;\n\n                if (!this.isEIP1559Compatible) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 8;\n                return fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n\n              case 8:\n                estimates = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: estimates,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n                };\n                _context6.next = 20;\n                break;\n\n              case 12:\n                if (!isLegacyGasAPICompatible) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _context6.next = 15;\n                return fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n\n              case 15:\n                _estimates = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: _estimates,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n                };\n                _context6.next = 20;\n                break;\n\n              case 19:\n                throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n\n              case 20:\n                _context6.next = 34;\n                break;\n\n              case 22:\n                _context6.prev = 22;\n                _context6.t0 = _context6[\"catch\"](4);\n                _context6.prev = 24;\n                _context6.next = 27;\n                return this.fetchEthGasPriceEstimate();\n\n              case 27:\n                _estimates2 = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: _estimates2,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n                };\n                _context6.next = 34;\n                break;\n\n              case 31:\n                _context6.prev = 31;\n                _context6.t1 = _context6[\"catch\"](24);\n                throw new Error(\"Gas fee/price estimation failed. Message: \".concat(_context6.t1.message));\n\n              case 34:\n                return _context6.abrupt(\"return\", gasData);\n\n              case 35:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[4, 22], [24, 31]]);\n      }));\n\n      function fetchGasFeeEstimateData() {\n        return _fetchGasFeeEstimateData.apply(this, arguments);\n      }\n\n      return fetchGasFeeEstimateData;\n    }()\n  }, {\n    key: \"getDefaultGasFees\",\n    value: function () {\n      var _getDefaultGasFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(txParams) {\n        var _yield$this$fetchGasF, gasFeeEstimates, gasEstimateType, _gasFeeEstimates$medi, suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas, _yield$this$fetchEthG, gasPrice;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {});\n\n              case 2:\n                _context7.prev = 2;\n                _context7.next = 5;\n                return this.fetchGasFeeEstimateData();\n\n              case 5:\n                _yield$this$fetchGasF = _context7.sent;\n                gasFeeEstimates = _yield$this$fetchGasF.gasFeeEstimates;\n                gasEstimateType = _yield$this$fetchGasF.gasEstimateType;\n\n                if (!(this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET)) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                _gasFeeEstimates$medi = gasFeeEstimates.medium;\n                _gasFeeEstimates$medi = _gasFeeEstimates$medi === void 0 ? {} : _gasFeeEstimates$medi;\n                suggestedMaxPriorityFeePerGas = _gasFeeEstimates$medi.suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas = _gasFeeEstimates$medi.suggestedMaxFeePerGas;\n\n                if (!(suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n                  maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n                });\n\n              case 14:\n                _context7.next = 22;\n                break;\n\n              case 16:\n                if (!(gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY)) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n                });\n\n              case 20:\n                if (!(gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE)) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n                });\n\n              case 22:\n                _context7.next = 27;\n                break;\n\n              case 24:\n                _context7.prev = 24;\n                _context7.t0 = _context7[\"catch\"](2);\n                log.error(_context7.t0);\n\n              case 27:\n                _context7.next = 29;\n                return this.fetchEthGasPriceEstimate();\n\n              case 29:\n                _yield$this$fetchEthG = _context7.sent;\n                gasPrice = _yield$this$fetchEthG.gasPrice;\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n                });\n\n              case 32:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 24]]);\n      }));\n\n      function getDefaultGasFees(_x2) {\n        return _getDefaultGasFees.apply(this, arguments);\n      }\n\n      return getDefaultGasFees;\n    }()\n  }, {\n    key: \"estimateTxGas\",\n    value: function () {\n      var _estimateTxGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(txMeta) {\n        var txParams, gas;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                txParams = _objectSpread$1({}, txMeta); // `eth_estimateGas` can fail if the user has insufficient balance for the\n                // value being sent, or for the gas cost. We don't want to check their\n                // balance here, we just want the gas estimate. The gas price is removed\n                // to skip those balance checks. We check balance elsewhere. We also delete\n                // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n\n                delete txParams.gasPrice;\n                delete txParams.maxFeePerGas;\n                delete txParams.maxPriorityFeePerGas;\n                _context8.next = 6;\n                return this.providerProxy.request({\n                  method: \"eth_estimateGas\",\n                  params: [txParams]\n                });\n\n              case 6:\n                gas = _context8.sent;\n                return _context8.abrupt(\"return\", gas);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function estimateTxGas(_x3) {\n        return _estimateTxGas.apply(this, arguments);\n      }\n\n      return estimateTxGas;\n    }()\n  }, {\n    key: \"analyzeGasUsage\",\n    value: function () {\n      var _analyzeGasUsage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(txMeta) {\n        var block, blockGasLimitBN, saferGasLimitBN, estimatedGasHex;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_getBlockByNumber\",\n                  params: [\"latest\", false]\n                });\n\n              case 2:\n                block = _context9.sent; // fallback to block gasLimit\n\n                blockGasLimitBN = hexToBn(block.gasLimit);\n                saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n                estimatedGasHex = bnToHex(saferGasLimitBN);\n                _context9.prev = 6;\n                _context9.next = 9;\n                return this.estimateTxGas(txMeta);\n\n              case 9:\n                estimatedGasHex = _context9.sent;\n                _context9.next = 15;\n                break;\n\n              case 12:\n                _context9.prev = 12;\n                _context9.t0 = _context9[\"catch\"](6);\n                log.warn(_context9.t0);\n\n              case 15:\n                return _context9.abrupt(\"return\", {\n                  blockGasLimit: block.gasLimit,\n                  estimatedGasHex: estimatedGasHex\n                });\n\n              case 16:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[6, 12]]);\n      }));\n\n      function analyzeGasUsage(_x4) {\n        return _analyzeGasUsage.apply(this, arguments);\n      }\n\n      return analyzeGasUsage;\n    }()\n  }, {\n    key: \"addGasBuffer\",\n    value: function addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n      var multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n      var initialGasLimitBn = hexToBn(initialGasLimitHex);\n      var blockGasLimitBn = hexToBn(blockGasLimitHex);\n      var upperGasLimitBn = blockGasLimitBn.muln(0.9);\n      var bufferedGasLimitBn = initialGasLimitBn.muln(multiplier); // if initialGasLimit is above blockGasLimit, dont modify it\n\n      if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn); // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n\n      if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn); // otherwise use blockGasLimit\n\n      return bnToHex(upperGasLimitBn);\n    }\n  }, {\n    key: \"determineTransactionCategory\",\n    value: function () {\n      var _determineTransactionCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(txParameters) {\n        var data, to, code, txCategory, codeIsEmpty;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                data = txParameters.data, to = txParameters.to;\n                code = \"\";\n\n                if (!(data && !to)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n                _context10.next = 17;\n                break;\n\n              case 6:\n                _context10.prev = 6;\n                _context10.next = 9;\n                return this.providerProxy.request({\n                  method: \"eth_getCode\",\n                  params: [to, \"latest\"]\n                });\n\n              case 9:\n                code = _context10.sent;\n                _context10.next = 15;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](6);\n                log.warn(_context10.t0);\n\n              case 15:\n                codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n                txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n\n              case 17:\n                return _context10.abrupt(\"return\", {\n                  transactionCategory: txCategory,\n                  code: code\n                });\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[6, 12]]);\n      }));\n\n      function determineTransactionCategory(_x5) {\n        return _determineTransactionCategory.apply(this, arguments);\n      }\n\n      return determineTransactionCategory;\n    }()\n  }, {\n    key: \"getDefaultGasLimit\",\n    value: function () {\n      var _getDefaultGasLimit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(txParams) {\n        var _yield$this$determine, transactionCategory, TWENTY_ONE_THOUSAND, _yield$this$analyzeGa, blockGasLimit, estimatedGasHex, gasLimit;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.determineTransactionCategory(_objectSpread$1({}, txParams));\n\n              case 2:\n                _yield$this$determine = _context11.sent;\n                transactionCategory = _yield$this$determine.transactionCategory;\n\n                if (!txParams.gas) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", txParams.gas);\n\n              case 6:\n                if (!(txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER)) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                if (!txParams.data) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n\n              case 9:\n                TWENTY_ONE_THOUSAND = 21000; // This is a standard ether simple send, gas requirement is exactly 21k\n\n                return _context11.abrupt(\"return\", addHexPrefix(TWENTY_ONE_THOUSAND.toString(16)));\n\n              case 11:\n                _context11.next = 13;\n                return this.analyzeGasUsage(txParams);\n\n              case 13:\n                _yield$this$analyzeGa = _context11.sent;\n                blockGasLimit = _yield$this$analyzeGa.blockGasLimit;\n                estimatedGasHex = _yield$this$analyzeGa.estimatedGasHex; // add additional gas buffer to our estimation for safety\n\n                gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n                return _context11.abrupt(\"return\", gasLimit);\n\n              case 18:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getDefaultGasLimit(_x6) {\n        return _getDefaultGasLimit.apply(this, arguments);\n      }\n\n      return getDefaultGasLimit;\n    }()\n  }]);\n\n  return TransactionFormatter;\n}();\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar EthereumPrivateKeyProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EthereumPrivateKeyProvider, _BaseProvider);\n\n  var _super = _createSuper(EthereumPrivateKeyProvider);\n\n  function EthereumPrivateKeyProvider(_ref) {\n    var config = _ref.config,\n        state = _ref.state;\n\n    _classCallCheck(this, EthereumPrivateKeyProvider);\n\n    return _super.call(this, {\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(EthereumPrivateKeyProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.state.privateKey) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Private key is not found in state, plz pass it in constructor state param\",\n                  code: 4902\n                });\n\n              case 2:\n                _context.next = 4;\n                return this.setupProvider(this.state.privateKey);\n\n              case 4:\n                return _context.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(privKey) {\n        var txFormatter, providerHandlers, ethMiddleware, chainSwitchMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                txFormatter = new TransactionFormatter({\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n                providerHandlers = getProviderHandlers({\n                  txFormatter: txFormatter,\n                  privKey: privKey,\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                chainSwitchMiddleware = this.getChainSwitchMiddleware();\n                engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(chainSwitchMiddleware);\n                engine.push(this.getAccountMiddleware());\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context2.next = 14;\n                return txFormatter.init();\n\n              case 14:\n                _context2.next = 16;\n                return this.lookupNetwork();\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"updateAccount\",\n    value: function () {\n      var _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var existingKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                _context3.next = 4;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 4:\n                existingKey = _context3.sent;\n\n                if (!(existingKey !== params.privateKey)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this.setupProvider(params.privateKey);\n\n              case 8:\n                _context3.t0 = this._providerEngineProxy;\n                _context3.next = 11;\n                return this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                });\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  accounts: _context3.t1\n                };\n\n                _context3.t0.emit.call(_context3.t0, \"accountsChanged\", _context3.t2);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateAccount(_x2) {\n        return _updateAccount.apply(this, arguments);\n      }\n\n      return updateAccount;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {\n        var chainConfig, privKey;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainConfig = this.getChainConfig(params.chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                this.configure({\n                  chainConfig: chainConfig\n                });\n                _context4.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 7:\n                privKey = _context4.sent;\n                _context4.next = 10;\n                return this.setupProvider(privKey);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function switchChain(_x3) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var chainId, network;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainId = this.config.chainConfig.chainId;\n\n                if (chainId) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n\n              case 5:\n                _context5.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"net_version\",\n                  params: []\n                });\n\n              case 7:\n                network = _context5.sent;\n\n                if (!(parseInt(chainId, 16) !== parseInt(network, 10))) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n\n              case 10:\n                if (this.state.chainId !== chainId) {\n                  this._providerEngineProxy.emit(\"chainChanged\", chainId);\n\n                  this._providerEngineProxy.emit(\"connect\", {\n                    chainId: chainId\n                  });\n                }\n\n                this.update({\n                  chainId: chainId\n                });\n                return _context5.abrupt(\"return\", network);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"getChainSwitchMiddleware\",\n    value: function getChainSwitchMiddleware() {\n      var _this = this;\n\n      var chainSwitchHandlers = {\n        addChain: function () {\n          var _addChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {\n            var chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency;\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    chainId = params.chainId, chainName = params.chainName, rpcUrls = params.rpcUrls, blockExplorerUrls = params.blockExplorerUrls, nativeCurrency = params.nativeCurrency;\n\n                    _this.addChain({\n                      chainNamespace: \"eip155\",\n                      chainId: chainId,\n                      ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n                      tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n                      displayName: chainName,\n                      rpcTarget: rpcUrls[0],\n                      blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function addChain(_x4) {\n            return _addChain.apply(this, arguments);\n          }\n\n          return addChain;\n        }(),\n        switchChain: function () {\n          var _switchChain2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(params) {\n            var chainId;\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    chainId = params.chainId;\n                    _context7.next = 3;\n                    return _this.switchChain({\n                      chainId: chainId\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          function switchChain(_x5) {\n            return _switchChain2.apply(this, arguments);\n          }\n\n          return switchChain;\n        }()\n      };\n      var chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n      return chainSwitchMiddleware;\n    }\n  }, {\n    key: \"getAccountMiddleware\",\n    value: function getAccountMiddleware() {\n      var _this2 = this;\n\n      var accountHandlers = {\n        updatePrivatekey: function () {\n          var _updatePrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {\n            var privateKey;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    privateKey = params.privateKey;\n                    _context8.next = 3;\n                    return _this2.updateAccount({\n                      privateKey: privateKey\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          function updatePrivatekey(_x6) {\n            return _updatePrivatekey.apply(this, arguments);\n          }\n\n          return updatePrivatekey;\n        }()\n      };\n      return createAccountMiddleware(accountHandlers);\n    }\n  }]);\n\n  return EthereumPrivateKeyProvider;\n}(BaseProvider);\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            providerFactory = new EthereumPrivateKeyProvider({\n              config: {\n                chainConfig: params.chainConfig\n              }\n            });\n            _context9.next = 3;\n            return providerFactory.setupProvider(params.privKey);\n\n          case 3:\n            return _context9.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x7) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n\nexport { EthereumPrivateKeyProvider, TransactionFormatter, WalletConnectProvider, getProviderHandlers };","map":{"version":3,"sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectUtils.ts","../src/providers/injectedProviders/WalletConnectProvider.ts","../src/providers/converter.ts","../src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/utils.ts","../src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../src/providers/privateKeyProviders/TransactionFormatter/index.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"names":["str","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","address","accounts","normalizedAccounts","_address","normalizedAddress","message","res","ethErrors","txParams","req","from","validateAndNormalizeKeyholder","extraParams","msgParams","data","version","firstParam","secondParam","resemblesAddress","warning","ciphertext","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createWalletMiddleware","createChainSwitchMiddleware","addChain","switchChain","chainParams","length","wallet_addEthereumChain","wallet_switchEthereumChain","updatePrivatekey","accountParams","wallet_updateAccount","end","next","chainId","rpcTarget","providerConfig","fetchMiddleware","createFetchMiddleware","networkMiddleware","createChainIdMiddleware","createProviderConfigMiddleware","connector","result","_","WalletConnectProvider","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","skipLookupNetwork","providerFactory","params","code","method","lookup","currentChainConfig","displayName","chainName","rpcUrls","log","WalletInitializationError","WalletLoginError","connectedHexChainId","isHexStrict","getProviderHandlers","createEthMiddleware","engine","createJsonRpcClient","provider","providerFromEngine","connectedChainId","rpcUrl","payload","maybeConfig","getChainConfig","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","stripHexPrefix","dec","toNormalizedDenomination","WEI","bigNumber","GWEI","ETH","toSpecifiedDenomination","BigNumber","baseChange","n","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","conversionUtil","numberAsWEIHex","decGWEIToHexWEI","numberAsGWEI","hexWEIToDecGWEI","estimates","get","normalizedEstimates","estimatedBaseFee","normalizeGWEIDecimalNumbers","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","referrer","referrerPolicy","mode","FastGasPrice","validateTypedMessageParams","assert","parameters","isValidAddress","SignTypedDataVersion","JSON","Array","typedSignatureHash","validation","jsonschema","TYPED_MESSAGE_SCHEMA","Number","error","signTx","finalTxParams","txFormatter","common","unsignedEthTx","signedTx","Buffer","privKey","getProviderEngineProxy","privateToAddress","providerEngineProxy","txHash","rawMessageSig","signMessage","privKeyBuffer","sig","personalSign","privateKey","finalChainId","V1","signTypedData","V3","V4","getEncryptionPublicKey","stripped","buff","decrypted","decrypt","encryptedData","a","b","addHexPrefix","inputBn","BN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","TransactionFormatter","name","hardfork","Hardfork","customChainParams","networkId","defaultHardfork","Common","clonedTxParams","defaultGasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","bnLessThan","gasPrice","latestBlock","supportsEIP1559","isLegacyGasAPICompatible","fetchEip1159GasEstimates","gasData","gasFeeEstimates","gasEstimateType","fetchLegacyGasPriceEstimates","maxFeePerGas","maxPriorityFeePerGas","gas","block","blockGasLimitBN","hexToBn","saferGasLimitBN","estimatedGasHex","bnToHex","blockGasLimit","initialGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","bufferedGasLimitBn","to","txParameters","txCategory","codeIsEmpty","transactionCategory","Error","TWENTY_ONE_THOUSAND","gasLimit","EthereumPrivateKeyProvider","chainSwitchMiddleware","existingKey","emit","network","parseInt","chainSwitchHandlers","blockExplorerUrls","nativeCurrency","ticker","tickerName","blockExplorer","accountHandlers","createAccountMiddleware"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAAA,gBAAA,CAAA,GAAA,EAAqC;AACnC;AACA,SAAOA,GAAG,CAAHA,MAAAA,KAAe,IAAI,KAA1B,CAAA;AACD;;AAEK,SAAA,sBAAA,CAYoB,IAZpB,EAYoB;AAAA,MAXxBC,WAWwB,GAAA,IAAA,CAXxBA,WAWwB;AAAA,MAVxBC,aAUwB,GAAA,IAAA,CAVxBA,aAUwB;AAAA,MATxBC,qBASwB,GAAA,IAAA,CATxBA,qBASwB;AAAA,MARxBC,0BAQwB,GAAA,IAAA,CARxBA,0BAQwB;AAAA,MAPxBC,qBAOwB,GAAA,IAAA,CAPxBA,qBAOwB;AAAA,MANxBC,sBAMwB,GAAA,IAAA,CANxBA,sBAMwB;AAAA,MALxBC,kBAKwB,GAAA,IAAA,CALxBA,kBAKwB;AAAA,MAJxBC,sBAIwB,GAAA,IAAA,CAJxBA,sBAIwB;AAAA,MAHxBC,mBAGwB,GAAA,IAAA,CAHxBA,mBAGwB;AAAA,MAFxBC,qBAEwB,GAAA,IAAA,CAFxBA,qBAEwB;AAAA,MADxBC,qBACwB,GAAA,IAAA,CADxBA,qBACwB;;AACxB,MAAI,CAAJ,WAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CAAN,8BAAM,CAAN;AAFsB,GAAA,CAAA;AAMxB;AACA;;AAEA;;;;;AAKG;;;AAdqB,WAAA,6BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,WAAA,8BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AA+BxB,GA/BwB,CA+BxB;AACA;AACA;;;AAjCwB,WAAA,8BAAA,GAAA;AAAA,IAAA,8BAexB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,UAAA,QAAA,EAAA,kBAAA,EAAA,iBAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBACM,EAAA,OAAA,OAAA,KAAA,QAAA,IAA+BC,OAAO,CAAPA,MAAAA,GADrC,CACM,CADN,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAGqCX,WAAW,CAHhD,GAGgD,CAHhD;;AAAA,iBAAA,CAAA;AAGUY,cAAAA,QAHV,GAAA,QAAA,CAAA,IAGUA;AACAC,cAAAA,kBAJV,GAIyC,QAAQ,CAAR,GAAA,CAAa,UAAA,QAAA,EAAA;AAAA,uBAAcC,QAAQ,CAAtB,WAAcA,EAAd;AAJtD,eAIyC,CAA/BD;AACAE,cAAAA,iBALV,GAKsCJ,OAAO,CAL7C,WAKsCA,EAA5BI;;AALV,kBAAA,CAOQF,kBAAkB,CAAlBA,QAAAA,CAPR,iBAOQA,CAPR,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,qBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,iBAAA,CAAA;;AAAA,iBAAA,CAAA;AAAA,oBAWQ,SAAS,CAAT,GAAA,CAAA,aAAA,CAA4B;AAChCG,gBAAAA,OAAO,EAAA;AADyB,eAA5B,CAXR;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AAfwB,KAexB,CAAA,CAfwB;AAAA,WAAA,8BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,GAAA;AAAA,IAAA,eAmCxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBACqBhB,WAAW,CADhC,GACgC,CADhC;;AAAA,iBAAA,CAAA;AACEiB,cAAAA,GAAG,CADL,MACEA,GADF,SAAA,CAAA,IACEA;;AADF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAnCwB,KAmCxB,CAAA,CAnCwB;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,oBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,WAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AA4CxB,GA5CwB,CA4CxB;AACA;AACA;;;AA9CwB,WAAA,qBAAA,GAAA;AAAA,IAAA,qBAuCxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,QAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBACyBjB,WAAW,CADpC,GACoC,CADpC;;AAAA,iBAAA,CAAA;AACQY,cAAAA,QADR,GAAA,SAAA,CAAA,IACQA;AACNK,cAAAA,GAAG,CAAHA,MAAAA,GAAaL,QAAQ,CAARA,CAAQ,CAARA,IAAbK,IAAAA;;AAFF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAvCwB,KAuCxB,CAAA,CAvCwB;AAAA,WAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,gBAAA,GAAA;AAAA,IAAA,gBAgDxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,QAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,kBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAKQC,cAAAA,QALR,GAKuCC,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KAAyC;AAC5EC,gBAAAA,IAAI,EAAE;AADsE,eAAxEF;AALR,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAQwBG,6BAA6B,CAACH,QAAQ,CAAT,IAAA,EARrD,GAQqD,CARrD;;AAAA,iBAAA,CAAA;AAQEA,cAAAA,QAAQ,CARV,IAQEA,GARF,SAAA,CAAA,IAQEA;AARF,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBASqBb,kBAAkB,CAAA,QAAA,EATvC,GASuC,CATvC;;AAAA,iBAAA,CAAA;AASEW,cAAAA,GAAG,CATL,MASEA,GATF,SAAA,CAAA,IASEA;;AATF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAhDwB,KAgDxB,CAAA,CAhDwB;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,CAAA,GAAA,EAAA,IAAA,EAAA;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAwExB,GAxEwB,CAwExB;AACA;AACA;;;AA1EwB,WAAA,gBAAA,GAAA;AAAA,IAAA,gBA4DxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,QAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,sBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAKQC,cAAAA,QALR,GAKuCC,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KAAyC;AAC5EC,gBAAAA,IAAI,EAAE;AADsE,eAAxEF;AALR,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAQwBG,6BAA6B,CAACH,QAAQ,CAAT,IAAA,EARrD,GAQqD,CARrD;;AAAA,iBAAA,CAAA;AAQEA,cAAAA,QAAQ,CARV,IAQEA,GARF,SAAA,CAAA,IAQEA;AARF,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBASqBZ,sBAAsB,CAAA,QAAA,EAT3C,GAS2C,CAT3C;;AAAA,iBAAA,CAAA;AASEU,cAAAA,GAAG,CATL,MASEA,GATF,SAAA,CAAA,IASEA;;AATF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AA5DwB,KA4DxB,CAAA,CA5DwB;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,QAAA,GAAA;AAAA,IAAA,QA4ExB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,qBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAKgCI,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAL7D,GAK6D,CAL7D;;AAAA,iBAAA,CAAA;AAKQT,cAAAA,OALR,GAAA,SAAA,CAAA,IAKQA;AACAK,cAAAA,OANR,GAM2BI,GAAG,CAAHA,MAAAA,CAN3B,CAM2BA,CAAnBJ;AACAO,cAAAA,WAPR,GAOgDH,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KAPhD,EAOQG;AACAC,cAAAA,SARR,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA;AAUIH,gBAAAA,IAAI,EAVR,OAAA;AAWII,gBAAAA,IAAI,EAAET;AAXV,eAAA,CAQQQ;AARR,cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAcqBpB,qBAAqB,CAAA,SAAA,EAd1C,GAc0C,CAd1C;;AAAA,iBAAA,EAAA;AAcEa,cAAAA,GAAG,CAdL,MAcEA,GAdF,SAAA,CAAA,IAcEA;;AAdF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AA5EwB,KA4ExB,CAAA,CA5EwB;AAAA,WAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,cAAA,GAAA;AAAA,IAAA,cA6FxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAKQF,cAAAA,OALR,GAKgCI,GAAG,CAAHA,MAAAA,CALhC,CAKgCA,CAAxBJ;AALR,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAMgCM,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAN7D,GAM6D,CAN7D;;AAAA,iBAAA,CAAA;AAMQT,cAAAA,OANR,GAAA,SAAA,CAAA,IAMQA;AACAe,cAAAA,OAPR,GAAA,IAOQA;AACAH,cAAAA,WARR,GAQgDH,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KARhD,EAQQG;AACAC,cAAAA,SATR,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA;AAWIH,gBAAAA,IAAI,EAXR,OAAA;AAYII,gBAAAA,IAAI,EAAET;AAZV,eAAA,CASQQ;AATR,cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAeqBhB,mBAAmB,CAAA,SAAA,EAAA,GAAA,EAfxC,OAewC,CAfxC;;AAAA,iBAAA,EAAA;AAeES,cAAAA,GAAG,CAfL,MAeEA,GAfF,SAAA,CAAA,IAeEA;;AAfF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AA7FwB,KA6FxB,CAAA,CA7FwB;AAAA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,GAAA;AAAA,IAAA,eA+GxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,qBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAKgCI,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAL7D,GAK6D,CAL7D;;AAAA,iBAAA,CAAA;AAKQT,cAAAA,OALR,GAAA,SAAA,CAAA,IAKQA;AACAK,cAAAA,OANR,GAM+CI,GAAG,CAAHA,MAAAA,CAN/C,CAM+CA,CAAvCJ;AACAU,cAAAA,OAPR,GAAA,IAOQA;AACAF,cAAAA,SARR,GAQoE;AAChEC,gBAAAA,IAAI,EAD4D,OAAA;AAEhEJ,gBAAAA,IAAI,EAF4D,OAAA;AAGhEK,gBAAAA,OAAO,EAAPA;AAHgE,eAA5DF;AARR,cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAcqBf,qBAAqB,CAAA,SAAA,EAAA,GAAA,EAd1C,OAc0C,CAd1C;;AAAA,iBAAA,EAAA;AAcEQ,cAAAA,GAAG,CAdL,MAcEA,GAdF,SAAA,CAAA,IAcEA;;AAdF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AA/GwB,KA+GxB,CAAA,CA/GwB;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,gBAAA,GAAA;AAAA,IAAA,gBAgIxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,qBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAKgCI,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAL7D,GAK6D,CAL7D;;AAAA,iBAAA,CAAA;AAKQT,cAAAA,OALR,GAAA,SAAA,CAAA,IAKQA;AACAK,cAAAA,OANR,GAM+CI,GAAG,CAAHA,MAAAA,CAN/C,CAM+CA,CAAvCJ;AACAU,cAAAA,OAPR,GAAA,IAOQA;AACAF,cAAAA,SARR,GAQoE;AAChEC,gBAAAA,IAAI,EAD4D,OAAA;AAEhEJ,gBAAAA,IAAI,EAF4D,OAAA;AAGhEK,gBAAAA,OAAO,EAAPA;AAHgE,eAA5DF;AARR,cAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAcqBd,qBAAqB,CAAA,SAAA,EAAA,GAAA,EAd1C,OAc0C,CAd1C;;AAAA,iBAAA,EAAA;AAcEO,cAAAA,GAAG,CAdL,MAcEA,GAdF,SAAA,CAAA,IAcEA;;AAdF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAhIwB,KAgIxB,CAAA,CAhIwB;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,aAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,aAAA,GAAA;AAAA,IAAA,aAiJxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,sBAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAKE;AACMS,cAAAA,UANR,GAM8BP,GAAG,CAAHA,MAAAA,CAN9B,CAM8BA,CAAtBO;AACAC,cAAAA,WAPR,GAO+BR,GAAG,CAAHA,MAAAA,CAP/B,CAO+BA,CAAvBQ,CAPR,CAQE;;AACML,cAAAA,WATR,GASgDH,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KAThD,EASQG,CATR,CAWE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAIM,gBAAgB,CAAhBA,UAAgB,CAAhBA,IAAgC,CAACA,gBAAgB,CAArD,WAAqD,CAArD,EAAoE;AAC9DC,gBAAAA,OAD8D,GAAA,sDAC9DA;AACJA,gBAAAA,OAAO,IAAPA,+DAAAA;AACAA,gBAAAA,OAAO,IAAPA,wCAAAA;AACAA,gBAAAA,OAAO,IAAPA,mEAAAA;AACCb,gBAAAA,GAAW,CAAXA,OAAAA,GAAAA,OAAAA;AAEDN,gBAAAA,OAAO,GAAPA,UAAAA;AACAK,gBAAAA,OAAO,GAAPA,WAAAA;AARF,eAAA,MASO;AACLA,gBAAAA,OAAO,GAAPA,UAAAA;AACAL,gBAAAA,OAAO,GAAPA,WAAAA;AACD;;AA/BH,cAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAgCkBW,6BAA6B,CAAA,OAAA,EAhC/C,GAgC+C,CAhC/C;;AAAA,iBAAA,CAAA;AAgCEX,cAAAA,OAhCF,GAAA,UAAA,CAAA,IAgCEA;AAEMa,cAAAA,SAlCR,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA;AAoCIH,gBAAAA,IAAI,EApCR,OAAA;AAqCII,gBAAAA,IAAI,EAAET;AArCV,eAAA,CAkCQQ,CAlCR,CAwCE;;AAxCF,cAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAyCqBnB,sBAAsB,CAAA,SAAA,EAzC3C,GAyC2C,CAzC3C;;AAAA,iBAAA,EAAA;AAyCEY,cAAAA,GAAG,CAzCL,MAyCEA,GAzCF,UAAA,CAAA,IAyCEA;;AAzCF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,SAAA,CAAA;AAjJwB,KAiJxB,CAAA,CAjJwB;AAAA,WAAA,aAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,mBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,oBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,oBAAA,GAAA;AAAA,IAAA,oBA6LxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,OAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,0BAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAAA,cAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAKgCI,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAL7D,GAK6D,CAL7D;;AAAA,iBAAA,CAAA;AAKQT,cAAAA,OALR,GAAA,UAAA,CAAA,IAKQA;AALR,cAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAOqBR,0BAA0B,CAAA,OAAA,EAP/C,GAO+C,CAP/C;;AAAA,iBAAA,CAAA;AAOEc,cAAAA,GAAG,CAPL,MAOEA,GAPF,UAAA,CAAA,IAOEA;;AAPF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,SAAA,CAAA;AA7LwB,KA6LxB,CAAA,CA7LwB;AAAA,WAAA,oBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,cAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,GAAA;AAAA,IAAA,eAuMxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,UAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,qBAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAKQa,cAAAA,UALR,GAK8BX,GAAG,CAAHA,MAAAA,CAL9B,CAK8BA,CAAtBW;AALR,cAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAMgCT,6BAA6B,CAAEF,GAAG,CAAHA,MAAAA,CAAF,CAAEA,CAAF,EAN7D,GAM6D,CAN7D;;AAAA,iBAAA,CAAA;AAMQT,cAAAA,OANR,GAAA,UAAA,CAAA,IAMQA;AACAY,cAAAA,WAPR,GAOgDH,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,KAPhD,EAOQG;AACAC,cAAAA,SARR,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA;AAUIH,gBAAAA,IAAI,EAVR,OAAA;AAWII,gBAAAA,IAAI,EAAEM;AAXV,eAAA,CAQQP;AAMNP,cAAAA,GAAG,CAAHA,MAAAA,GAAaf,qBAAqB,CAAA,SAAA,EAAlCe,GAAkC,CAAlCA;;AAdF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,SAAA,CAAA;AAvMwB,KAuMxB,CAAA,CAvMwB;AAAA,WAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,gBAAA,GAAA;AAAA,IAAA,gBAwNxB,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,kBAAA,aAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEUC,SAAS,CAATA,GAAAA,CAFV,kBAEUA,EAFV;;AAAA,iBAAA,CAAA;AAIED,cAAAA,GAAG,CAAHA,MAAAA,GAAahB,aAAa,CAA1BgB,GAA0B,CAA1BA;;AAJF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,SAAA,CAAA;AAxNwB,KAwNxB,CAAA,CAxNwB;AAAA,WAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AA+NxB,SAAOe,wBAAwB,CAAC;AAC9B;AACAC,IAAAA,YAAY,EAAEC,qBAAqB,CAFL,cAEK,CAFL;AAG9BC,IAAAA,eAAe,EAAED,qBAAqB,CAHR,eAGQ,CAHR;AAI9BE,IAAAA,YAAY,EAAEF,qBAAqB,CAJL,oBAIK,CAJL;AAK9B;AACAG,IAAAA,mBAAmB,EAAEH,qBAAqB,CANZ,eAMY,CANZ;AAO9BI,IAAAA,mBAAmB,EAAEJ,qBAAqB,CAPZ,eAOY,CAPZ;AAQ9B;AACAK,IAAAA,QAAQ,EAAEL,qBAAqB,CATD,OASC,CATD;AAU9BM,IAAAA,iBAAiB,EAAEN,qBAAqB,CAVV,aAUU,CAVV;AAW9BO,IAAAA,oBAAoB,EAAEP,qBAAqB,CAXb,eAWa,CAXb;AAY9BQ,IAAAA,oBAAoB,EAAER,qBAAqB,CAZb,eAYa,CAZb;AAa9BS,IAAAA,aAAa,EAAET,qBAAqB,CAbN,YAaM,CAbN;AAc9BU,IAAAA,0BAA0B,EAAEV,qBAAqB,CAdnB,mBAcmB,CAdnB;AAe9BW,IAAAA,WAAW,EAAEX,qBAAqB,CAAA,cAAA;AAfJ,GAAD,CAA/B;AAiBD;;AC1PK,SAAA,mBAAA,CAAA,gBAAA,EAAiE;AACrE,MACElC,WADF,GAYI8C,gBAZJ,CAAA,WAAA;AAAA,MAEE7C,aAFF,GAYI6C,gBAZJ,CAAA,aAAA;AAAA,MAGExC,kBAHF,GAYIwC,gBAZJ,CAAA,kBAAA;AAAA,MAIEvC,sBAJF,GAYIuC,gBAZJ,CAAA,sBAAA;AAAA,MAKE1C,qBALF,GAYI0C,gBAZJ,CAAA,qBAAA;AAAA,MAMEtC,mBANF,GAYIsC,gBAZJ,CAAA,mBAAA;AAAA,MAOErC,qBAPF,GAYIqC,gBAZJ,CAAA,qBAAA;AAAA,MAQEpC,qBARF,GAYIoC,gBAZJ,CAAA,qBAAA;AAAA,MASEzC,sBATF,GAYIyC,gBAZJ,CAAA,sBAAA;AAAA,MAUE3C,0BAVF,GAYI2C,gBAZJ,CAAA,0BAAA;AAAA,MAWE5C,qBAXF,GAYI4C,gBAZJ,CAAA,qBAAA;AAaA,MAAMC,aAAa,GAAGC,eAAe,CAAC,CACpChB,wBAAwB,CAAC;AACvBiB,IAAAA,WAAW,EAAE;AADU,GAAD,CADY,EAIpCC,sBAAsB,CAAC;AACrBlD,IAAAA,WAAW,EADU,WAAA;AAErBC,IAAAA,aAAa,EAFQ,aAAA;AAGrBK,IAAAA,kBAAkB,EAHG,kBAAA;AAIrBF,IAAAA,qBAAqB,EAJA,qBAAA;AAKrBG,IAAAA,sBAAsB,EALD,sBAAA;AAMrBC,IAAAA,mBAAmB,EANE,mBAAA;AAOrBC,IAAAA,qBAAqB,EAPA,qBAAA;AAQrBC,IAAAA,qBAAqB,EARA,qBAAA;AASrBL,IAAAA,sBAAsB,EATD,sBAAA;AAUrBF,IAAAA,0BAA0B,EAVL,0BAAA;AAWrBD,IAAAA,qBAAqB,EAArBA;AAXqB,GAAD,CAJc,CAAD,CAArC;AAkBA,SAAA,aAAA;AACD;;SAEeiD,2B,CAA2E,I,EAAA;AAAA,MAA7CC,QAA6C,GAAA,IAAA,CAA7CA,QAA6C;AAAA,MAAnCC,WAAmC,GAAA,IAAA,CAAnCA,WAAmC;;AAAA,WAAA,WAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,WAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,YAAA,GAAA;AAAA,IAAA,YACzF,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,WAAA;;AAAA,UAAA,WAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AACQC,cAAAA,WADR,GACsB,CAAA,WAAA,GAAA,GAAG,CAAH,MAAA,MAAYC,IAAZ,IAAYA,WAAAA,KAAAA,KAAAA,CAAZ,IAAYA,WAAAA,CAAZ,MAAA,GAAqBnC,GAAG,CAAHA,MAAAA,CAArB,CAAqBA,CAArB,GADtB,SACQkC;;AADR,kBAAA,WAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAE0BpC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAF1B,sBAE0BA,CAF1B;;AAAA,iBAAA,CAAA;AAAA,kBAGOoC,WAAW,CAHlB,OAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAGkCpC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAHlC,gCAGkCA,CAHlC;;AAAA,iBAAA,CAAA;AAAA,kBAIM,EAAA,CAACoC,WAAW,CAAZ,OAAA,IAAwBA,WAAW,CAAXA,OAAAA,CAAAA,MAAAA,KAJ9B,CAIM,CAJN,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAIsEpC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAJtE,gCAIsEA,CAJtE;;AAAA,iBAAA,CAAA;AAAA,kBAKOoC,WAAW,CALlB,cAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAKyCpC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CALzC,uCAKyCA,CALzC;;AAAA,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,qBAOqBkC,QAAQ,CAP7B,WAO6B,CAP7B;;AAAA,iBAAA,EAAA;AAOEnC,cAAAA,GAAG,CAPL,MAOEA,GAPF,QAAA,CAAA,IAOEA;;AAPF,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AADyF,KACzF,CAAA,CADyF;AAAA,WAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,WAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,WAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,YAAA,GAAA;AAAA,IAAA,YAUzF,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,YAAA;;AAAA,UAAA,WAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AACQqC,cAAAA,WADR,GACsB,CAAA,YAAA,GAAA,GAAG,CAAH,MAAA,MAAYC,IAAZ,IAAYA,YAAAA,KAAAA,KAAAA,CAAZ,IAAYA,YAAAA,CAAZ,MAAA,GAAqBnC,GAAG,CAAHA,MAAAA,CAArB,CAAqBA,CAArB,GADtB,SACQkC;;AADR,kBAAA,WAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAE0BpC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAF1B,iBAE0BA,CAF1B;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAGqBmC,WAAW,CAHhC,WAGgC,CAHhC;;AAAA,iBAAA,CAAA;AAGEpC,cAAAA,GAAG,CAHL,MAGEA,GAHF,SAAA,CAAA,IAGEA;;AAHF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAVyF,KAUzF,CAAA,CAVyF;AAAA,WAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAgBzF,SAAOe,wBAAwB,CAAC;AAC9BwB,IAAAA,uBAAuB,EAAEtB,qBAAqB,CADhB,WACgB,CADhB;AAE9BuB,IAAAA,0BAA0B,EAAEvB,qBAAqB,CAAA,WAAA;AAFnB,GAAD,CAA/B;AAID,C,CAAA;;;AAGe,SAAA,uBAAA,CAA8D,KAA9D,EAA8D;AAAA,MAApCwB,gBAAoC,GAAA,KAAA,CAApCA,gBAAoC;;AAAA,WAAA,aAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,cAAA,GAAA;AAAA,IAAA,cAC5E,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,YAAA;;AAAA,UAAA,aAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AACQC,cAAAA,aADR,GACwB,CAAA,YAAA,GAAA,GAAG,CAAH,MAAA,MAAYJ,IAAZ,IAAYA,YAAAA,KAAAA,KAAAA,CAAZ,IAAYA,YAAAA,CAAZ,MAAA,GAAqBnC,GAAG,CAAHA,MAAAA,CAArB,CAAqBA,CAArB,GADxB,SACQuC;;AADR,kBAEOA,aAFP,KAEOA,IAAAA,IAAAA,aAFP,KAEOA,KAAAA,CAAAA,IAAAA,aAAa,CAFpB,UAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,oBAEwCzC,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAFxC,oBAEwCA,CAFxC;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAGqBwC,gBAAgB,CAHrC,aAGqC,CAHrC;;AAAA,iBAAA,CAAA;AAGEzC,cAAAA,GAAG,CAHL,MAGEA,GAHF,SAAA,CAAA,IAGEA;;AAHF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAD4E,KAC5E,CAAA,CAD4E;AAAA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAO5E,SAAOe,wBAAwB,CAAC;AAC9B4B,IAAAA,oBAAoB,EAAE1B,qBAAqB,CAAA,aAAA;AADb,GAAD,CAA/B;AAGD,C,CAAA;;;AC7EK,SAAA,uBAAA,CAAA,OAAA,EAAiD;AACrD,SAAO,UAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAmH;AACxH,QAAId,GAAG,CAAHA,MAAAA,KAAJ,aAAA,EAAkC;AAChCH,MAAAA,GAAG,CAAHA,MAAAA,GAAAA,OAAAA;AACA,aAAO4C,GAAP,EAAA;AACD;;AACD,WAAOC,IAAP,EAAA;AALF,GAAA;AAOD;;AAEK,SAAA,8BAAA,CAAA,cAAA,EAA0E;AAC9E,SAAO,UAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAA8H;AACnI,QAAI1C,GAAG,CAAHA,MAAAA,KAAJ,qBAAA,EAA0C;AACxCH,MAAAA,GAAG,CAAHA,MAAAA,GAAAA,cAAAA;AACA,aAAO4C,GAAP,EAAA;AACD;;AACD,WAAOC,IAAP,EAAA;AALF,GAAA;AAOD;;AAEK,SAAA,mBAAA,CAAA,cAAA,EAA+D;AAInE,MAAQC,OAAR,GAA+BE,cAA/B,CAAA,OAAA;AAAA,MAAiBD,SAAjB,GAA+BC,cAA/B,CAAA,SAAA;AACA,MAAMC,eAAe,GAAGC,qBAAqB,CAAC;AAAEH,IAAAA,SAAS,EAATA;AAAF,GAAD,CAA7C;AACA,MAAMI,iBAAiB,GAAGpB,eAAe,CAAC,CAACqB,uBAAuB,CAAxB,OAAwB,CAAxB,EAAmCC,8BAA8B,CAAjE,cAAiE,CAAjE,EAA1C,eAA0C,CAAD,CAAzC;AACA,SAAO;AAAEF,IAAAA,iBAAiB,EAAnB,iBAAA;AAAqBF,IAAAA,eAAe,EAAfA;AAArB,GAAP;AACD;;ACzBe,SAAA,qBAAA,CAA4D,IAA5D,EAA4D;AAAA,MAAtCK,SAAsC,GAAA,IAAA,CAAtCA,SAAsC;AAC1E,SAAO;AACLtE,IAAAA,aAAa,EAAA,YAAA;AAAA,UAAE,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,sBACPiB,SAAS,CAATA,GAAAA,CADO,kBACPA,EADO;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,aAAA,GAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AADR,KACQ,EADR;AAILlB,IAAAA,WAAW,EAAA,YAAA;AAAA,UAAA,YAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,CAAA,EAAA;AAAA,YAAA,QAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACHY,gBAAAA,QADG,GACU2D,SADV,CAAA,QACH3D;;AADG,oBAAA,EAEPA,QAAQ,IAAIA,QAAQ,CAFb,MAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,sBAKL,IAAA,KAAA,CALK,wBAKL,CALK;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,WAAA,CAAA,EAAA,EAAA;AAAA,eAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,WAAA;AAJN,KAIM,EAJN;AAWLN,IAAAA,kBAAkB,EAAA,YAAA;AAAA,UAAE,mBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACGiE,SAAS,CAATA,eAAAA,CADH,QACGA,CADH;;AAAA,mBAAA,CAAA;AACZC,gBAAAA,MADY,GAAA,SAAA,CAAA,IACZA;AADY,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,kBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,kBAAA;AAXb,KAWa,EAXb;AAeLjE,IAAAA,sBAAsB,EAAA,YAAA;AAAA,UAAE,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACDgE,SAAS,CAATA,eAAAA,CADC,QACDA,CADC;;AAAA,mBAAA,CAAA;AAChBC,gBAAAA,MADgB,GAAA,SAAA,CAAA,IAChBA;AADgB,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,sBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AAfjB,KAeiB,EAfjB;AAmBLpE,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAE,sBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACAmE,SAAS,CAATA,WAAAA,CAAsB,CAAC/C,SAAS,CAAV,IAAA,EAAiBA,SAAS,CADhD,IACsB,CAAtB+C,CADA;;AAAA,mBAAA,CAAA;AACfC,gBAAAA,MADe,GAAA,SAAA,CAAA,IACfA;AADe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,qBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,sBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AAnBhB,KAmBgB,EAnBhB;AAuBLnE,IAAAA,sBAAsB,EAAA,YAAA;AAAA,UAAE,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACDkE,SAAS,CAATA,mBAAAA,CAA8B,CAAC/C,SAAS,CAAV,IAAA,EAAiBA,SAAS,CADvD,IAC6B,CAA9B+C,CADC;;AAAA,mBAAA,CAAA;AAChBC,gBAAAA,MADgB,GAAA,SAAA,CAAA,IAChBA;AADgB,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,sBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AAvBjB,KAuBiB,EAvBjB;AA2BLhE,IAAAA,mBAAmB,EAAA,YAAA;AAAA,UAAE,oBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACE+D,SAAS,CAATA,aAAAA,CAAwB,CAAC/C,SAAS,CAAV,IAAA,EAAiBA,SAAS,CADpD,IAC0B,CAAxB+C,CADF;;AAAA,mBAAA,CAAA;AACbC,gBAAAA,MADa,GAAA,SAAA,CAAA,IACbA;AADa,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,mBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,oBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,mBAAA;AA3Bd,KA2Bc,EA3Bd;AA+BL/D,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAA,qBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACA8D,SAAS,CAATA,aAAAA,CAAwB,CAAC/C,SAAS,CAAV,IAAA,EAAiBA,SAAS,CADlD,IACwB,CAAxB+C,CADA;;AAAA,mBAAA,CAAA;AACfC,gBAAAA,MADe,GAAA,SAAA,CAAA,IACfA;AADe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,qBAAA,CAAA,IAAA,EAAA;AAAA,eAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AA/BhB,KA+BgB,EA/BhB;AAmCL9D,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAA,sBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,YAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACA6D,SAAS,CAATA,aAAAA,CAAwB,CAAC/C,SAAS,CAAV,IAAA,EAAiBA,SAAS,CADlD,IACwB,CAAxB+C,CADA;;AAAA,mBAAA,CAAA;AACfC,gBAAAA,MADe,GAAA,SAAA,CAAA,IACfA;AADe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,qBAAA,CAAA,IAAA,EAAA;AAAA,eAAA,sBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AAnChB,KAmCgB,EAnChB;AAuCLrE,IAAAA,0BAA0B,EAAA,YAAA;AAAA,UAAA,2BAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,SAAA,CAAA,CAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,sBACpBe,SAAS,CAATA,GAAAA,CADoB,kBACpBA,EADoB;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,SAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,0BAAA,CAAA,IAAA,EAAA;AAAA,eAAA,2BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,0BAAA;AAvCrB,KAuCqB,EAvCrB;AA0CLhB,IAAAA,qBAAqB,EAAE,SAACuE,qBAAD,CAAA,CAAA,EAAqC;AAC1D,YAAMvD,SAAS,CAATA,GAAAA,CAAN,kBAAMA,EAAN;AACD;AA5CI,GAAP;AA8CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCD,IAAawD,qBAAb,GAAA,aAAA,UAAA,aAAA,EAAA;AAAA,EAAA,SAAA,CAAA,qBAAA,EAAA,aAAA,CAAA;;AAAA,MAAA,MAAA,GAAA,cAAA,CAAA,qBAAA,CAAA;;AAGE,WAAoI,qBAApI,CAAoI,IAApI,EAAoI;AAAA,QAAA,KAAA;;AAAA,QAAtHC,MAAsH,GAAA,IAAA,CAAtHA,MAAsH;AAAA,QAA9GC,KAA8G,GAAA,IAAA,CAA9GA,KAA8G;AAAA,QAAvGL,SAAuG,GAAA,IAAA,CAAvGA,SAAuG;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,CAAA;;AAClI,IAAA,KAAM,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AACJI,MAAAA,MAAM,EAAE;AAAEE,QAAAA,WAAW,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAOF,MAAM,CAAb,WAAA,CAAA,EAAA,EAAA,EAAA;AAA2BG,UAAAA,cAAc,EAAEC,gBAAgB,CAACC;AAA5D,SAAA,CAAb;AAAmFC,QAAAA,iBAAiB,EAAE,CAAC,CAACN,MAAM,CAACM;AAA/G,OADJ;AAEJL,MAAAA,KAAK,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAQA,KAAK,IAAb,EAAA,CAAA,EAAA,EAAA,EAAA;AAAsBb,QAAAA,OAAO,EAA7B,SAAA;AAA0CnD,QAAAA,QAAQ,EAAE;AAApD,OAAA;AAFD,KAAA,CAAN;;AADkI,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAF7F,IAE6F,CAAA;;AAKlI,IAAA,KAAA,CAAA,SAAA,GAAiB2D,SAAS,IAA1B,IAAA;AALkI,WAAA,KAAA;AAMnI;;AATH,EAAA,YAAA,CAAA,qBAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAqBS,OAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACA,KADA,SAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAEG,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAEvD,kBAAAA,OAAO,EAAT,4EAAA;AAAyFoE,kBAAAA,IAAI,EAAE;AAA/F,iBAA1B,CAFH;;AAAA,mBAAA,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAGC,KAAA,aAAA,CAAmB,KAHpB,SAGC,CAHD;;AAAA,mBAAA,CAAA;AAAA,uBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAIE,KAAA,oBAAA,CAAA,OAAA,CAAkC;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAlC,CAJF,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;AArBT,OAqBS,CAAA,CArBT;;AAAA,eAAA,MAAA,GAAA;AAAA,eAAA,OAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,MAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CA4BS,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACL,qBAAA,sBAAA,CAAA,SAAA;AADK,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAEC,KAAA,WAAA,CAFD,SAEC,CAFD;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AA5BT,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,EAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAiCS,YAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,KAAA,EAAA;AAAA,YAAA,OAAA,EAAA,cAAA,EAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,SAAA,EAAA,WAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAoBtB,gBAAAA,OAApB,GAAoBA,KAAAA,CAApB,OAAoBA,EAASX,cAAAA,GAAAA,KAAAA,CAA7B,QAAoBW,EAASX,QAA7B,GAAwC,cAAA,KAAA,KAAA,CAAA,GAAxC,IAAwC,GAAMkC,cAA1BvB,EAA0BuB,YAAAA,GAAAA,KAAAA,CAA9C,MAAoBvB,EAA0BuB,MAA9C,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,YAAoBvB;;AAApB,oBACA,KADA,SAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAEG,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAE/C,kBAAAA,OAAO,EAAT,4EAAA;AAAyFoE,kBAAAA,IAAI,EAAE;AAA/F,iBAA1B,CAFH;;AAAA,mBAAA,CAAA;AAGCG,gBAAAA,kBAHD,GAGsB,KAAA,cAAA,CAHtB,OAGsB,CAArBA;AACN,qBAAA,MAAA,CAAY;AACVxB,kBAAAA,OAAO,EAAE;AADC,iBAAZ;AAGQC,gBAAAA,SAPH,GAO8BuB,kBAP9B,CAAA,SAOGvB,EAAWwB,WAPd,GAO8BD,kBAP9B,CAAA,WAOGvB;;AAPH,oBAAA,CAAA,QAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAUK,KAAA,SAAA,CAAA,iBAAA,CAAiC;AACrCqB,kBAAAA,MAAM,EAD+B,yBAAA;AAErCF,kBAAAA,MAAM,EAAE,CAAC;AAAEpB,oBAAAA,OAAO,EAAT,OAAA;AAAW0B,oBAAAA,SAAS,EAApB,WAAA;AAAmCC,oBAAAA,OAAO,EAAE,CAAA,SAAA;AAA5C,mBAAD;AAF6B,iBAAjC,CAVL;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAeDC,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;AAfC,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAoBG,KAAA,SAAA,CAAA,iBAAA,CAAiC;AACrCN,kBAAAA,MAAM,EAD+B,4BAAA;AAErCF,kBAAAA,MAAM,EAAE,CAAC;AAAEpB,oBAAAA,OAAO,EAAPA;AAAF,mBAAD;AAF6B,iBAAjC,CApBH;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA;AAyBH4B,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,SAAAA,CAzBG,EAyBHA,EAzBG,CAAA;AA2BH;;AA3BG,oBA4BC,EAAA,SAAA,CAAA,EAAA,CAAA,OAAA,KA5BD,qCA4BC,CA5BD,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,sBAAA,SAAA,CAAA,EAAA;;AAAA,mBAAA,EAAA;AAiCL,qBAAA,SAAA,CAAe;AAAEd,kBAAAA,WAAW,EAAEU;AAAf,iBAAf;;AAjCK,oBAAA,CAAA,MAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAkCa,KAAA,aAAA,CAAmB,KAlChC,SAkCa,CAlCb;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAjCT,OAiCS,CAAA,CAjCT;;AAAA,eAAA,WAAA,CAAA,GAAA,EAAA;AAAA,eAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,SAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAsEE,SAAA,QAAA,CAAA,WAAA,EAAA;AAAA,YAAA,SAAA,EAAA,WAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACO,KADP,SAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAC6BK,yBAAyB,CAAzBA,QAAAA,CAD7B,iCAC6BA,CAD7B;;AAAA,mBAAA,CAAA;AAEU5B,gBAAAA,SAFV,GAEqCa,WAFrC,CAAA,SAEUb,EAAWwB,WAFrB,GAEqCX,WAFrC,CAAA,WAEUb;AAFV,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAKU,KAAA,SAAA,CAAA,iBAAA,CAAiC;AACrCqB,kBAAAA,MAAM,EAD+B,yBAAA;AAErCF,kBAAAA,MAAM,EAAE,CAAC;AAAEpB,oBAAAA,OAAO,EAAEc,WAAW,CAAtB,OAAA;AAAgCY,oBAAAA,SAAS,EAAzC,WAAA;AAAwDC,oBAAAA,OAAO,EAAE,CAAA,SAAA;AAAjE,mBAAD;AAF6B,iBAAjC,CALV;;AAAA,mBAAA,CAAA;AASI,gBAAA,IAAA,CAAA,eAAA,CAAA,qBAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,WAAA;;AATJ,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAWIC,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,SAAAA,CAAAA,EAAAA;AAXJ,sBAAA,SAAA,CAAA,EAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAtEF,OAAA,CAAA,CAAA;;AAAA,eAAA,QAAA,CAAA,GAAA,EAAA;AAAA,eAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,QAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAsFY,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,YAAA,OAAA,EAAA,mBAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACHpB,SAAS,CADN,SAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBACwBsB,gBAAgB,CAAhBA,iBAAAA,CADxB,2CACwBA,CADxB;;AAAA,mBAAA,CAAA;AAAA,oBAEH,KAFG,QAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAEkB,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAE7E,kBAAAA,OAAO,EAAT,6BAAA;AAA0CoE,kBAAAA,IAAI,EAAE;AAAhD,iBAA1B,CAFlB;;AAAA,mBAAA,CAAA;AAGArB,gBAAAA,OAHA,GAGY,KAAA,MAAA,CAHZ,WAGY,CAHZ,OAGAA;AACF+B,gBAAAA,mBAJE,GAIoBC,WAAW,CAACxB,SAAS,CAATA,OAAAA,CAAZwB,QAAYxB,EAAD,CAAXwB,GAA4CxB,SAAS,CAArDwB,OAAAA,GAAqExB,KAAAA,MAAAA,CAAAA,SAAS,CAATA,OAAAA,CAAAA,QAAAA,CAJzF,EAIyFA,CAAAA,CAA3FuB;;AAJE,oBAKJ/B,EAAAA,OAAO,KALH,mBAKJA,CALI,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAMA6B,yBAAyB,CAAzBA,kBAAAA,CAAAA,oCAAAA,MAAAA,CAAAA,mBAAAA,EAAAA,cAAAA,EAAAA,MAAAA,CANA,OAMAA,CAAAA,CANA;;AAAA,mBAAA,CAAA;AAQR,qBAAA,QAAA,CAAA,IAAA,CAAA,SAAA,EAA8B;AAAE7B,kBAAAA,OAAO,EAAPA;AAAF,iBAA9B;AACA,qBAAA,QAAA,CAAA,IAAA,CAAA,cAAA,EAAmC,KAAA,KAAA,CAAnC,OAAA;AATQ,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,mBAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAtFZ,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,GAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,YAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAmGU,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,YAAA,gBAAA,EAAA,aAAA,EAAA,MAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,QAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACAjB,gBAAAA,gBADA,GACmBkD,qBAAmB,CAAC;AAAEzB,kBAAAA,SAAS,EAATA;AAAF,iBAAD,CAAtCzB;AACN,qBAAA,MAAA,CAAY;AACVlC,kBAAAA,QAAQ,EAAE2D,SAAS,CAATA,QAAAA,IAAsB;AADtB,iBAAZ;AAGMxB,gBAAAA,aALA,GAKgBkD,mBAAmB,CALnC,gBAKmC,CAAnClD;AACAmD,gBAAAA,MANA,GAMS,IANT,UAMS,EAATA;AANA,gBAAA,oBAOwBC,GAAAA,mBAAmB,CAAC,KAAA,MAAA,CAP5C,WAO2C,CAP3C,EAOE/B,iBAPF,GAAA,oBAAA,CAAA,iBAAA;AAQN8B,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,aAAAA;AACAA,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,iBAAAA;AACME,gBAAAA,QAVA,GAUWC,kBAAkB,CAV7B,MAU6B,CAA7BD;AACN,qBAAA,yBAAA,CAAA,QAAA;;AAXM,oBAYD,KAAA,MAAA,CAZC,iBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAYoC,KAAA,aAAA,CAZpC,SAYoC,CAZpC;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAnGV,OAAA,CAAA,CAAA;;AAAA,eAAA,WAAA,CAAA,GAAA,EAAA;AAAA,eAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,wBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAkHU,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,YAAA,MAAA,GAAA,IAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACN,gBAAA,SAAS,CAAT,EAAA,CAAA,gBAAA,EAAA,aAAA,YAAA;AAAA,sBAA+B,KAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,KAAA,EAAA,OAAA,EAAA;AAAA,wBAAA,gBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,WAAA;;AAAA,2BAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,6BAAA,CAAA,EAAA;AAAA,gCAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,+BAAA,CAAA;AAAA,gCACxB,MAAI,CADoB,QAAA,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,kCACHP,gBAAgB,CAAhBA,iBAAAA,CADG,2CACHA,CADG;;AAAA,+BAAA,CAAA;AAAA,gCAAA,CAAA,KAAA,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAG3B,4BAAA,MAAI,CAAJ,QAAA,CAAA,IAAA,CAAA,OAAA,EAAA,KAAA;;AAH2B,mCAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;AAAA,+BAAA,CAAA;AAAA,4BAAA,gBAAA,GAMuFW,OAAO,CAAPA,MAAAA,CANvF,CAMuFA,CANvF,EAMrB5F,QANqB,GAAA,gBAAA,CAAA,QAAA,EAMF0F,gBANE,GAMXvC,gBAAAA,CANW,OAAA,EAMgBwC,MANhB,GAAA,gBAAA,CAAA,MAAA,CAAA,CAO7B;;AACA,gCAAI3F,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,KAAA,KAARA,CAAAA,IAAAA,QAAQ,CAARA,MAAAA,IAAoB,MAAI,CAAJ,KAAA,CAAA,QAAA,CAAA,CAAA,MAA2BA,QAAQ,CAA3D,CAA2D,CAA3D,EAAgE;AAC9D,8BAAA,MAAI,CAAJ,MAAA,CAAY;AACVA,gCAAAA,QAAQ,EAARA;AADU,+BAAZ,EAD8D,CAAA;;;AAK9D,8BAAA,MAAI,CAAJ,QAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,QAAA;AACD;;AACKkF,4BAAAA,mBAfuB,GAAA,KAAA,MAAA,CAeIQ,gBAAgB,CAAhBA,QAAAA,CAfJ,EAeIA,CAfJ,CAevBR,CAfuB,CAgB7B;;AAhB6B,gCAiBzBQ,EAAAA,gBAAgB,IAAI,MAAI,CAAJ,KAAA,CAAA,OAAA,KAjBK,mBAiBzBA,CAjByB,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAkBrBG,4BAAAA,WAlBqB,GAkBPC,cAAc,CAAC3B,gBAAgB,CAAjB,MAAA,EAAd2B,gBAAc,CAAdA,IAlBO,EAkBrBD,CAlBqB,CAmB3B;;AACA,4BAAA,MAAI,CAAJ,SAAA,CAAe;AACb5B,8BAAAA,WAAW,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA;AAAoBd,gCAAAA,OAAO,EAA3B,mBAAA;AAAkDC,gCAAAA,SAAS,EAA3D,MAAA;AAAqEc,gCAAAA,cAAc,EAAEC,gBAAgB,CAACC;AAAtG,+BAAA;AADE,6BAAf;;AApB2B,4BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mCAuBrB,MAAI,CAAJ,WAAA,CAvBqB,SAuBrB,CAvBqB;;AAAA,+BAAA,EAAA;AAAA,+BAAA,KAAA;AAAA,mCAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,qBAAA,EAAA,QAAA,CAAA;AAA/B,mBAA+B,CAAA,CAA/B;;AAAA,yBAAA,UAAA,GAAA,EAAA,GAAA,EAAA;AAAA,2BAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,mBAAA;AAAA,iBAAA,EAAA;;AADM,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAlHV,OAAA,CAAA,CAAA;;AAAA,eAAA,sBAAA,CAAA,GAAA,EAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AAAA,KAAA;AAAA,GAAA,CAAA,CAAA;;AAAA,SAAA,qBAAA;AAAA,CAAA,CAAA,YAAA,CAAA;;gBAAaN,qB,EAAAA,qB,EAAAA,aAAAA,YAAAA;AAWyB,MAAA,KAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,QAAA,eAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAK5BQ,YAAAA,eAL4B,GAKV,IAAA,qBAAA,CAA0B;AAAEP,cAAAA,MAAM,EAAE;AAAEE,gBAAAA,WAAW,EAAEM,MAAM,CAArB,WAAA;AAAmCF,gBAAAA,iBAAiB,EAAEE,MAAM,CAACF;AAA7D;AAAV,aAA1B,CAAlBC;AAL4B,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAM5BA,eAAe,CAAfA,aAAAA,CAA8BC,MAAM,CANR,SAM5BD,CAN4B;;AAAA,eAAA,CAAA;AAAA,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,eAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA;GAAA,CAAA,CAAA;;;;;CAXzBR,E;;ACJb,IAAMiC,yBAAyB,GAAG,IAAA,SAAA,CAAlC,MAAkC,CAAlC;AACA,IAAMC,0BAA0B,GAAG,IAAA,SAAA,CAAnC,KAAmC,CAAnC;AACA,IAAMC,yBAAyB,GAAG,IAAA,SAAA,CAAlC,GAAkC,CAAlC,C,CAAA;;AAGA,IAAMC,WAAW,GAAkE;AACjFC,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAA;AAAA,WAA4B,OAAA,CAAA,KAAA,QAAA,GAAwB,IAAA,SAAA,CAAcC,cAAc,CAA5B,CAA4B,CAA5B,EAAxB,EAAwB,CAAxB,GAA+D,IAAA,SAAA,CAAA,CAAA,EAA3F,EAA2F,CAA3F;AAD4E,GAAA;AAEjFC,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAA;AAAA,WAA2B,IAAA,SAAA,CAAA,CAAA,EAA3B,EAA2B,CAA3B;AAAA;AAF4E,CAAnF;AAIA,IAAMC,wBAAwB,GAAgD;AAC5EC,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,SAAA,EAAA;AAAA,WAAeC,SAAS,CAATA,GAAAA,CAAf,yBAAeA,CAAf;AADuE,GAAA;AAE5EC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,SAAA,EAAA;AAAA,WAAeD,SAAS,CAATA,GAAAA,CAAf,0BAAeA,CAAf;AAFsE,GAAA;AAG5EE,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,SAAA,EAAA;AAAA,WAAeF,SAAS,CAATA,GAAAA,CAAf,yBAAeA,CAAf;AAAA;AAHuE,CAA9E;AAKA,IAAMG,uBAAuB,GAAgD;AAC3EJ,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,SAAA,EAAA;AAAA,WAAeC,SAAS,CAATA,KAAAA,CAAAA,yBAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiDI,SAAS,CAAzE,aAAeJ,CAAf;AADsE,GAAA;AAE3EC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,SAAA,EAAA;AAAA,WAAeD,SAAS,CAATA,KAAAA,CAAAA,0BAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAkDI,SAAS,CAA1E,aAAeJ,CAAf;AAFqE,GAAA;AAG3EE,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,SAAA,EAAA;AAAA,WAAeF,SAAS,CAATA,KAAAA,CAAAA,yBAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiDI,SAAS,CAAzE,aAAeJ,CAAf;AAAA;AAHsE,CAA7E;AAKA,IAAMK,UAAU,GAA6C;AAC3DV,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAA;AAAA,WAAOW,CAAC,CAADA,QAAAA,CAAP,EAAOA,CAAP;AADsD,GAAA;AAE3DT,EAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAA;AAAA,WAAO,IAAA,SAAA,CAAA,CAAA,EAAA,QAAA,CAAP,EAAO,CAAP;AAAA;AAFsD,CAA7D;;AAKA,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAAA,MAAA,EAA+C;AAC/D,MAAQC,KAAR,GAAsGzC,MAAtG,CAAA,KAAA;AAAA,MAAe0C,eAAf,GAAsG1C,MAAtG,CAAA,eAAA;AAAA,MAAgC2C,gBAAhC,GAAsG3C,MAAtG,CAAA,gBAAA;AAAA,MAAkD4C,aAAlD,GAAsG5C,MAAtG,CAAA,aAAA;AAAA,MAAiE6C,cAAjE,GAAsG7C,MAAtG,CAAA,cAAA;AAAA,MAAiF8C,gBAAjF,GAAsG9C,MAAtG,CAAA,gBAAA;AACA,MAAI+C,cAAc,GAAuBpB,WAAW,CAAXA,eAAW,CAAXA,CAAzC,KAAyCA,CAAzC;;AAEA,MAAA,gBAAA,EAAsB;AACpBoB,IAAAA,cAAc,GAAGhB,wBAAwB,CAAxBA,gBAAwB,CAAxBA,CAAjBgB,cAAiBhB,CAAjBgB;AACD;;AAED,MAAA,cAAA,EAAoB;AAClBA,IAAAA,cAAc,GAAGX,uBAAuB,CAAvBA,cAAuB,CAAvBA,CAAjBW,cAAiBX,CAAjBW;AACD;;AAED,MAAA,gBAAA,EAAsB;AACpBA,IAAAA,cAAc,GAAIA,cAA4B,CAA5BA,EAAAA,CAAAA,gBAAAA,EAAkDV,SAAS,CAA7EU,eAAkBA,CAAlBA;AACD;;AAED,MAAA,aAAA,EAAmB;AACjBA,IAAAA,cAAc,GAAGT,UAAU,CAAVA,aAAU,CAAVA,CAAjBS,cAAiBT,CAAjBS;AACD;;AACD,SAAA,cAAA;AAnBF,CAAA;;AAsBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAGC,IAHD,EAGC;AAAA,MAAA,oBAAA,GAAA,IAAA,CADpBN,eACoB;AAAA,MADpBA,eACoB,GAAA,oBAAA,KAAA,KAAA,CAAA,GADF,KACE,GAAA,oBAAA;AAAA,MADKE,aACL,GAAA,IAAA,CADKA,aACL;AAAA,MADoBD,gBACpB,GAAA,IAAA,CADoBA,gBACpB;AAAA,MADsCE,cACtC,GAAA,IAAA,CADsCA,cACtC;AAAA,MADsDC,gBACtD,GAAA,IAAA,CADsDA,gBACtD;AACtB,SAAON,SAAS,CAAC;AACfE,IAAAA,eAAe,EADA,eAAA;AAEfE,IAAAA,aAAa,EAFE,aAAA;AAGfD,IAAAA,gBAAgB,EAHD,gBAAA;AAIfE,IAAAA,cAAc,EAJC,cAAA;AAKfC,IAAAA,gBAAgB,EALD,gBAAA;AAMfL,IAAAA,KAAK,EAAEA,KAAK,IAAI;AAND,GAAD,CAAhB;AAJF,CAAA;;AAcA,SAAA,eAAA,CAAA,OAAA,EAAoD;AAClD,SAAOO,cAAc,CAAA,OAAA,EAAU;AAC7BN,IAAAA,eAAe,EADc,KAAA;AAE7BE,IAAAA,aAAa,EAFgB,KAAA;AAG7BD,IAAAA,gBAAgB,EAHa,MAAA;AAI7BE,IAAAA,cAAc,EAAE;AAJa,GAAV,CAArB;AAMD;;AAED,SAAA,eAAA,CAAA,OAAA,EAAoD;AAClD,SAAOG,cAAc,CAAA,OAAA,EAAU;AAC7BN,IAAAA,eAAe,EADc,KAAA;AAE7BE,IAAAA,aAAa,EAFgB,KAAA;AAG7BD,IAAAA,gBAAgB,EAHa,KAAA;AAI7BE,IAAAA,cAAc,EAAE;AAJa,GAAV,CAArB;AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EK,SAAA,2BAAA,CAAA,CAAA,EAA2D;AAC/D,MAAMI,cAAc,GAAGC,eAAe,CAAtC,CAAsC,CAAtC;AACA,MAAMC,YAAY,GAAGC,eAAe,CAApC,cAAoC,CAApC;AACA,SAAA,YAAA;AACD;;AAED,SAAA,wBAAA,CAAA,EAAA,EAAA;AAAA,SAAA,yBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;AAwBA;;;AAGG;;;;AA3BI,EAAA,yBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,CAAA,GAAA,EAAA;AAAA,QAAA,SAAA,EAAA,mBAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACmBE,GAAG,CADtB,GACsB,CADtB;;AAAA,eAAA,CAAA;AACCD,YAAAA,SADD,GAAA,QAAA,CAAA,IACCA;AACAE,YAAAA,mBAFD,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,EAAA,EAAA;AAIHC,cAAAA,gBAAgB,EAAEC,2BAA2B,CAACJ,SAAS,CAJpD,gBAI0C,CAJ1C;AAKHK,cAAAA,GAAG,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EACEL,SAAS,CADX,GAAA,CAAA,EAAA,EAAA,EAAA;AAEDM,gBAAAA,6BAA6B,EAAEF,2BAA2B,CAACJ,SAAS,CAATA,GAAAA,CAF1D,6BAEyD,CAFzD;AAGDO,gBAAAA,qBAAqB,EAAEH,2BAA2B,CAACJ,SAAS,CAATA,GAAAA,CAAD,qBAAA;AAHjD,eAAA,CALA;AAUHQ,cAAAA,MAAM,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EACDR,SAAS,CADR,MAAA,CAAA,EAAA,EAAA,EAAA;AAEJM,gBAAAA,6BAA6B,EAAEF,2BAA2B,CAACJ,SAAS,CAATA,MAAAA,CAFvD,6BAEsD,CAFtD;AAGJO,gBAAAA,qBAAqB,EAAEH,2BAA2B,CAACJ,SAAS,CAATA,MAAAA,CAAD,qBAAA;AAH9C,eAAA,CAVH;AAeHS,cAAAA,IAAI,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EACCT,SAAS,CADV,IAAA,CAAA,EAAA,EAAA,EAAA;AAEFM,gBAAAA,6BAA6B,EAAEF,2BAA2B,CAACJ,SAAS,CAATA,IAAAA,CAFzD,6BAEwD,CAFxD;AAGFO,gBAAAA,qBAAqB,EAAEH,2BAA2B,CAACJ,SAAS,CAATA,IAAAA,CAAD,qBAAA;AAHhD,eAAA;AAfD,aAAA,CAECE;AAFD,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,mBAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;GAAA,CAAA,CAAA;;;;AA4BP,SAAA,4BAAA,CAAA,GAAA,EAAA;AAAA,SAAA,6BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;AAAO,EAAA,6BAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,GAAA,EAAA;AAAA,QAAA,MAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACgBD,GAAG,CAAA,GAAA,EAIhB;AACNS,cAAAA,QAAQ,EADF,GAAA;AAENC,cAAAA,cAAc,EAFR,4BAAA;AAGN9D,cAAAA,MAAM,EAHA,KAAA;AAIN+D,cAAAA,IAAI,EAAE;AAJA,aAJgB,CADnB;;AAAA,eAAA,CAAA;AACC5E,YAAAA,MADD,GAAA,SAAA,CAAA,IACCA;AADD,mBAWE,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACLqE,cAAAA,GAAG,EAAErE,MAAM,CADN,YAAA;AAELwE,cAAAA,MAAM,EAAExE,MAAM,CAFT,eAAA;AAGLyE,cAAAA,IAAI,EAAEzE,MAAM,CAAC6E;AAHR,aAAA,CAXF;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA;GAAA,CAAA,CAAA;;;;AAkBA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAA,UAAA,EAAA,aAAA,EAAmE;AAAA,MAAA,YAAA;;AAC3G,MAAI;AACFC,IAAAA,MAAM,CAANA,EAAAA,CAAUC,UAAU,IAAI,OAAA,CAAA,UAAA,CAAA,KAAxBD,QAAAA,EAAAA,2BAAAA;AACAA,IAAAA,MAAM,CAANA,EAAAA,CAAU,UAAVA,UAAAA,EAAAA,qCAAAA;AACAA,IAAAA,MAAM,CAANA,EAAAA,CAAU,UAAVA,UAAAA,EAAAA,qCAAAA;AACAA,IAAAA,MAAM,CAANA,EAAAA,CACE,OAAOC,UAAU,CAAjB,IAAA,KAAA,QAAA,IAAuCC,cAAc,CAACD,UAAU,CADlED,IACuD,CADvDA,EAAAA,+EAAAA;AAIA,QAAI9H,IAAI,GAAR,IAAA;AACA,QAAIsC,OAAO,GAAX,IAAA;;AACA,YAASyF,UAA0C,CAAnD,OAAA;AACE,WAAKE,oBAAoB,CAAzB,EAAA;AACE,YAAI,OAAOF,UAAU,CAAjB,IAAA,KAAJ,QAAA,EAAyC;AACvCD,UAAAA,MAAM,CAANA,YAAAA,CAAoB,YAAK;AACvB9H,YAAAA,IAAI,GAAGkI,IAAI,CAAJA,KAAAA,CAAWH,UAAU,CAA5B/H,IAAOkI,CAAPlI;AADF8H,WAAAA,EAAAA,qCAAAA;AADF,SAAA,MAIO;AACL;AACA9H,UAAAA,IAAI,GAAG+H,UAAU,CAAjB/H,IAAAA;AACD;;AACD8H,QAAAA,MAAM,CAANA,EAAAA,CAAUK,KAAK,CAALA,OAAAA,CAAVL,IAAUK,CAAVL,EAAAA,+BAAAA;AACAA,QAAAA,MAAM,CAANA,YAAAA,CAAoB,YAAK;AACvBM,UAAAA,kBAAkB,CAAlBA,IAAkB,CAAlBA;AADFN,SAAAA,EAAAA,gDAAAA;AAGA;;AACF,WAAKG,oBAAoB,CAAzB,EAAA;AACA,WAAKA,oBAAoB,CAAzB,EAAA;AACE,YAAI,OAAOF,UAAU,CAAjB,IAAA,KAAJ,QAAA,EAAyC;AACvCD,UAAAA,MAAM,CAANA,YAAAA,CAAoB,YAAK;AACvB9H,YAAAA,IAAI,GAAGkI,IAAI,CAAJA,KAAAA,CAAWH,UAAU,CAA5B/H,IAAOkI,CAAPlI;AADF8H,WAAAA,EAAAA,qCAAAA;AADF,SAAA,MAIO;AACL;AACA9H,UAAAA,IAAI,GAAG+H,UAAU,CAAjB/H,IAAAA;AACD;;AAED8H,QAAAA,MAAM,CAANA,EAAAA,CAAU9H,IAAI,CAAJA,WAAAA,IAAoBA,IAAI,CAAlC8H,KAAAA,EAA8D9H,qBAAAA,MAAAA,CAAAA,IAAI,CAAlE8H,WAA8D9H,EAA9D8H,4BAA8D9H,CAA9D8H;AACA,YAAMO,UAAU,GAAGC,UAAU,CAAVA,QAAAA,CAAAA,IAAAA,EAA0BC,oBAAoB,CAAjE,UAAmBD,CAAnB;AACAR,QAAAA,MAAM,CAANA,WAAAA,CAAmBO,UAAU,CAAVA,MAAAA,CAAnBP,MAAAA,EAAAA,CAAAA,EAAAA,wEAAAA;AACAxF,QAAAA,OAAO,GAAA,CAAA,YAAA,GAAGtC,IAAI,CAAP,MAAA,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,YAAAA,CAAVsC,OAAAA;;AACA,YAAA,OAAA,EAAa;AACXwF,UAAAA,MAAM,CAANA,EAAAA,CAAU,CAACU,MAAM,CAANA,KAAAA,CAAXV,aAAWU,CAAXV,EAAAA,sCAAAA,MAAAA,CAAAA,OAAAA,EAAAA,6CAAAA,CAAAA;;AACA,cAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/BxF,YAAAA,OAAO,GAAGkG,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAAyBlE,WAAW,CAAXA,OAAW,CAAXA,GAAAA,EAAAA,GAAnChC,EAAUkG,CAAVlG;AACD;;AACDwF,UAAAA,MAAM,CAANA,WAAAA,CAAAA,OAAAA,EAAAA,aAAAA,EAAAA,sBAAAA,MAAAA,CAAAA,OAAAA,EAAAA,qCAAAA,EAAAA,MAAAA,CAAAA,aAAAA,EAAAA,IAAAA,CAAAA;AACD;;AACD;;AACF;AACEA,QAAAA,MAAM,CAANA,IAAAA,CAA4CC,gCAAAA,MAAAA,CAAAA,UAA0C,CAAtFD,OAA4CC,EAA5CD,IAA4CC,CAA5CD;AAvCJ;AAVF,GAAA,CAmDE,OAAA,KAAA,EAAc;AACd,UAAM,SAAS,CAAT,GAAA,CAAA,YAAA,CAA2B;AAC/BvI,MAAAA,OAAO,EAAEkJ,KAAF,KAAA,IAAEA,IAAAA,KAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,KAAK,CAAElJ;AADe,KAA3B,CAAN;AAGD;AAxDI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;SC3CQmJ,M,CAAAA,E,EAAAA,G,EAAAA,G,EAAAA;;;;;AAAf,EAAA,OAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA;AAAA,QAAA,aAAA,EAAA,MAAA,EAAA,aAAA,EAAA,QAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAC8BE,WAAW,CAAXA,iBAAAA,CAD9B,QAC8BA,CAD9B;;AAAA,eAAA,CAAA;AACQD,YAAAA,aADR,GAAA,UAAA,CAAA,IACQA;AADR,YAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEuBC,WAAW,CAFlC,sBAEuBA,EAFvB;;AAAA,eAAA,CAAA;AAEQC,YAAAA,MAFR,GAAA,UAAA,CAAA,IAEQA;AACAC,YAAAA,aAHR,GAGwB,kBAAkB,CAAlB,UAAA,CAAA,aAAA,EAA6C;AACjED,cAAAA,MAAM,EAANA;AADiE,aAA7C,CAAhBC;AAGAC,YAAAA,QANR,GAMmBD,aAAa,CAAbA,IAAAA,CAAmBE,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAnBF,KAAmBE,CAAnBF,EANnB,SAMmBA,EAAXC;AANR,mBAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,SAAA,CAAA;GAAA,CAAA,CAAA;;;;AAUM,SAAA,mBAAA,CAQL,IARK,EAQL;AAAA,MAPCH,WAOD,GAAA,IAAA,CAPCA,WAOD;AAAA,MANCK,OAMD,GAAA,IAAA,CANCA,OAMD;AAAA,MALCC,sBAKD,GAAA,IAAA,CALCA,sBAKD;AACC,SAAO;AACL3K,IAAAA,WAAW,EAAA,YAAA;AAAA,UAAA,YAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAA,CAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,uBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAmC,CAAA,KAAA,MAAA,CAAM4K,gBAAgB,CAACH,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAjBG,KAAiBH,CAAD,CAAhBG,CAAAA,QAAAA,CAAzC,KAAyCA,CAAN,CAAA,CAAnC,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,WAAA,CAAA,GAAA,EAAA;AAAA,eAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,WAAA;AADN,KACM,EADN;AAEL3K,IAAAA,aAAa,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,CAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,GAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAFR,KAEQ,EAFR;AAGLK,IAAAA,kBAAkB,EAAA,YAAA;AAAA,UAAE,mBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AAAA,YAAA,mBAAA,EAAA,QAAA,EAAA,MAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACZuK,gBAAAA,mBADY,GACUF,sBADV,EACZE;;AADY,oBAAA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAGV,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAC9B7J,kBAAAA,OAAO,EADuB,6BAAA;AAE9BoE,kBAAAA,IAAI,EAAE;AAFwB,iBAA1B,CAHU;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAOK+E,MAAM,CAAA,QAAA,EAAA,OAAA,EAPX,WAOW,CAPX;;AAAA,mBAAA,CAAA;AAOZK,gBAAAA,QAPY,GAAA,SAAA,CAAA,IAOZA;AAPY,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAQG,mBAAmB,CAAnB,OAAA,CAA8C;AACjEnF,kBAAAA,MAAM,EAD2D,wBAAA;AAEjEF,kBAAAA,MAAM,EAAE,CAAC,KAAA,MAAA,CAAYqF,QAAQ,CAARA,QAAAA,CAAb,KAAaA,CAAZ,CAAD;AAFyD,iBAA9C,CARH;;AAAA,mBAAA,CAAA;AAQZM,gBAAAA,MARY,GAAA,SAAA,CAAA,IAQZA;AARY,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,kBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,kBAAA;AAHb,KAGa,EAHb;AAiBLvK,IAAAA,sBAAsB,EAAA,YAAA;AAAA,UAAE,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AAAA,YAAA,mBAAA,EAAA,QAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAChBsK,gBAAAA,mBADgB,GACMF,sBADN,EAChBE;;AADgB,oBAAA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAGd,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAC9B7J,kBAAAA,OAAO,EADuB,6BAAA;AAE9BoE,kBAAAA,IAAI,EAAE;AAFwB,iBAA1B,CAHc;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAOC+E,MAAM,CAAA,QAAA,EAAA,OAAA,EAPP,WAOO,CAPP;;AAAA,mBAAA,CAAA;AAOhBK,gBAAAA,QAPgB,GAAA,SAAA,CAAA,IAOhBA;AAPgB,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,KAAA,MAAA,CAQVA,QAAQ,CAARA,QAAAA,CARU,KAQVA,CARU,CAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,sBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AAjBjB,KAiBiB,EAjBjB;AA2BLpK,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAE,sBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,aAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACf2K,gBAAAA,aADe,GACCC,WAAW,CAAA,OAAA,EAAUxJ,SAAS,CAD/B,IACY,CAA3BuJ;AADe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,aAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,sBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AA3BhB,KA2BgB,EA3BhB;AA+BL1K,IAAAA,sBAAsB,EAAA,YAAA;AAAA,UAAE,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,aAAA,EAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAChB4K,gBAAAA,aADgB,GACAR,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EADA,KACAA,CAAhBQ;AACAC,gBAAAA,GAFgB,GAEVC,YAAY,CAAC;AAAEC,kBAAAA,UAAU,EAAZ,aAAA;AAA6B3J,kBAAAA,IAAI,EAAED,SAAS,CAACC;AAA7C,iBAAD,CAAlByJ;AAFgB,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,sBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AA/BjB,KA+BiB,EA/BjB;AAoCL1K,IAAAA,mBAAmB,EAAA,YAAA;AAAA,UAAE,oBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,aAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,MAAA,EAAA,IAAA,EAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACnBmF,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,qBAAAA,EAAAA,SAAAA;AACMsF,gBAAAA,aAFa,GAEGR,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAFH,KAEGA,CAAhBQ;AACAJ,gBAAAA,mBAHa,GAGSF,sBAHT,EAGbE;;AAHa,oBAAA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAKX,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAC9B7J,kBAAAA,OAAO,EADuB,6BAAA;AAE9BoE,kBAAAA,IAAI,EAAE;AAFwB,iBAA1B,CALW;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBASG,mBAAmB,CAAnB,OAAA,CAA6C;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAA7C,CATH;;AAAA,mBAAA,CAAA;AASbtB,gBAAAA,OATa,GAAA,SAAA,CAAA,IASbA;AACAsH,gBAAAA,YAVa,GAUEpB,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAAyBlE,WAAW,CAAXA,OAAW,CAAXA,GAAAA,EAAAA,GAV3B,EAUEkE,CAAfoB;AACAlG,gBAAAA,MAXa,GAAA,eAAA,CAAA,eAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,EAAA,EAAA;AAajBzD,kBAAAA,OAAO,EAAEgI,oBAAoB,CAAC4B;AAbb,iBAAA,CAWbnG;AAINmE,gBAAAA,0BAA0B,CAAA,MAAA,EAA1BA,YAA0B,CAA1BA;AACM7H,gBAAAA,IAhBa,GAgBN,OAAO0D,MAAM,CAAb,IAAA,KAAA,QAAA,GAAkCwE,IAAI,CAAJA,KAAAA,CAAWxE,MAAM,CAAnD,IAAkCwE,CAAlC,GAA4DxE,MAAM,CAhB5D,IAgBb1D;AACAyJ,gBAAAA,GAjBa,GAiBPK,aAAa,CAAC;AAAEH,kBAAAA,UAAU,EAAZ,aAAA;AAA6B3J,kBAAAA,IAAI,EAAjC,IAAA;AAAmCC,kBAAAA,OAAO,EAAEgI,oBAAoB,CAAC4B;AAAjE,iBAAD,CAAnBJ;AAjBa,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,mBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,oBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,mBAAA;AApCd,KAoCc,EApCd;AAwDLzK,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAE,qBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,aAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,IAAA,EAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACrBkF,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,uBAAAA,EAAAA,SAAAA;AACMsF,gBAAAA,aAFe,GAECR,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAFD,KAECA,CAAhBQ;AACAJ,gBAAAA,mBAHe,GAGOF,sBAHP,EAGfE;;AAHe,oBAAA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAKb,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAC9B7J,kBAAAA,OAAO,EADuB,6BAAA;AAE9BoE,kBAAAA,IAAI,EAAE;AAFwB,iBAA1B,CALa;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBASC,mBAAmB,CAAnB,OAAA,CAA6C;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAA7C,CATD;;AAAA,mBAAA,CAAA;AASftB,gBAAAA,OATe,GAAA,SAAA,CAAA,IASfA;AACAsH,gBAAAA,YAVe,GAUApB,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAAyBlE,WAAW,CAAXA,OAAW,CAAXA,GAAAA,EAAAA,GAVzB,EAUAkE,CAAfoB;AACN/B,gBAAAA,0BAA0B,CAAA,SAAA,EAA1BA,YAA0B,CAA1BA;AACM7H,gBAAAA,IAZe,GAYR,OAAOD,SAAS,CAAhB,IAAA,KAAA,QAAA,GAAqCmI,IAAI,CAAJA,KAAAA,CAAWnI,SAAS,CAAzD,IAAqCmI,CAArC,GAAkEnI,SAAS,CAZnE,IAYfC;AACAyJ,gBAAAA,GAbe,GAaTK,aAAa,CAAC;AAAEH,kBAAAA,UAAU,EAAZ,aAAA;AAA6B3J,kBAAAA,IAAI,EAAjC,IAAA;AAAmCC,kBAAAA,OAAO,EAAEgI,oBAAoB,CAAC8B;AAAjE,iBAAD,CAAnBN;AAbe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AAxDhB,KAwDgB,EAxDhB;AAwELxK,IAAAA,qBAAqB,EAAA,YAAA;AAAA,UAAE,sBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,SAAA,EAAA,CAAA,EAAA;AAAA,YAAA,aAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,IAAA,EAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACrBiF,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,uBAAAA,EAAAA,SAAAA;AACMsF,gBAAAA,aAFe,GAECR,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAFD,KAECA,CAAhBQ;AACAJ,gBAAAA,mBAHe,GAGOF,sBAHP,EAGfE;;AAHe,oBAAA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAKb,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAC9B7J,kBAAAA,OAAO,EADuB,6BAAA;AAE9BoE,kBAAAA,IAAI,EAAE;AAFwB,iBAA1B,CALa;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBASC,mBAAmB,CAAnB,OAAA,CAA6C;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAA7C,CATD;;AAAA,mBAAA,CAAA;AASftB,gBAAAA,OATe,GAAA,SAAA,CAAA,IASfA;AACAsH,gBAAAA,YAVe,GAUApB,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAAyBlE,WAAW,CAAXA,OAAW,CAAXA,GAAAA,EAAAA,GAVzB,EAUAkE,CAAfoB;AACN/B,gBAAAA,0BAA0B,CAAA,SAAA,EAA1BA,YAA0B,CAA1BA;AACM7H,gBAAAA,IAZe,GAYR,OAAOD,SAAS,CAAhB,IAAA,KAAA,QAAA,GAAqCmI,IAAI,CAAJA,KAAAA,CAAWnI,SAAS,CAAzD,IAAqCmI,CAArC,GAAkEnI,SAAS,CAZnE,IAYfC;AACAyJ,gBAAAA,GAbe,GAaTK,aAAa,CAAC;AAAEH,kBAAAA,UAAU,EAAZ,aAAA;AAA6B3J,kBAAAA,IAAI,EAAjC,IAAA;AAAmCC,kBAAAA,OAAO,EAAEgI,oBAAoB,CAAC+B;AAAjE,iBAAD,CAAnBP;AAbe,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,sBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,qBAAA;AAxEhB,KAwEgB,EAxEhB;AAwFL/K,IAAAA,0BAA0B,EAAA,YAAA;AAAA,UAAE,2BAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,OAAA,EAAA,CAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAC1BwF,gBAAAA,GAAG,CAAHA,IAAAA,CAAAA,4BAAAA,EAAAA,OAAAA;AAD0B,uBAEnB+F,UAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,sBAAsB,CAFH,OAEG,CAAtBA,CAFmB;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,SAAA,CAAA;AAAF,OAAE,CAAA,CAAF;;AAAA,eAAA,0BAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,eAAA,2BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,0BAAA;AAxFrB,KAwFqB,EAxFrB;AA4FLxL,IAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,SAAA,EAAA,CAAA,EAAsE;AAC3FyF,MAAAA,GAAG,CAAHA,IAAAA,CAAAA,uBAAAA,EAAAA,SAAAA;AACA,UAAMgG,QAAQ,GAAG3E,cAAc,CAACxF,SAAS,CAAzC,IAA+B,CAA/B;AACA,UAAMoK,IAAI,GAAGnB,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAb,KAAaA,CAAb;AACA,UAAMoB,SAAS,GAAGC,OAAO,CAAC;AAAEC,QAAAA,aAAa,EAAEpC,IAAI,CAAJA,KAAAA,CAAWiC,IAAI,CAAJA,QAAAA,CAA5B,MAA4BA,CAAXjC,CAAjB;AAAwEyB,QAAAA,UAAU,EAAEV;AAApF,OAAD,CAAzB;AACA,aAAA,SAAA;AACD;AAlGI,GAAP;AAoGD;;AC1Ie,SAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAe;AAC7B,MAAIsB,CAAC,KAADA,IAAAA,IAAcA,CAAC,KAAfA,SAAAA,IAAiCC,CAAC,KAAlCD,IAAAA,IAA+CC,CAAC,KAApD,SAAA,EAAoE;AAClE,WAAA,IAAA;AACD;;AACD,SAAO,IAAA,WAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAAP,EAAO,CAAP;AACD;;AAEK,SAAA,OAAA,CAAA,OAAA,EAA6B;AACjC,SAAOC,YAAY,CAACC,OAAO,CAAPA,QAAAA,CAApB,EAAoBA,CAAD,CAAnB;AACD;;AAEK,SAAA,OAAA,CAAA,QAAA,EAAkC;AACtC,MAAIC,EAAE,CAAFA,IAAAA,CAAJ,QAAIA,CAAJ,EAAuB,OAAA,QAAA;AACvB,SAAO,IAAA,EAAA,CAAOpF,cAAc,CAArB,QAAqB,CAArB,EAAP,EAAO,CAAP;AACD;;SAEeqF,oB,CAAqBC,Q,EAAcC,S,EAA4BC,W,EAA4B;AACzG,MAAMC,QAAQ,GAAG,IAAA,EAAA,CAAjB,SAAiB,CAAjB;AACA,MAAMC,OAAO,GAAG,IAAA,EAAA,CAAhB,WAAgB,CAAhB;AACA,SAAOJ,QAAQ,CAARA,GAAAA,CAAAA,QAAAA,EAAAA,GAAAA,CAAP,OAAOA,CAAP;AACD;;ACvBM,IAAMK,oBAAoB,GAA1B,uEAAA;AACA,IAAMC,kBAAkB,GAAxB,8EAAA;AACA,IAAMC,0BAA0B,GAAG;AACxCC,EAAAA,MAAM,EADkC,KAAA;AAExCC,EAAAA,WAAW,EAF6B,KAAA;AAGxCC,EAAAA,UAAU,EAAE;AAH4B,CAAnC;AAMA,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,UAAU,EADqB,WAAA;AAE/BC,EAAAA,oBAAoB,EAFW,qBAAA;AAG/BC,EAAAA,eAAe,EAHgB,oBAAA;AAI/BC,EAAAA,oBAAoB,EAAE;AAJS,CAA1B;AAOA,IAAMC,kBAAkB,GAAG;AAChCN,EAAAA,UAAU,EADsB,YAAA;AAEhCF,EAAAA,MAAM,EAF0B,QAAA;AAGhCS,EAAAA,YAAY,EAHoB,cAAA;AAIhCC,EAAAA,IAAI,EAAE;AAJ0B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHP,IAAaC,oBAAb,GAAA,aAAA,YAAA;AAOE,WAAkG,oBAAlG,CAAkG,IAAlG,EAAkG;AAAA,QAApF9C,sBAAoF,GAAA,IAAA,CAApFA,sBAAoF;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EANlD,IAMkD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAFpE,KAEoE,CAAA;;AAChG,SAAA,sBAAA,GAAA,sBAAA;AACD;;AATH,EAAA,YAAA,CAAA,oBAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,GAAA,EAWE,SAAiB,GAAjB,GAAiB;AACf,aAAO,KAAP,sBAAO,EAAP;AACD;AAbH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAeE,KAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAC4B,KAAA,aAAA,CAAA,OAAA,CAA8C;AAAEtF,kBAAAA,MAAM,EAAR,qBAAA;AAAiCF,kBAAAA,MAAM,EAAE;AAAzC,iBAA9C,CAD5B;;AAAA,mBAAA,CAAA;AACE,qBADF,WACE,GADF,QAAA,CAAA,IACE;AADF,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAEmC,KAFnC,uBAEmC,EAFnC;;AAAA,mBAAA,CAAA;AAEE,qBAFF,mBAEE,GAFF,QAAA,CAAA,IAEE;;AAFF,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;AAfF,OAeE,CAAA,CAfF;;AAAA,eAAA,IAAA,GAAA;AAAA,eAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,IAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,wBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAoBE,uBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,YAAA,iBAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,iBAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACO,KADP,WAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAC+B,IAAA,KAAA,CAD/B,8BAC+B,CAD/B;;AAAA,mBAAA,CAAA;AAAA,gBAAA,iBAEyC,GAAA,KAFzC,WAAA,EAEuBuI,IAFvB,GAAA,iBAAA,CAAA,WAAA,EAE6B3J,OAF7B,GAAA,iBAAA,CAAA,OAAA;AAGQ4J,gBAAAA,QAHR,GAGmB,KAAA,mBAAA,GAA2BC,QAAQ,CAAnC,MAAA,GAA6CA,QAAQ,CAHxE,MAGQD;AACAE,gBAAAA,iBAJR,GAI4B;AACxBH,kBAAAA,IAAI,EADoB,IAAA;AAExB3J,kBAAAA,OAAO,EAAEA,OAAO,KAAPA,SAAAA,GAAAA,CAAAA,GAA4BkG,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAFb,EAEaA,CAFb;AAGxB6D,kBAAAA,SAAS,EAAE/J,OAAO,KAAPA,SAAAA,GAAAA,CAAAA,GAA4BkG,MAAM,CAANA,QAAAA,CAAAA,OAAAA,EAHf,EAGeA,CAHf;AAIxB8D,kBAAAA,eAAe,EAAEJ;AAJO,iBAApBE;AAJR,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAUSG,MAAM,CAANA,MAAAA,CAVT,iBAUSA,CAVT,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AApBF,OAoBE,CAAA,CApBF;;AAAA,eAAA,sBAAA,GAAA;AAAA,eAAA,uBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,sBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,mBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,kBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAiCE,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,YAAA,cAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,2BAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACO,KADP,WAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAC+B,IAAA,KAAA,CAD/B,8BAC+B,CAD/B;;AAAA,mBAAA,CAAA;AAGQC,gBAAAA,cAHR,GAAA,eAAA,CAAA,EAAA,EAAA,QAAA,CAGQA;;AAHR,oBAAA,EAOMA,cAAc,CAAdA,KAAAA,KAPN,SAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAQkC,KAAA,aAAA,CAAA,OAAA,CAAmC;AAC/D5I,kBAAAA,MAAM,EADyD,yBAAA;AAE/DF,kBAAAA,MAAM,EAAE,CAAChE,QAAQ,CAAT,IAAA,EAAA,QAAA;AAFuD,iBAAnC,CARlC;;AAAA,mBAAA,CAAA;AAQI8M,gBAAAA,cAAc,CARlB,KAQIA,GARJ,SAAA,CAAA,IAQIA;;AARJ,mBAAA,CAAA;AAAA,oBAAA,EAaM,CAAC,KAAD,mBAAA,IAA6BA,cAAc,CAbjD,QAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAcI,oBAAIA,cAAc,CAAlB,YAAA,EAAiC,OAAOA,cAAc,CAArB,YAAA;AACjC,oBAAIA,cAAc,CAAlB,oBAAA,EAAyC,OAAOA,cAAc,CAflE,oBAe6C,CAf7C,CAAA;;AAAA,oBAiBSA,cAAc,CAjBvB,GAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAkBoC,KAAA,kBAAA,CAlBpC,cAkBoC,CAlBpC;;AAAA,mBAAA,EAAA;AAkBYC,gBAAAA,eAlBZ,GAAA,SAAA,CAAA,IAkBYA;;AACN,oBAAA,eAAA,EAAqB;AACnBD,kBAAAA,cAAc,CAAdA,QAAAA,GAAAA,eAAAA;AACD;;AArBP,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAuBMA,gBAAAA,cAAc,CAAdA,QAAAA,GAA0BA,cAAc,CAAxCA,GAAAA;;AAvBN,mBAAA,EAAA;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,cAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,oBA4BOA,cAAc,CA5BrB,GAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBA6BkC,KAAA,kBAAA,CA7BlC,cA6BkC,CA7BlC;;AAAA,mBAAA,EAAA;AA6BUC,gBAAAA,gBA7BV,GAAA,SAAA,CAAA,IA6BUA;;AACN,oBAAA,gBAAA,EAAqB;AACnBD,kBAAAA,cAAc,CAAdA,QAAAA,GAAAA,gBAAAA;AACD;;AAhCL,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAkCIA,gBAAAA,cAAc,CAAdA,QAAAA,GAA0BA,cAAc,CAAxCA,GAAAA;;AAlCJ,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAyCY,KAAA,iBAAA,CAzCZ,cAyCY,CAzCZ;;AAAA,mBAAA,EAAA;AAAA,gBAAA,qBAAA,GAAA,SAAA,CAAA,IAAA;AAsCcE,gBAAAA,eAtCd,GAAA,qBAAA,CAAA,QAsCcA;AACIC,gBAAAA,mBAvClB,GAAA,qBAAA,CAAA,YAuCkBA;AACQC,gBAAAA,2BAxC1B,GAAA,qBAAA,CAAA,oBAwC0BA;;AAGxB,oBAAI,KAAJ,mBAAA,EAA8B;AAC5B;AACA;AACA,sBAAIJ,cAAc,CAAdA,QAAAA,IAA2B,CAACA,cAAc,CAA1CA,YAAAA,IAA2D,CAACA,cAAc,CAA9E,oBAAA,EAAqG;AACnGA,oBAAAA,cAAc,CAAdA,YAAAA,GAA8BA,cAAc,CAA5CA,QAAAA;AAEAA,oBAAAA,cAAc,CAAdA,oBAAAA,GAAsCK,UAAU,CAC9C,OAAA,2BAAA,KAAA,QAAA,GAAkDtH,cAAc,CAAhE,2BAAgE,CAAhE,GAD8C,2BAAA,EAE9C,OAAOiH,cAAc,CAArB,QAAA,KAAA,QAAA,GAA8CjH,cAAc,CAACiH,cAAc,CAA3E,QAA4D,CAA5D,GAAwFA,cAAc,CAFlEK,QAAU,CAAVA,GAAAA,2BAAAA,GAKlCL,cAAc,CALlBA,QAAAA;AAHF,mBAAA,MASO;AACL,wBAAIG,mBAAmB,IAAI,CAACH,cAAc,CAA1C,YAAA,EAAyD;AACvD;AACA;AACAA,sBAAAA,cAAc,CAAdA,YAAAA,GAAAA,mBAAAA;AACD;;AAED,wBAAII,2BAA2B,IAAI,CAACJ,cAAc,CAAlD,oBAAA,EAAyE;AACvE;AACA;AACAA,sBAAAA,cAAc,CAAdA,oBAAAA,GAAAA,2BAAAA;AACD;;AAED,wBAAIE,eAAe,IAAI,CAACF,cAAc,CAAtC,YAAA,EAAqD;AACnD;AACA;AACA;AACAA,sBAAAA,cAAc,CAAdA,YAAAA,GAAAA,eAAAA;AACD;;AAED,wBAAIA,cAAc,CAAdA,YAAAA,IAA+B,CAACA,cAAc,CAAlD,oBAAA,EAAyE;AACvE;AACA;AACA;AACA;AACAA,sBAAAA,cAAc,CAAdA,oBAAAA,GAAsCA,cAAc,CAApDA,YAAAA;AACD;AAtCyB,mBAAA,CAAA;;;AA2C5B,yBAAOA,cAAc,CAArB,QAAA;AA3CF,iBAAA,MA4CO;AACL;AACA;AAEA,yBAAOA,cAAc,CAArB,oBAAA;AACA,yBAAOA,cAAc,CAArB,YAAA;AA5FJ,iBAAA,CAAA;AAgGE;AACA;AACA;;;AACA,oBAAIE,eAAe,IAAI,CAACF,cAAc,CAAlCE,QAAAA,IAA+C,CAACF,cAAc,CAA9DE,oBAAAA,IAAuF,CAACF,cAAc,CAA1G,YAAA,EAAyH;AACvHA,kBAAAA,cAAc,CAAdA,QAAAA,GAAAA,eAAAA;AACD;;AAEDA,gBAAAA,cAAc,CAAdA,IAAAA,GAAsB,KAAA,mBAAA,GAA2BpB,0BAA0B,CAArD,UAAA,GAAmEA,0BAA0B,CAAnHoB,MAAAA;AACAA,gBAAAA,cAAc,CAAdA,OAAAA,GAAyB,KAAA,WAAA,CAAzBA,OAAAA;AAxGF,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,cAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAjCF,OAAA,CAAA,CAAA;;AAAA,eAAA,iBAAA,CAAA,EAAA,EAAA;AAAA,eAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,0BAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UA6IU,yBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,YAAA,QAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACkB,KAAA,aAAA,CAAA,OAAA,CAAmC;AAAE5I,kBAAAA,MAAM,EAAR,cAAA;AAA0BF,kBAAAA,MAAM,EAAE;AAAlC,iBAAnC,CADlB;;AAAA,mBAAA,CAAA;AACAoJ,gBAAAA,QADA,GAAA,SAAA,CAAA,IACAA;AADA,uBAEC,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACLA,kBAAAA,QAAQ,EAAEhG,eAAe,CAAfA,QAAe,CAAfA,CAAAA,QAAAA;AADL,iBAAA,CAFD;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AA7IV,OA6IU,CAAA,CA7IV;;AAAA,eAAA,wBAAA,GAAA;AAAA,eAAA,yBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,wBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,yBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAoJU,wBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,YAAA,WAAA,EAAA,eAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACoB,KAAA,aAAA,CAAA,OAAA,CAAkC;AAAElD,kBAAAA,MAAM,EAAR,sBAAA;AAAkCF,kBAAAA,MAAM,EAAE,CAAA,QAAA,EAAA,KAAA;AAA1C,iBAAlC,CADpB;;AAAA,mBAAA,CAAA;AACAqJ,gBAAAA,WADA,GAAA,SAAA,CAAA,IACAA;AACAC,gBAAAA,eAFA,GAEkBD,WAAW,IAAIA,WAAW,CAAXA,aAAAA,KAFjC,SAEAC;AAFA,uBAIC,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAC,CAJF,eAIC,CAJD;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AApJV,OAoJU,CAAA,CApJV;;AAAA,eAAA,uBAAA,GAAA;AAAA,eAAA,wBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,uBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,yBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UA2JU,wBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,YAAA,wBAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACD,KADC,WAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBACuB,IAAA,KAAA,CADvB,8BACuB,CADvB;;AAAA,mBAAA,CAAA;AAEAC,gBAAAA,wBAFA,GAE2B,KAAA,WAAA,CAAA,OAAA,KAF3B,KAEAA;AAEA3K,gBAAAA,OAJA,GAIUkG,MAAM,CAANA,QAAAA,CAAgB,KAAA,WAAA,CAAhBA,OAAAA,EAJV,EAIUA,CAAVlG;AAJA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;;AAAA,oBAAA,CASA,KATA,mBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAWsB4K,wBAAwB,CAAC/B,kBAAkB,CAAlBA,OAAAA,CAAAA,YAAAA,EAAAA,GAAAA,MAAAA,CAX/C,OAW+CA,CAAAA,CAAD,CAX9C;;AAAA,mBAAA,CAAA;AAWIpE,gBAAAA,SAXJ,GAAA,SAAA,CAAA,IAWIA;AACNoG,gBAAAA,OAAO,GAAG;AACRC,kBAAAA,eAAe,EADP,SAAA;AAERC,kBAAAA,eAAe,EAAExB,kBAAkB,CAACN;AAF5B,iBAAV4B;AAZE,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,oBAAA,CAAA,wBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAiBsBG,4BAA4B,CAACpC,oBAAoB,CAApBA,OAAAA,CAAAA,YAAAA,EAAAA,GAAAA,MAAAA,CAjBnD,OAiBmDA,CAAAA,CAAD,CAjBlD;;AAAA,mBAAA,EAAA;AAiBInE,gBAAAA,UAjBJ,GAAA,SAAA,CAAA,IAiBIA;AACNoG,gBAAAA,OAAO,GAAG;AACRC,kBAAAA,eAAe,EADP,UAAA;AAERC,kBAAAA,eAAe,EAAExB,kBAAkB,CAACR;AAF5B,iBAAV8B;AAlBE,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,sBAuBI,IAAA,KAAA,CAvBJ,oDAuBI,CAvBJ;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBA2BsB,KA3BtB,wBA2BsB,EA3BtB;;AAAA,mBAAA,EAAA;AA2BIpG,gBAAAA,WA3BJ,GAAA,SAAA,CAAA,IA2BIA;AACNoG,gBAAAA,OAAO,GAAG;AACRC,kBAAAA,eAAe,EADP,WAAA;AAERC,kBAAAA,eAAe,EAAExB,kBAAkB,CAACC;AAF5B,iBAAVqB;AA5BE,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA;AAAA,sBAiCI,IAAA,KAAA,CAAwD,6CAAA,MAAA,CAAA,SAAA,CAAA,EAAA,CAjC5D,OAiC4D,CAAxD,CAjCJ;;AAAA,mBAAA,EAAA;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AA3JV,OA2JU,CAAA,CA3JV;;AAAA,eAAA,uBAAA,GAAA;AAAA,eAAA,wBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,uBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,mBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,kBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAkMU,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,YAAA,qBAAA,EAAA,eAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,6BAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,QAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBAAA,EAGD,CAAC,KAAD,mBAAA,IAA6BzN,QAAQ,CAAtC,QAAC,IAAoD,KAAA,mBAAA,IAA4BA,QAAQ,CAApC,YAAA,IAAqDA,QAAQ,CAHhH,oBAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,EAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAQ+C,KAR/C,uBAQ+C,EAR/C;;AAAA,mBAAA,CAAA;AAAA,gBAAA,qBAAA,GAAA,SAAA,CAAA,IAAA;AAQI0N,gBAAAA,eARJ,GAAA,qBAAA,CAAA,eAQIA;AAAiBC,gBAAAA,eARrB,GAAA,qBAAA,CAAA,eAQqBA;;AARrB,oBAAA,EASA,KAAA,mBAAA,IAA4BA,eAAe,KAAKxB,kBAAkB,CATlE,UAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,qBAUgFuB,GAAAA,eAVhF,CAAA,MAAA;AAUF,gBAAA,qBAAA,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAkB/F,gBAAAA,6BAVhB,GAUgBA,qBAAAA,CAVhB,6BAUgBA,EAA+BC,qBAV/C,GAAA,qBAAA,CAAA,qBAUgBD;;AAVhB,oBAYEA,EAAAA,6BAA6B,IAZ/B,qBAYEA,CAZF,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,uBAaO,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACLkG,kBAAAA,YAAY,EAAE9C,YAAY,CAAC7D,eAAe,CADrC,qBACqC,CAAhB,CADrB;AAEL4G,kBAAAA,oBAAoB,EAAE/C,YAAY,CAAC7D,eAAe,CAAhB,6BAAgB,CAAhB;AAF7B,iBAAA,CAbP;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,oBAAA,EAkBOyG,eAAe,KAAKxB,kBAAkB,CAlB7C,MAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,uBAqBK,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACLiB,kBAAAA,QAAQ,EAAErC,YAAY,CAAC7D,eAAe,CAAEwG,eAAiC,CAAnD,MAAgB,CAAhB;AADjB,iBAAA,CArBL;;AAAA,mBAAA,EAAA;AAAA,oBAAA,EAwBOC,eAAe,KAAKxB,kBAAkB,CAxB7C,YAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,uBA2BK,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACLiB,kBAAAA,QAAQ,EAAErC,YAAY,CAAC7D,eAAe,CAAEwG,eAAmC,CAArD,QAAgB,CAAhB;AADjB,iBAAA,CA3BL;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAgCJlJ,gBAAAA,GAAG,CAAHA,KAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;AAhCI,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAmCqB,KAnCrB,wBAmCqB,EAnCrB;;AAAA,mBAAA,EAAA;AAAA,gBAAA,qBAAA,GAAA,SAAA,CAAA,IAAA;AAmCE4I,gBAAAA,QAnCF,GAAA,qBAAA,CAAA,QAmCEA;AAnCF,uBAqCC,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AAAEA,kBAAAA,QAAQ,EAAErC,YAAY,CAAC7D,eAAe,CAAhB,QAAgB,CAAhB;AAAxB,iBAAA,CArCD;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAlMV,OAAA,CAAA,CAAA;;AAAA,eAAA,iBAAA,CAAA,GAAA,EAAA;AAAA,eAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CA0OU,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,YAAA,QAAA,EAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACAlH,gBAAAA,QADA,GAAA,eAAA,CAAA,EAAA,EAAA,MAAA,CACAA,CADA,CAGN;AACA;AACA;AACA;AACA;;AACA,uBAAOA,QAAQ,CAAf,QAAA;AACA,uBAAOA,QAAQ,CAAf,YAAA;AACA,uBAAOA,QAAQ,CAAf,oBAAA;AAVM,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAWa,KAAA,aAAA,CAAA,OAAA,CAAmC;AAAEkE,kBAAAA,MAAM,EAAR,iBAAA;AAA6BF,kBAAAA,MAAM,EAAE,CAAA,QAAA;AAArC,iBAAnC,CAXb;;AAAA,mBAAA,CAAA;AAWA+J,gBAAAA,GAXA,GAAA,SAAA,CAAA,IAWAA;AAXA,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AA1OV,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,GAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,gBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAyPU,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,YAAA,KAAA,EAAA,eAAA,EAAA,eAAA,EAAA,eAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAIe,KAAA,aAAA,CAAA,OAAA,CAAkC;AAAE7J,kBAAAA,MAAM,EAAR,sBAAA;AAAkCF,kBAAAA,MAAM,EAAE,CAAA,QAAA,EAAA,KAAA;AAA1C,iBAAlC,CAJf;;AAAA,mBAAA,CAAA;AAIAgK,gBAAAA,KAJA,GAAA,SAAA,CAAA,IAIAA,CAJA,CAKN;;AACMC,gBAAAA,eANA,GAMkBC,OAAO,CAACF,KAAK,CAN/B,QAMyB,CAAzBC;AACAE,gBAAAA,eAPA,GAOkBjD,oBAAoB,CAAA,eAAA,EAAA,EAAA,EAPtC,EAOsC,CAAtCiD;AACFC,gBAAAA,eARE,GAQgBC,OAAO,CARvB,eAQuB,CAAzBD;AARE,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAWoB,KAAA,aAAA,CAXpB,MAWoB,CAXpB;;AAAA,mBAAA,CAAA;AAWJA,gBAAAA,eAXI,GAAA,SAAA,CAAA,IAWJA;AAXI,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAaJ5J,gBAAAA,GAAG,CAAHA,IAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;AAbI,mBAAA,EAAA;AAAA,uBAeC,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AAAE8J,kBAAAA,aAAa,EAAEN,KAAK,CAAtB,QAAA;AAA2CI,kBAAAA,eAAe,EAAfA;AAA3C,iBAAA,CAfD;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAzPV,OAAA,CAAA,CAAA;;AAAA,eAAA,eAAA,CAAA,GAAA,EAAA;AAAA,eAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,eAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EA2QU,SAAaG,YAAb,CAAA,kBAAA,EAAA,gBAAA,EAAmF;AAAA,UAAhBC,UAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,GAAG;AACzF,UAAMC,iBAAiB,GAAGP,OAAO,CAAjC,kBAAiC,CAAjC;AACA,UAAMQ,eAAe,GAAGR,OAAO,CAA/B,gBAA+B,CAA/B;AACA,UAAMS,eAAe,GAAGD,eAAe,CAAfA,IAAAA,CAAxB,GAAwBA,CAAxB;AACA,UAAME,kBAAkB,GAAGH,iBAAiB,CAAjBA,IAAAA,CAJ8D,UAI9DA,CAA3B,CAJyF,CAAA;;AAOzF,UAAIA,iBAAiB,CAAjBA,EAAAA,CAAJ,eAAIA,CAAJ,EAA2C,OAAOJ,OAAO,CAPgC,iBAOhC,CAAd,CAP8C,CAAA;;AASzF,UAAIO,kBAAkB,CAAlBA,EAAAA,CAAJ,eAAIA,CAAJ,EAA4C,OAAOP,OAAO,CAT+B,kBAS/B,CAAd,CAT6C,CAAA;;AAWzF,aAAOA,OAAO,CAAd,eAAc,CAAd;AACD;AAvRH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,8BAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,6BAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAyRU,SAAA,SAAA,CAAA,YAAA,EAAA;AAAA,YAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,WAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAIE/N,gBAAAA,IAJF,GAIewO,YAJf,CAAA,IAIExO,EAAMuO,EAJR,GAIeC,YAJf,CAAA,EAIExO;AACJ2D,gBAAAA,IALE,GAAA,EAKFA;;AALE,oBASF3D,EAAAA,IAAI,IAAI,CATN,EASFA,CATE,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAUJyO,gBAAAA,UAAU,GAAGjD,iBAAiB,CAA9BiD,eAAAA;AAVI,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,CAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAaY,KAAA,aAAA,CAAA,OAAA,CAAmC;AAAE7K,kBAAAA,MAAM,EAAR,aAAA;AAAyBF,kBAAAA,MAAM,EAAE,CAAA,EAAA,EAAA,QAAA;AAAjC,iBAAnC,CAbZ;;AAAA,mBAAA,CAAA;AAaFC,gBAAAA,IAbE,GAAA,UAAA,CAAA,IAaFA;AAbE,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,mBAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,EAAA,GAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAeFO,gBAAAA,GAAG,CAAHA,IAAAA,CAAAA,UAAAA,CAAAA,EAAAA;;AAfE,mBAAA,EAAA;AAiBEwK,gBAAAA,WAjBF,GAiBgB,CAAA,IAAA,IAAS/K,IAAI,KAAb,IAAA,IAA0BA,IAAI,KAjB9C,KAiBE+K;AAEND,gBAAAA,UAAU,GAAGC,WAAW,GAAGlD,iBAAiB,CAApB,UAAA,GAAkCA,iBAAiB,CAA3EiD,oBAAAA;;AAnBI,mBAAA,EAAA;AAAA,uBAsBC,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AAAEE,kBAAAA,mBAAmB,EAArB,UAAA;AAAmChL,kBAAAA,IAAI,EAAJA;AAAnC,iBAAA,CAtBD;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAzRV,OAAA,CAAA,CAAA;;AAAA,eAAA,4BAAA,CAAA,GAAA,EAAA;AAAA,eAAA,6BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,4BAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,oBAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,mBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAkTU,SAAA,SAAA,CAAA,QAAA,EAAA;AAAA,YAAA,qBAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,qBAAA,EAAA,aAAA,EAAA,eAAA,EAAA,QAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBACgC,KAAA,4BAAA,CAAuCjE,eAAAA,CAAAA,EAAAA,EADvE,QACuEA,CAAvC,CADhC;;AAAA,mBAAA,CAAA;AAAA,gBAAA,qBAAA,GAAA,UAAA,CAAA,IAAA;AACEiP,gBAAAA,mBADF,GAAA,qBAAA,CAAA,mBACEA;;AADF,oBAGFjP,CAAAA,QAAQ,CAHN,GAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,uBAIGA,UAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,QAAQ,CAJX,GAIGA,CAJH;;AAAA,mBAAA,CAAA;AAAA,oBAOFA,EAAAA,QAAQ,CAARA,EAAAA,IAAeiP,mBAAmB,KAAKnD,iBAAiB,CAPtD,UAOF9L,CAPE,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,oBASAA,CAAAA,QAAQ,CATR,IAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAUIkP,KAAK,CAVT,iEAUS,CAVT;;AAAA,mBAAA,CAAA;AAaEC,gBAAAA,mBAbF,GAAA,KAaEA,CAbF,CAeJ;;AAfI,uBAgBGpE,UAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,YAAY,CAACoE,mBAAmB,CAAnBA,QAAAA,CAhBhB,EAgBgBA,CAAD,CAAZpE,CAhBH;;AAAA,mBAAA,EAAA;AAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAmB2C,KAAA,eAAA,CAnB3C,QAmB2C,CAnB3C;;AAAA,mBAAA,EAAA;AAAA,gBAAA,qBAAA,GAAA,UAAA,CAAA,IAAA;AAmBEuD,gBAAAA,aAnBF,GAAA,qBAAA,CAAA,aAmBEA;AAAeF,gBAAAA,eAnBjB,GAAA,qBAAA,CAAA,eAmBiBA,CAnBjB,CAqBN;;AACMgB,gBAAAA,QAtBA,GAsBW,KAAA,YAAA,CAAkBrE,YAAY,CAA9B,eAA8B,CAA9B,EAtBX,aAsBW,CAAXqE;AAtBA,uBAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,UAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA;AAlTV,OAAA,CAAA,CAAA;;AAAA,eAAA,kBAAA,CAAA,GAAA,EAAA;AAAA,eAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,kBAAA;AAAA,KAAA;AAAA,GAAA,CAAA,CAAA;;AAAA,SAAA,oBAAA;AAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA,IAAaC,0BAAb,GAAA,aAAA,UAAA,aAAA,EAAA;AAAA,EAAA,SAAA,CAAA,0BAAA,EAAA,aAAA,CAAA;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,0BAAA,CAAA;;AACE,WAA8G,0BAA9G,CAA8G,IAA9G,EAA8G;AAAA,QAAhG7L,MAAgG,GAAA,IAAA,CAAhGA,MAAgG;AAAA,QAAxFC,KAAwF,GAAA,IAAA,CAAxFA,KAAwF;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,0BAAA,CAAA;;AAAA,WACtG,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAED,MAAAA,MAAM,EAAE;AAAEE,QAAAA,WAAW,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAOF,MAAM,CAAb,WAAA,CAAA,EAAA,EAAA,EAAA;AAA2BG,UAAAA,cAAc,EAAEC,gBAAgB,CAACC;AAA5D,SAAA;AAAb,OAAV;AAA+FJ,MAAAA,KAAK,EAALA;AAA/F,KAAA,CADsG;AAE7G;;AAHH,EAAA,YAAA,CAAA,0BAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAcS,OAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACA,KAAA,KAAA,CADA,UAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAEG,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAE5D,kBAAAA,OAAO,EAAT,2EAAA;AAAwFoE,kBAAAA,IAAI,EAAE;AAA9F,iBAA1B,CAFH;;AAAA,mBAAA,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAGC,KAAA,aAAA,CAAmB,KAAA,KAAA,CAHpB,UAGC,CAHD;;AAAA,mBAAA,CAAA;AAAA,uBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAIE,KAAA,oBAAA,CAAA,OAAA,CAAkC;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAlC,CAJF,CAAA;;AAAA,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA;AAdT,OAcS,CAAA,CAdT;;AAAA,eAAA,MAAA,GAAA;AAAA,eAAA,OAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,MAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAqBS,SAAA,QAAA,CAAA,OAAA,EAAA;AAAA,YAAA,WAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,QAAA;;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACCgF,gBAAAA,WADD,GACe,IAAA,oBAAA,CAAyB;AAC3CM,kBAAAA,sBAAsB,EAAE,KAAA,sBAAA,CAAA,IAAA,CAAA,IAAA;AADmB,iBAAzB,CAAdN;AAGAvH,gBAAAA,gBAJD,GAIoBkD,mBAAmB,CAAC;AAC3CqE,kBAAAA,WAAW,EADgC,WAAA;AAE3CK,kBAAAA,OAAO,EAFoC,OAAA;AAG3CC,kBAAAA,sBAAsB,EAAE,KAAA,sBAAA,CAAA,IAAA,CAAA,IAAA;AAHmB,iBAAD,CAAtC7H;AAKAC,gBAAAA,aATD,GASiBkD,mBAAmB,CATpC,gBASoC,CAAnClD;AACA0N,gBAAAA,qBAVD,GAUyB,KAVzB,wBAUyB,EAAxBA;AACAvK,gBAAAA,MAXD,GAWU,IAXV,UAWU,EAATA,CAXD,CAYL;;AAZK,gBAAA,oBAayBC,GAAAA,mBAAmB,CAAC,KAAA,MAAA,CAb7C,WAa4C,CAb5C,EAaG/B,iBAbH,GAAA,oBAAA,CAAA,iBAAA;AAcL8B,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,aAAAA;AACAA,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,qBAAAA;AACAA,gBAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,oBAAY,EAAZA;AACAA,gBAAAA,MAAM,CAANA,IAAAA,CAAAA,iBAAAA;AACME,gBAAAA,QAlBD,GAkBYC,kBAAkB,CAlB9B,MAkB8B,CAA7BD;AACN,qBAAA,yBAAA,CAAA,QAAA;AAnBK,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAoBCiE,WAAW,CApBZ,IAoBCA,EApBD;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAqBC,KArBD,aAqBC,EArBD;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AArBT,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,EAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CA6CS,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,YAAA,WAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACA,KADA,oBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBACiC,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAErJ,kBAAAA,OAAO,EAAT,6BAAA;AAA0CoE,kBAAAA,IAAI,EAAE;AAAhD,iBAA1B,CADjC;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAEqB,KAAA,oBAAA,CAAA,OAAA,CAAmD;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAAnD,CAFrB;;AAAA,mBAAA,CAAA;AAECqL,gBAAAA,WAFD,GAAA,SAAA,CAAA,IAECA;;AAFD,oBAAA,EAGDA,WAAW,KAAKvL,MAAM,CAHrB,UAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAIG,KAAA,aAAA,CAAmBA,MAAM,CAJ5B,UAIG,CAJH;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAKH,KALG,oBAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAMe,KAAA,oBAAA,CAAA,OAAA,CAAqD;AAAEE,kBAAAA,MAAM,EAAE;AAAV,iBAArD,CANf;;AAAA,mBAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,IAAA;AAAA,gBAAA,SAAA,CAAA,EAAA,GAAA;AAMDzE,kBAAAA,QANC,EAAA,SAAA,CAAA;AAAA,iBAAA;;AAAA,gBAAA,SAKuB+P,CAAAA,EALvB,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,SAAA,CAAA,EAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AA7CT,OAAA,CAAA,CAAA;;AAAA,eAAA,aAAA,CAAA,GAAA,EAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAAA,YAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAwDS,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,YAAA,WAAA,EAAA,OAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACA,KADA,oBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBACiC,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAE3P,kBAAAA,OAAO,EAAT,6BAAA;AAA0CoE,kBAAAA,IAAI,EAAE;AAAhD,iBAA1B,CADjC;;AAAA,mBAAA,CAAA;AAECP,gBAAAA,WAFD,GAEe,KAAA,cAAA,CAAoBM,MAAM,CAFzC,OAEe,CAAdN;AACN,qBAAA,MAAA,CAAY;AACVd,kBAAAA,OAAO,EAAE;AADC,iBAAZ;AAGA,qBAAA,SAAA,CAAe;AAAEc,kBAAAA,WAAW,EAAXA;AAAF,iBAAf;AANK,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAOiB,KAAA,oBAAA,CAAA,OAAA,CAAmD;AAAEQ,kBAAAA,MAAM,EAAE;AAAV,iBAAnD,CAPjB;;AAAA,mBAAA,CAAA;AAOCqF,gBAAAA,OAPD,GAAA,SAAA,CAAA,IAOCA;AAPD,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,uBAQC,KAAA,aAAA,CARD,OAQC,CARD;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAxDT,OAAA,CAAA,CAAA;;AAAA,eAAA,WAAA,CAAA,GAAA,EAAA;AAAA,eAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,YAAA;AAAA,UAmEY,cAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,YAAA,OAAA,EAAA,OAAA;AAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,oBACH,KADG,oBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAC8B,SAAS,CAAT,QAAA,CAAA,MAAA,CAA0B;AAAE1J,kBAAAA,OAAO,EAAT,6BAAA;AAA0CoE,kBAAAA,IAAI,EAAE;AAAhD,iBAA1B,CAD9B;;AAAA,mBAAA,CAAA;AAEArB,gBAAAA,OAFA,GAEY,KAAA,MAAA,CAFZ,WAEY,CAFZ,OAEAA;;AAFA,oBAAA,OAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAGY7C,SAAS,CAATA,GAAAA,CAAAA,aAAAA,CAHZ,yCAGYA,CAHZ;;AAAA,mBAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAIc,KAAA,oBAAA,CAAA,OAAA,CAAoD;AACxEmE,kBAAAA,MAAM,EADkE,aAAA;AAExEF,kBAAAA,MAAM,EAAE;AAFgE,iBAApD,CAJd;;AAAA,mBAAA,CAAA;AAIFyL,gBAAAA,OAJE,GAAA,SAAA,CAAA,IAIFA;;AAJE,oBAAA,EASJC,QAAQ,CAAA,OAAA,EAARA,EAAQ,CAARA,KAA0BA,QAAQ,CAAA,OAAA,EAT9B,EAS8B,CAT9B,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,sBASmD3P,SAAS,CAATA,QAAAA,CAAAA,iBAAAA,CAAAA,oCAAAA,MAAAA,CATnD,OASmDA,CAAAA,CATnD;;AAAA,mBAAA,EAAA;AAUR,oBAAI,KAAA,KAAA,CAAA,OAAA,KAAJ,OAAA,EAAoC;AAClC,uBAAA,oBAAA,CAAA,IAAA,CAAA,cAAA,EAAA,OAAA;;AACA,uBAAA,oBAAA,CAAA,IAAA,CAAA,SAAA,EAA0C;AAAE6C,oBAAAA,OAAO,EAAPA;AAAF,mBAA1C;AACD;;AACD,qBAAA,MAAA,CAAY;AAAEA,kBAAAA,OAAO,EAAPA;AAAF,iBAAZ;AAdQ,uBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAAA;;AAAA,mBAAA,EAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAnEZ,OAmEY,CAAA,CAnEZ;;AAAA,eAAA,aAAA,GAAA;AAAA,eAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,0BAAA;AAAA,IAAA,KAAA,EAqFU,SAAwB,wBAAxB,GAAwB;AAAA,UAAA,KAAA,GAAA,IAAA;;AAC9B,UAAM+M,mBAAmB,GAAyB;AAChD1N,QAAAA,QAAQ,EAAA,YAAA;AAAA,cAAA,SAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,gBAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,cAAA;AAAA,mBAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AACAW,oBAAAA,OADA,GACmEoB,MADnE,CAAA,OACApB,EAAS0B,SADT,GACmEN,MADnE,CAAA,SACApB,EAAoB2B,OADpB,GACmEP,MADnE,CAAA,OACApB,EAA6BgN,iBAD7B,GACmE5L,MADnE,CAAA,iBACApB,EAAgDiN,cADhD,GACmE7L,MADnE,CAAA,cACApB;;AACR,oBAAA,KAAI,CAAJ,QAAA,CAAc;AACZe,sBAAAA,cAAc,EADF,QAAA;AAEZf,sBAAAA,OAAO,EAFK,OAAA;AAGZkN,sBAAAA,MAAM,EAAE,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAd,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,MAAA,KAHI,KAAA;AAIZC,sBAAAA,UAAU,EAAE,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAd,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,IAAA,KAJA,OAAA;AAKZ1L,sBAAAA,WAAW,EALC,SAAA;AAMZxB,sBAAAA,SAAS,EAAE0B,OAAO,CANN,CAMM,CANN;AAOZyL,sBAAAA,aAAa,EAAE,CAAA,iBAAiB,KAAjB,IAAA,IAAA,iBAAiB,KAAjB,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAiB,CAAjB,CAAiB,CAAjB,KAA0B;AAP7B,qBAAd;;AAFQ,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,QAAA,CAAA;AAAF,WAAA,CAAA,CAAA;;AAAA,mBAAA,QAAA,CAAA,GAAA,EAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,iBAAA,QAAA;AADwC,SACxC,EADwC;AAahD9N,QAAAA,WAAW,EAAA,YAAA;AAAA,cAAA,aAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,gBAAA,OAAA;AAAA,mBAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AACHU,oBAAAA,OADG,GACSoB,MADT,CAAA,OACHpB;AADG,oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,2BAEL,KAAI,CAAJ,WAAA,CAAiB;AAAEA,sBAAAA,OAAO,EAAPA;AAAF,qBAAjB,CAFK;;AAAA,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,QAAA,CAAA;AAAF,WAAA,CAAA,CAAA;;AAAA,mBAAA,WAAA,CAAA,GAAA,EAAA;AAAA,mBAAA,aAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,iBAAA,WAAA;AAAA,SAAA;AAbqC,OAAlD;AAkBA,UAAM0M,qBAAqB,GAAGtN,2BAA2B,CAAzD,mBAAyD,CAAzD;AACA,aAAA,qBAAA;AACD;AA1GH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,sBAAA;AAAA,IAAA,KAAA,EA4GU,SAAoB,oBAApB,GAAoB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC1B,UAAMiO,eAAe,GAAqB;AACxC1N,QAAAA,gBAAgB,EAAA,YAAA;AAAA,cAAA,iBAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,gBAAA,UAAA;AAAA,mBAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AACR0H,oBAAAA,UADQ,GACOjG,MADP,CAAA,UACRiG;AADQ,oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,2BAEV,MAAI,CAAJ,aAAA,CAAmB;AAAEA,sBAAAA,UAAU,EAAVA;AAAF,qBAAnB,CAFU;;AAAA,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,QAAA,CAAA;AAAF,WAAA,CAAA,CAAA;;AAAA,mBAAA,gBAAA,CAAA,GAAA,EAAA;AAAA,mBAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,iBAAA,gBAAA;AAAA,SAAA;AADwB,OAA1C;AAMA,aAAOiG,uBAAuB,CAA9B,eAA8B,CAA9B;AACD;AApHH,GAAA,CAAA,CAAA;;AAAA,SAAA,0BAAA;AAAA,CAAA,CAAA,YAAA,CAAA;;gBAAab,0B,EAAAA,qB,EAAAA,aAAAA,YAAAA;AAKyB,MAAA,KAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,MAAA,EAAA;AAAA,QAAA,eAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAI5BtL,YAAAA,eAJ4B,GAIV,IAAA,0BAAA,CAA+B;AAAEP,cAAAA,MAAM,EAAE;AAAEE,gBAAAA,WAAW,EAAEM,MAAM,CAACN;AAAtB;AAAV,aAA/B,CAAlBK;AAJ4B,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAK5BA,eAAe,CAAfA,aAAAA,CAA8BC,MAAM,CALR,OAK5BD,CAL4B;;AAAA,eAAA,CAAA;AAAA,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,eAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA;GAAA,CAAA,CAAA;;;;;CALzBsL,E","sourcesContent":["import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletInitializationError, isHexStrict, WalletLoginError, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, typedSignatureHash, personalSign, signTypedData, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { stripHexPrefix, isValidAddress, privateToAddress, addHexPrefix, BN } from 'ethereumjs-util';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport { get } from '@toruslabs/http-helpers';\nimport assert from 'assert';\nimport jsonschema from 'jsonschema';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport Common, { Hardfork } from '@ethereumjs/common';\n\nfunction ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  var getAccounts = _ref.getAccounts,\n      getPrivateKey = _ref.getPrivateKey,\n      processDecryptMessage = _ref.processDecryptMessage,\n      processEncryptionPublicKey = _ref.processEncryptionPublicKey,\n      processEthSignMessage = _ref.processEthSignMessage,\n      processPersonalMessage = _ref.processPersonalMessage,\n      processTransaction = _ref.processTransaction,\n      processSignTransaction = _ref.processSignTransaction,\n      processTypedMessage = _ref.processTypedMessage,\n      processTypedMessageV3 = _ref.processTypedMessageV3,\n      processTypedMessageV4 = _ref.processTypedMessageV4;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  function validateAndNormalizeKeyholder(_x, _x2) {\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  } //\n  // account lookups\n  //\n\n\n  function _validateAndNormalizeKeyholder() {\n    _validateAndNormalizeKeyholder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, req) {\n      var accounts, normalizedAccounts, normalizedAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof address === \"string\" && address.length > 0)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return getAccounts(req);\n\n            case 3:\n              accounts = _context.sent;\n              normalizedAccounts = accounts.map(function (_address) {\n                return _address.toLowerCase();\n              });\n              normalizedAddress = address.toLowerCase();\n\n              if (!normalizedAccounts.includes(normalizedAddress)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", normalizedAddress);\n\n            case 8:\n              throw ethErrors.rpc.invalidParams({\n                message: \"Invalid parameters: must provide an Ethereum address.\"\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _validateAndNormalizeKeyholder.apply(this, arguments);\n  }\n\n  function lookupAccounts(_x3, _x4) {\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function _lookupAccounts() {\n    _lookupAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              res.result = _context2.sent;\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _lookupAccounts.apply(this, arguments);\n  }\n\n  function lookupDefaultAccount(_x5, _x6) {\n    return _lookupDefaultAccount.apply(this, arguments);\n  } //\n  // transaction signatures\n  //\n\n\n  function _lookupDefaultAccount() {\n    _lookupDefaultAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getAccounts(req);\n\n            case 2:\n              accounts = _context3.sent;\n              res.result = accounts[0] || null;\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _lookupDefaultAccount.apply(this, arguments);\n  }\n\n  function sendTransaction(_x7, _x8) {\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function _sendTransaction() {\n    _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (processTransaction) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context4.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context4.sent;\n              _context4.next = 8;\n              return processTransaction(txParams, req);\n\n            case 8:\n              res.result = _context4.sent;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _sendTransaction.apply(this, arguments);\n  }\n\n  function signTransaction(_x9, _x10) {\n    return _signTransaction.apply(this, arguments);\n  } //\n  // message signatures\n  //\n\n\n  function _signTransaction() {\n    _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n      var txParams;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (processSignTransaction) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              txParams = req.params[0] || {\n                from: \"\"\n              };\n              _context5.next = 5;\n              return validateAndNormalizeKeyholder(txParams.from, req);\n\n            case 5:\n              txParams.from = _context5.sent;\n              _context5.next = 8;\n              return processSignTransaction(txParams, req);\n\n            case 8:\n              res.result = _context5.sent;\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _signTransaction.apply(this, arguments);\n  }\n\n  function ethSign(_x11, _x12) {\n    return _ethSign.apply(this, arguments);\n  }\n\n  function _ethSign() {\n    _ethSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res) {\n      var address, message, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (processEthSignMessage) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context6.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context6.sent;\n              message = req.params[1];\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context6.next = 10;\n              return processEthSignMessage(msgParams, req);\n\n            case 10:\n              res.result = _context6.sent;\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _ethSign.apply(this, arguments);\n  }\n\n  function signTypedData(_x13, _x14) {\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function _signTypedData() {\n    _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req, res) {\n      var message, address, version, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (processTypedMessage) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              message = req.params[0];\n              _context7.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context7.sent;\n              version = \"V1\";\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              });\n              _context7.next = 11;\n              return processTypedMessage(msgParams, req, version);\n\n            case 11:\n              res.result = _context7.sent;\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _signTypedData.apply(this, arguments);\n  }\n\n  function signTypedDataV3(_x15, _x16) {\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function _signTypedDataV() {\n    _signTypedDataV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (processTypedMessageV3) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context8.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context8.sent;\n              message = req.params[1];\n              version = \"V3\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context8.next = 10;\n              return processTypedMessageV3(msgParams, req, version);\n\n            case 10:\n              res.result = _context8.sent;\n\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _signTypedDataV.apply(this, arguments);\n  }\n\n  function signTypedDataV4(_x17, _x18) {\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function _signTypedDataV2() {\n    _signTypedDataV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(req, res) {\n      var address, message, version, msgParams;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (processTypedMessageV4) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context9.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context9.sent;\n              message = req.params[1];\n              version = \"V4\";\n              msgParams = {\n                data: message,\n                from: address,\n                version: version\n              };\n              _context9.next = 10;\n              return processTypedMessageV4(msgParams, req, version);\n\n            case 10:\n              res.result = _context9.sent;\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _signTypedDataV2.apply(this, arguments);\n  }\n\n  function personalSign(_x19, _x20) {\n    return _personalSign.apply(this, arguments);\n  }\n\n  function _personalSign() {\n    _personalSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(req, res) {\n      var firstParam, secondParam, extraParams, address, message, warning, msgParams;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (processPersonalMessage) {\n                _context10.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              // process normally\n              firstParam = req.params[0];\n              secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n              extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n              // To gracefully respect users who adopted this API early,\n              // we are currently gracefully recovering from the wrong param order\n              // when it is clearly identifiable.\n              //\n              // That means when the first param is definitely an address,\n              // and the second param is definitely not, but is hex.\n\n              if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n                warning = \"The eth_personalSign method requires params ordered \";\n                warning += \"[message, address]. This was previously handled incorrectly, \";\n                warning += \"and has been corrected automatically. \";\n                warning += \"Please switch this param order for smooth behavior in the future.\";\n                res.warning = warning;\n                address = firstParam;\n                message = secondParam;\n              } else {\n                message = firstParam;\n                address = secondParam;\n              }\n\n              _context10.next = 8;\n              return validateAndNormalizeKeyholder(address, req);\n\n            case 8:\n              address = _context10.sent;\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: message\n              }); // eslint-disable-next-line require-atomic-updates\n\n              _context10.next = 12;\n              return processPersonalMessage(msgParams, req);\n\n            case 12:\n              res.result = _context10.sent;\n\n            case 13:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _personalSign.apply(this, arguments);\n  }\n\n  function encryptionPublicKey(_x21, _x22) {\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function _encryptionPublicKey() {\n    _encryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(req, res) {\n      var address;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (processEncryptionPublicKey) {\n                _context11.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              _context11.next = 4;\n              return validateAndNormalizeKeyholder(req.params[0], req);\n\n            case 4:\n              address = _context11.sent;\n              _context11.next = 7;\n              return processEncryptionPublicKey(address, req);\n\n            case 7:\n              res.result = _context11.sent;\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _encryptionPublicKey.apply(this, arguments);\n  }\n\n  function decryptMessage(_x23, _x24) {\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function _decryptMessage() {\n    _decryptMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(req, res) {\n      var ciphertext, address, extraParams, msgParams;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (processDecryptMessage) {\n                _context12.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              ciphertext = req.params[0];\n              _context12.next = 5;\n              return validateAndNormalizeKeyholder(req.params[1], req);\n\n            case 5:\n              address = _context12.sent;\n              extraParams = req.params[2] || {};\n              msgParams = _objectSpread$5(_objectSpread$5({}, extraParams), {}, {\n                from: address,\n                data: ciphertext\n              });\n              res.result = processDecryptMessage(msgParams, req);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _decryptMessage.apply(this, arguments);\n  }\n\n  function fetchPrivateKey(_x25, _x26) {\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  function _fetchPrivateKey() {\n    _fetchPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (getPrivateKey) {\n                _context13.next = 2;\n                break;\n              }\n\n              throw ethErrors.rpc.methodNotSupported();\n\n            case 2:\n              res.result = getPrivateKey(req);\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _fetchPrivateKey.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  var getAccounts = providerHandlers.getAccounts,\n      getPrivateKey = providerHandlers.getPrivateKey,\n      processTransaction = providerHandlers.processTransaction,\n      processSignTransaction = providerHandlers.processSignTransaction,\n      processEthSignMessage = providerHandlers.processEthSignMessage,\n      processTypedMessage = providerHandlers.processTypedMessage,\n      processTypedMessageV3 = providerHandlers.processTypedMessageV3,\n      processTypedMessageV4 = providerHandlers.processTypedMessageV4,\n      processPersonalMessage = providerHandlers.processPersonalMessage,\n      processEncryptionPublicKey = providerHandlers.processEncryptionPublicKey,\n      processDecryptMessage = providerHandlers.processDecryptMessage;\n  var ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts: getAccounts,\n    getPrivateKey: getPrivateKey,\n    processTransaction: processTransaction,\n    processEthSignMessage: processEthSignMessage,\n    processSignTransaction: processSignTransaction,\n    processTypedMessage: processTypedMessage,\n    processTypedMessageV3: processTypedMessageV3,\n    processTypedMessageV4: processTypedMessageV4,\n    processPersonalMessage: processPersonalMessage,\n    processEncryptionPublicKey: processEncryptionPublicKey,\n    processDecryptMessage: processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  var addChain = _ref.addChain,\n      switchChain = _ref.switchChain;\n\n  function addNewChain(_x, _x2) {\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function _addNewChain() {\n    _addNewChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n      var _req$params;\n\n      var chainParams;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n\n            case 3:\n              if (chainParams.chainId) {\n                _context.next = 5;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n\n            case 5:\n              if (!(!chainParams.rpcUrls || chainParams.rpcUrls.length === 0)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n\n            case 7:\n              if (chainParams.nativeCurrency) {\n                _context.next = 9;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n            case 9:\n              _context.next = 11;\n              return addChain(chainParams);\n\n            case 11:\n              res.result = _context.sent;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addNewChain.apply(this, arguments);\n  }\n\n  function updateChain(_x3, _x4) {\n    return _updateChain.apply(this, arguments);\n  }\n\n  function _updateChain() {\n    _updateChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n      var _req$params2;\n\n      var chainParams;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n\n              if (chainParams) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n\n            case 3:\n              _context2.next = 5;\n              return switchChain(chainParams);\n\n            case 5:\n              res.result = _context2.sent;\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _updateChain.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n} // #region account middlewares\n\nfunction createAccountMiddleware(_ref2) {\n  var updatePrivatekey = _ref2.updatePrivatekey;\n\n  function updateAccount(_x5, _x6) {\n    return _updateAccount.apply(this, arguments);\n  }\n\n  function _updateAccount() {\n    _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n      var _req$params3;\n\n      var accountParams;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n\n              if (accountParams !== null && accountParams !== void 0 && accountParams.privateKey) {\n                _context3.next = 3;\n                break;\n              }\n\n              throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n\n            case 3:\n              _context3.next = 5;\n              return updatePrivatekey(accountParams);\n\n            case 5:\n              res.result = _context3.sent;\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _updateAccount.apply(this, arguments);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return function (req, res, next, end) {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  var chainId = providerConfig.chainId,\n      rpcTarget = providerConfig.rpcTarget;\n  var fetchMiddleware = createFetchMiddleware({\n    rpcTarget: rpcTarget\n  });\n  var networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware: networkMiddleware,\n    fetchMiddleware: fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  var connector = _ref.connector;\n  return {\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                accounts = connector.accounts;\n\n                if (!(accounts && accounts.length)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", accounts);\n\n              case 3:\n                throw new Error(\"Failed to get accounts\");\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getAccounts(_x) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    processTransaction: function () {\n      var _processTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return connector.sendTransaction(txParams);\n\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function processTransaction(_x2, _x3) {\n        return _processTransaction.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connector.signTransaction(txParams);\n\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function processSignTransaction(_x4, _x5) {\n        return _processSignTransaction.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connector.signMessage([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function processEthSignMessage(_x6, _x7) {\n        return _processEthSignMessage.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return connector.signPersonalMessage([msgParams.data, msgParams.from]);\n\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function processPersonalMessage(_x8, _x9) {\n        return _processPersonalMessage.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(msgParams, _) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function processTypedMessage(_x10, _x11) {\n        return _processTypedMessage.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(msgParams) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function processTypedMessageV3(_x12) {\n        return _processTypedMessageV.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(msgParams) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return connector.signTypedData([msgParams.from, msgParams.data]);\n\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function processTypedMessageV4(_x13) {\n        return _processTypedMessageV2.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function processEncryptionPublicKey(_x14) {\n        return _processEncryptionPublicKey.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(_) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$1() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WalletConnectProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(WalletConnectProvider, _BaseProvider);\n\n  var _super = _createSuper$1(WalletConnectProvider);\n\n  function WalletConnectProvider(_ref) {\n    var _this;\n\n    var config = _ref.config,\n        state = _ref.state,\n        connector = _ref.connector;\n\n    _classCallCheck(this, WalletConnectProvider);\n\n    _this = _super.call(this, {\n      config: {\n        chainConfig: _objectSpread$4(_objectSpread$4({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: _objectSpread$4(_objectSpread$4({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connector\", null);\n\n    _this.connector = connector || null;\n    return _this;\n  }\n\n  _createClass(WalletConnectProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.connector) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n                  code: 4902\n                });\n\n              case 2:\n                _context.next = 4;\n                return this.setupProvider(this.connector);\n\n              case 4:\n                return _context.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connector) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.onConnectorStateUpdate(connector);\n                _context2.next = 3;\n                return this.setupEngine(connector);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref2) {\n        var chainId, _ref2$addChain, addChain, _ref2$lookup, lookup, currentChainConfig, rpcTarget, displayName;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                chainId = _ref2.chainId, _ref2$addChain = _ref2.addChain, addChain = _ref2$addChain === void 0 ? true : _ref2$addChain, _ref2$lookup = _ref2.lookup, lookup = _ref2$lookup === void 0 ? true : _ref2$lookup;\n\n                if (this.connector) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n                  code: 4902\n                });\n\n              case 3:\n                currentChainConfig = this.getChainConfig(chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                rpcTarget = currentChainConfig.rpcTarget, displayName = currentChainConfig.displayName;\n\n                if (!addChain) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                _context3.prev = 7;\n                _context3.next = 10;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: chainId,\n                    chainName: displayName,\n                    rpcUrls: [rpcTarget]\n                  }]\n                });\n\n              case 10:\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](7);\n                log.error(_context3.t0);\n\n              case 15:\n                _context3.prev = 15;\n                _context3.next = 18;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_switchEthereumChain\",\n                  params: [{\n                    chainId: chainId\n                  }]\n                });\n\n              case 18:\n                _context3.next = 25;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t1 = _context3[\"catch\"](15);\n                log.error(_context3.t1); // ignore this error because metamask & others return provider.result as null\n                // wallet connect thinks this is wrong\n\n                if (!(_context3.t1.message !== \"JSON RPC response format is invalid\")) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                throw _context3.t1;\n\n              case 25:\n                this.configure({\n                  chainConfig: currentChainConfig\n                });\n\n                if (!lookup) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 29;\n                return this.lookupNetwork(this.connector);\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[7, 12], [15, 20]]);\n      }));\n\n      function switchChain(_x2) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"addChain\",\n    value: function () {\n      var _addChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(chainConfig) {\n        var rpcTarget, displayName;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.connector) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n              case 2:\n                rpcTarget = chainConfig.rpcTarget, displayName = chainConfig.displayName;\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.connector.sendCustomRequest({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: chainConfig.chainId,\n                    chainName: displayName,\n                    rpcUrls: [rpcTarget]\n                  }]\n                });\n\n              case 6:\n                _get(_getPrototypeOf(WalletConnectProvider.prototype), \"addChain\", this).call(this, chainConfig);\n\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](3);\n                log.error(_context4.t0);\n                throw _context4.t0;\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 9]]);\n      }));\n\n      function addChain(_x3) {\n        return _addChain.apply(this, arguments);\n      }\n\n      return addChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connector) {\n        var chainId, connectedHexChainId;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (connector.connected) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n              case 2:\n                if (this.provider) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 4:\n                chainId = this.config.chainConfig.chainId;\n                connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n\n                if (!(chainId !== connectedHexChainId)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n\n              case 8:\n                this.provider.emit(\"connect\", {\n                  chainId: chainId\n                });\n                this.provider.emit(\"chainChanged\", this.state.chainId);\n                return _context5.abrupt(\"return\", connectedHexChainId);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lookupNetwork(_x4) {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"setupEngine\",\n    value: function () {\n      var _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connector) {\n        var providerHandlers, ethMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                providerHandlers = getProviderHandlers$1({\n                  connector: connector\n                });\n                this.update({\n                  accounts: connector.accounts || []\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                engine = new JRPCEngine();\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n\n                if (this.config.skipLookupNetwork) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 12;\n                return this.lookupNetwork(connector);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setupEngine(_x5) {\n        return _setupEngine.apply(this, arguments);\n      }\n\n      return setupEngine;\n    }()\n  }, {\n    key: \"onConnectorStateUpdate\",\n    value: function () {\n      var _onConnectorStateUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connector) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                connector.on(\"session_update\", /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(error, payload) {\n                    var _payload$params$, accounts, connectedChainId, rpcUrl, connectedHexChainId, maybeConfig;\n\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            if (_this2.provider) {\n                              _context7.next = 2;\n                              break;\n                            }\n\n                            throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n                          case 2:\n                            if (!error) {\n                              _context7.next = 5;\n                              break;\n                            }\n\n                            _this2.provider.emit(\"error\", error);\n\n                            return _context7.abrupt(\"return\");\n\n                          case 5:\n                            _payload$params$ = payload.params[0], accounts = _payload$params$.accounts, connectedChainId = _payload$params$.chainId, rpcUrl = _payload$params$.rpcUrl; // Check if accounts changed and trigger event\n\n                            if (accounts !== null && accounts !== void 0 && accounts.length && _this2.state.accounts[0] !== accounts[0]) {\n                              _this2.update({\n                                accounts: accounts\n                              }); // await this.setupEngine(connector);\n\n\n                              _this2.provider.emit(\"accountsChanged\", accounts);\n                            }\n\n                            connectedHexChainId = \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n                            if (!(connectedChainId && _this2.state.chainId !== connectedHexChainId)) {\n                              _context7.next = 13;\n                              break;\n                            }\n\n                            maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {}; // Handle rpcUrl update\n\n                            _this2.configure({\n                              chainConfig: _objectSpread$4(_objectSpread$4({}, maybeConfig), {}, {\n                                chainId: connectedHexChainId,\n                                rpcTarget: rpcUrl,\n                                chainNamespace: CHAIN_NAMESPACES.EIP155\n                              })\n                            });\n\n                            _context7.next = 13;\n                            return _this2.setupEngine(connector);\n\n                          case 13:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7);\n                  }));\n\n                  return function (_x7, _x8) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function onConnectorStateUpdate(_x6) {\n        return _onConnectorStateUpdate.apply(this, arguments);\n      }\n\n      return onConnectorStateUpdate;\n    }()\n  }]);\n\n  return WalletConnectProvider;\n}(BaseProvider);\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            providerFactory = new WalletConnectProvider({\n              config: {\n                chainConfig: params.chainConfig,\n                skipLookupNetwork: params.skipLookupNetwork\n              }\n            });\n            _context9.next = 3;\n            return providerFactory.setupProvider(params.connector);\n\n          case 3:\n            return _context9.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x9) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n\nvar BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nvar BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nvar BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\"); // Setter Maps\n\nvar toBigNumber = {\n  hex: function hex(n) {\n    return typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16);\n  },\n  dec: function dec(n) {\n    return new BigNumber(n, 10);\n  }\n};\nvar toNormalizedDenomination = {\n  WEI: function WEI(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER);\n  },\n  GWEI: function GWEI(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER);\n  },\n  ETH: function ETH(bigNumber) {\n    return bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER);\n  }\n};\nvar toSpecifiedDenomination = {\n  WEI: function WEI(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP);\n  },\n  GWEI: function GWEI(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP);\n  },\n  ETH: function ETH(bigNumber) {\n    return bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP);\n  }\n};\nvar baseChange = {\n  hex: function hex(n) {\n    return n.toString(16);\n  },\n  dec: function dec(n) {\n    return new BigNumber(n).toString(10);\n  }\n};\n\nvar converter = function converter(params) {\n  var value = params.value,\n      fromNumericBase = params.fromNumericBase,\n      fromDenomination = params.fromDenomination,\n      toNumericBase = params.toNumericBase,\n      toDenomination = params.toDenomination,\n      numberOfDecimals = params.numberOfDecimals;\n  var convertedValue = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n\n  return convertedValue;\n};\n\nvar conversionUtil = function conversionUtil(value, _ref) {\n  var _ref$fromNumericBase = _ref.fromNumericBase,\n      fromNumericBase = _ref$fromNumericBase === void 0 ? \"hex\" : _ref$fromNumericBase,\n      toNumericBase = _ref.toNumericBase,\n      fromDenomination = _ref.fromDenomination,\n      toDenomination = _ref.toDenomination,\n      numberOfDecimals = _ref.numberOfDecimals;\n  return converter({\n    fromNumericBase: fromNumericBase,\n    toNumericBase: toNumericBase,\n    fromDenomination: fromDenomination,\n    toDenomination: toDenomination,\n    numberOfDecimals: numberOfDecimals,\n    value: value || \"0\"\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\n\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction normalizeGWEIDecimalNumbers(n) {\n  var numberAsWEIHex = decGWEIToHexWEI(n);\n  var numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\nfunction fetchEip1159GasEstimates(_x) {\n  return _fetchEip1159GasEstimates.apply(this, arguments);\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\n\nfunction _fetchEip1159GasEstimates() {\n  _fetchEip1159GasEstimates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var estimates, normalizedEstimates;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return get(url);\n\n          case 2:\n            estimates = _context.sent;\n            normalizedEstimates = _objectSpread$3(_objectSpread$3({}, estimates), {}, {\n              estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n              low: _objectSpread$3(_objectSpread$3({}, estimates.low), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n              }),\n              medium: _objectSpread$3(_objectSpread$3({}, estimates.medium), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n              }),\n              high: _objectSpread$3(_objectSpread$3({}, estimates.high), {}, {\n                suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n                suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n              })\n            });\n            return _context.abrupt(\"return\", normalizedEstimates);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchEip1159GasEstimates.apply(this, arguments);\n}\n\nfunction fetchLegacyGasPriceEstimates(_x2) {\n  return _fetchLegacyGasPriceEstimates.apply(this, arguments);\n}\n\nfunction _fetchLegacyGasPriceEstimates() {\n  _fetchLegacyGasPriceEstimates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return get(url, {\n              referrer: url,\n              referrerPolicy: \"no-referrer-when-downgrade\",\n              method: \"GET\",\n              mode: \"cors\"\n            });\n\n          case 2:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              low: result.SafeGasPrice,\n              medium: result.ProposeGasPrice,\n              high: result.FastGasPrice\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchLegacyGasPriceEstimates.apply(this, arguments);\n}\n\nvar validateTypedMessageParams = function validateTypedMessageParams(parameters, activeChainId) {\n  var _data$domain;\n\n  try {\n    assert.ok(parameters && _typeof(parameters) === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(typeof parameters.from === \"string\" && isValidAddress(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    var data = null;\n    var chainId = null;\n\n    switch (parameters.version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(function () {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(Array.isArray(data), \"params.data must be an array.\");\n        assert.doesNotThrow(function () {\n          typedSignatureHash(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(function () {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, \"Primary type of \\\"\".concat(data.primaryType, \"\\\" has no type definition.\"));\n        var validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = (_data$domain = data.domain) === null || _data$domain === void 0 ? void 0 : _data$domain.chainId;\n\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), \"Cannot sign messages for chainId \\\"\".concat(chainId, \"\\\", because Web3Auth is switching networks.\"));\n\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n\n          assert.strictEqual(chainId, activeChainId, \"Provided chainId \\\"\".concat(chainId, \"\\\" must match the active chainId \\\"\").concat(activeChainId, \"\\\"\"));\n        }\n\n        break;\n\n      default:\n        assert.fail(\"Unknown typed data version \\\"\".concat(parameters.version, \"\\\"\"));\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction signTx(_x, _x2, _x3) {\n  return _signTx.apply(this, arguments);\n}\n\nfunction _signTx() {\n  _signTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(txParams, privKey, txFormatter) {\n    var finalTxParams, common, unsignedEthTx, signedTx;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return txFormatter.formatTransaction(txParams);\n\n          case 2:\n            finalTxParams = _context11.sent;\n            _context11.next = 5;\n            return txFormatter.getCommonConfiguration();\n\n          case 5:\n            common = _context11.sent;\n            unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n              common: common\n            });\n            signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n            return _context11.abrupt(\"return\", signedTx);\n\n          case 9:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _signTx.apply(this, arguments);\n}\n\nfunction getProviderHandlers(_ref) {\n  var txFormatter = _ref.txFormatter,\n      privKey = _ref.privKey,\n      getProviderEngineProxy = _ref.getProviderEngineProxy;\n  return {\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))]);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getAccounts(_x4) {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", privKey);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getPrivateKey(_x5) {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    processTransaction: function () {\n      var _processTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams, _) {\n        var providerEngineProxy, signedTx, txHash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                _context3.next = 5;\n                return signTx(txParams, privKey, txFormatter);\n\n              case 5:\n                signedTx = _context3.sent;\n                _context3.next = 8;\n                return providerEngineProxy.request({\n                  method: \"eth_sendRawTransaction\",\n                  params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n                });\n\n              case 8:\n                txHash = _context3.sent;\n                return _context3.abrupt(\"return\", txHash);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function processTransaction(_x6, _x7) {\n        return _processTransaction.apply(this, arguments);\n      }\n\n      return processTransaction;\n    }(),\n    processSignTransaction: function () {\n      var _processSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(txParams, _) {\n        var providerEngineProxy, signedTx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                _context4.next = 5;\n                return signTx(txParams, privKey, txFormatter);\n\n              case 5:\n                signedTx = _context4.sent;\n                return _context4.abrupt(\"return\", \"0x\".concat(signedTx.toString(\"hex\")));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function processSignTransaction(_x8, _x9) {\n        return _processSignTransaction.apply(this, arguments);\n      }\n\n      return processSignTransaction;\n    }(),\n    processEthSignMessage: function () {\n      var _processEthSignMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msgParams, _) {\n        var rawMessageSig;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                rawMessageSig = signMessage(privKey, msgParams.data);\n                return _context5.abrupt(\"return\", rawMessageSig);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function processEthSignMessage(_x10, _x11) {\n        return _processEthSignMessage.apply(this, arguments);\n      }\n\n      return processEthSignMessage;\n    }(),\n    processPersonalMessage: function () {\n      var _processPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(msgParams, _) {\n        var privKeyBuffer, sig;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                sig = personalSign({\n                  privateKey: privKeyBuffer,\n                  data: msgParams.data\n                });\n                return _context6.abrupt(\"return\", sig);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function processPersonalMessage(_x12, _x13) {\n        return _processPersonalMessage.apply(this, arguments);\n      }\n\n      return processPersonalMessage;\n    }(),\n    processTypedMessage: function () {\n      var _processTypedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, params, data, sig;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                log.debug(\"processTypedMessage\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context7.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context7.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                params = _objectSpread$2(_objectSpread$2({}, msgParams), {}, {\n                  version: SignTypedDataVersion.V1\n                });\n                validateTypedMessageParams(params, finalChainId);\n                data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V1\n                });\n                return _context7.abrupt(\"return\", sig);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function processTypedMessage(_x14, _x15) {\n        return _processTypedMessage.apply(this, arguments);\n      }\n\n      return processTypedMessage;\n    }(),\n    processTypedMessageV3: function () {\n      var _processTypedMessageV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, data, sig;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log.debug(\"processTypedMessageV3\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context8.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context8.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                validateTypedMessageParams(msgParams, finalChainId);\n                data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V3\n                });\n                return _context8.abrupt(\"return\", sig);\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function processTypedMessageV3(_x16, _x17) {\n        return _processTypedMessageV.apply(this, arguments);\n      }\n\n      return processTypedMessageV3;\n    }(),\n    processTypedMessageV4: function () {\n      var _processTypedMessageV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(msgParams, _) {\n        var privKeyBuffer, providerEngineProxy, chainId, finalChainId, data, sig;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                log.debug(\"processTypedMessageV4\", msgParams);\n                privKeyBuffer = Buffer.from(privKey, \"hex\");\n                providerEngineProxy = getProviderEngineProxy();\n\n                if (providerEngineProxy) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 5:\n                _context9.next = 7;\n                return providerEngineProxy.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                chainId = _context9.sent;\n                finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n                validateTypedMessageParams(msgParams, finalChainId);\n                data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n                sig = signTypedData({\n                  privateKey: privKeyBuffer,\n                  data: data,\n                  version: SignTypedDataVersion.V4\n                });\n                return _context9.abrupt(\"return\", sig);\n\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function processTypedMessageV4(_x18, _x19) {\n        return _processTypedMessageV2.apply(this, arguments);\n      }\n\n      return processTypedMessageV4;\n    }(),\n    processEncryptionPublicKey: function () {\n      var _processEncryptionPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(address, _) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                log.info(\"processEncryptionPublicKey\", address);\n                return _context10.abrupt(\"return\", getEncryptionPublicKey(privKey));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function processEncryptionPublicKey(_x20, _x21) {\n        return _processEncryptionPublicKey.apply(this, arguments);\n      }\n\n      return processEncryptionPublicKey;\n    }(),\n    processDecryptMessage: function processDecryptMessage(msgParams, _) {\n      log.info(\"processDecryptMessage\", msgParams);\n      var stripped = stripHexPrefix(msgParams.data);\n      var buff = Buffer.from(stripped, \"hex\");\n      var decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  var numberBN = new BN(numerator);\n  var denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nvar LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nvar EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nvar TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nvar TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nvar GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar TransactionFormatter = /*#__PURE__*/function () {\n  function TransactionFormatter(_ref) {\n    var getProviderEngineProxy = _ref.getProviderEngineProxy;\n\n    _classCallCheck(this, TransactionFormatter);\n\n    _defineProperty(this, \"chainConfig\", null);\n\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  _createClass(TransactionFormatter, [{\n    key: \"providerProxy\",\n    get: function get() {\n      return this.getProviderEngineProxy();\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_provider_config\",\n                  params: []\n                });\n\n              case 2:\n                this.chainConfig = _context.sent;\n                _context.next = 5;\n                return this.getEIP1559Compatibility();\n\n              case 5:\n                this.isEIP1559Compatible = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"getCommonConfiguration\",\n    value: function () {\n      var _getCommonConfiguration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$chainConfig, name, chainId, hardfork, customChainParams;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                _this$chainConfig = this.chainConfig, name = _this$chainConfig.displayName, chainId = _this$chainConfig.chainId;\n                hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n                customChainParams = {\n                  name: name,\n                  chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n                  networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n                  defaultHardfork: hardfork\n                };\n                return _context2.abrupt(\"return\", Common.custom(customChainParams));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getCommonConfiguration() {\n        return _getCommonConfiguration.apply(this, arguments);\n      }\n\n      return getCommonConfiguration;\n    }()\n  }, {\n    key: \"formatTransaction\",\n    value: function () {\n      var _formatTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txParams) {\n        var clonedTxParams, defaultGasLimit, _defaultGasLimit, _yield$this$getDefaul, defaultGasPrice, defaultMaxFeePerGas, defaultMaxPriorityFeePerGas;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                clonedTxParams = _objectSpread$1({}, txParams);\n\n                if (!(clonedTxParams.nonce === undefined)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.providerProxy.request({\n                  method: \"eth_getTransactionCount\",\n                  params: [txParams.from, \"latest\"]\n                });\n\n              case 6:\n                clonedTxParams.nonce = _context3.sent;\n\n              case 7:\n                if (!(!this.isEIP1559Compatible && clonedTxParams.gasPrice)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n                if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas; // if gas is not provided explicitly, estimate it.\n\n                if (clonedTxParams.gas) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                _context3.next = 13;\n                return this.getDefaultGasLimit(clonedTxParams);\n\n              case 13:\n                defaultGasLimit = _context3.sent;\n\n                if (defaultGasLimit) {\n                  clonedTxParams.gasLimit = defaultGasLimit;\n                }\n\n                _context3.next = 18;\n                break;\n\n              case 17:\n                clonedTxParams.gasLimit = clonedTxParams.gas;\n\n              case 18:\n                return _context3.abrupt(\"return\", clonedTxParams);\n\n              case 19:\n                if (clonedTxParams.gas) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 22;\n                return this.getDefaultGasLimit(clonedTxParams);\n\n              case 22:\n                _defaultGasLimit = _context3.sent;\n\n                if (_defaultGasLimit) {\n                  clonedTxParams.gasLimit = _defaultGasLimit;\n                }\n\n                _context3.next = 27;\n                break;\n\n              case 26:\n                clonedTxParams.gasLimit = clonedTxParams.gas;\n\n              case 27:\n                _context3.next = 29;\n                return this.getDefaultGasFees(clonedTxParams);\n\n              case 29:\n                _yield$this$getDefaul = _context3.sent;\n                defaultGasPrice = _yield$this$getDefaul.gasPrice;\n                defaultMaxFeePerGas = _yield$this$getDefaul.maxFeePerGas;\n                defaultMaxPriorityFeePerGas = _yield$this$getDefaul.maxPriorityFeePerGas;\n\n                if (this.isEIP1559Compatible) {\n                  // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n                  //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n                  if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                    clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n                    clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n                  } else {\n                    if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n                      // with the one returned by the gasFeeController, if that is available.\n                      clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n                    }\n\n                    if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n                      // with the one returned by the gasFeeController, if that is available.\n                      clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n                    }\n\n                    if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n                      // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n                      // available.\n                      clonedTxParams.maxFeePerGas = defaultGasPrice;\n                    }\n\n                    if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                      // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n                      // available  then we set maxPriorityFeePerGas to\n                      // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n                      // set by the dapp, or the maxFeePerGas from the controller.\n                      clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n                    }\n                  } // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n\n                  delete clonedTxParams.gasPrice;\n                } else {\n                  // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n                  // when not on a EIP1559 compatible network\n                  delete clonedTxParams.maxPriorityFeePerGas;\n                  delete clonedTxParams.maxFeePerGas;\n                } // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n                // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n                // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n                // were available from either the dapp or the network.\n\n\n                if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n                  clonedTxParams.gasPrice = defaultGasPrice;\n                }\n\n                clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n                clonedTxParams.chainId = this.chainConfig.chainId;\n                return _context3.abrupt(\"return\", clonedTxParams);\n\n              case 38:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function formatTransaction(_x) {\n        return _formatTransaction.apply(this, arguments);\n      }\n\n      return formatTransaction;\n    }()\n  }, {\n    key: \"fetchEthGasPriceEstimate\",\n    value: function () {\n      var _fetchEthGasPriceEstimate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var gasPrice;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_gasPrice\",\n                  params: []\n                });\n\n              case 2:\n                gasPrice = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function fetchEthGasPriceEstimate() {\n        return _fetchEthGasPriceEstimate.apply(this, arguments);\n      }\n\n      return fetchEthGasPriceEstimate;\n    }()\n  }, {\n    key: \"getEIP1559Compatibility\",\n    value: function () {\n      var _getEIP1559Compatibility = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var latestBlock, supportsEIP1559;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_getBlockByNumber\",\n                  params: [\"latest\", false]\n                });\n\n              case 2:\n                latestBlock = _context5.sent;\n                supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n                return _context5.abrupt(\"return\", !!supportsEIP1559);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getEIP1559Compatibility() {\n        return _getEIP1559Compatibility.apply(this, arguments);\n      }\n\n      return getEIP1559Compatibility;\n    }()\n  }, {\n    key: \"fetchGasFeeEstimateData\",\n    value: function () {\n      var _fetchGasFeeEstimateData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var isLegacyGasAPICompatible, chainId, gasData, estimates, _estimates, _estimates2;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Chain config not initialized\");\n\n              case 2:\n                isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n                chainId = Number.parseInt(this.chainConfig.chainId, 16);\n                _context6.prev = 4;\n\n                if (!this.isEIP1559Compatible) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 8;\n                return fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n\n              case 8:\n                estimates = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: estimates,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n                };\n                _context6.next = 20;\n                break;\n\n              case 12:\n                if (!isLegacyGasAPICompatible) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _context6.next = 15;\n                return fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n\n              case 15:\n                _estimates = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: _estimates,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n                };\n                _context6.next = 20;\n                break;\n\n              case 19:\n                throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n\n              case 20:\n                _context6.next = 34;\n                break;\n\n              case 22:\n                _context6.prev = 22;\n                _context6.t0 = _context6[\"catch\"](4);\n                _context6.prev = 24;\n                _context6.next = 27;\n                return this.fetchEthGasPriceEstimate();\n\n              case 27:\n                _estimates2 = _context6.sent;\n                gasData = {\n                  gasFeeEstimates: _estimates2,\n                  gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n                };\n                _context6.next = 34;\n                break;\n\n              case 31:\n                _context6.prev = 31;\n                _context6.t1 = _context6[\"catch\"](24);\n                throw new Error(\"Gas fee/price estimation failed. Message: \".concat(_context6.t1.message));\n\n              case 34:\n                return _context6.abrupt(\"return\", gasData);\n\n              case 35:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[4, 22], [24, 31]]);\n      }));\n\n      function fetchGasFeeEstimateData() {\n        return _fetchGasFeeEstimateData.apply(this, arguments);\n      }\n\n      return fetchGasFeeEstimateData;\n    }()\n  }, {\n    key: \"getDefaultGasFees\",\n    value: function () {\n      var _getDefaultGasFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(txParams) {\n        var _yield$this$fetchGasF, gasFeeEstimates, gasEstimateType, _gasFeeEstimates$medi, suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas, _yield$this$fetchEthG, gasPrice;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {});\n\n              case 2:\n                _context7.prev = 2;\n                _context7.next = 5;\n                return this.fetchGasFeeEstimateData();\n\n              case 5:\n                _yield$this$fetchGasF = _context7.sent;\n                gasFeeEstimates = _yield$this$fetchGasF.gasFeeEstimates;\n                gasEstimateType = _yield$this$fetchGasF.gasEstimateType;\n\n                if (!(this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET)) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                _gasFeeEstimates$medi = gasFeeEstimates.medium;\n                _gasFeeEstimates$medi = _gasFeeEstimates$medi === void 0 ? {} : _gasFeeEstimates$medi;\n                suggestedMaxPriorityFeePerGas = _gasFeeEstimates$medi.suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas = _gasFeeEstimates$medi.suggestedMaxFeePerGas;\n\n                if (!(suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n                  maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n                });\n\n              case 14:\n                _context7.next = 22;\n                break;\n\n              case 16:\n                if (!(gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY)) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.medium))\n                });\n\n              case 20:\n                if (!(gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE)) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n                });\n\n              case 22:\n                _context7.next = 27;\n                break;\n\n              case 24:\n                _context7.prev = 24;\n                _context7.t0 = _context7[\"catch\"](2);\n                log.error(_context7.t0);\n\n              case 27:\n                _context7.next = 29;\n                return this.fetchEthGasPriceEstimate();\n\n              case 29:\n                _yield$this$fetchEthG = _context7.sent;\n                gasPrice = _yield$this$fetchEthG.gasPrice;\n                return _context7.abrupt(\"return\", {\n                  gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n                });\n\n              case 32:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 24]]);\n      }));\n\n      function getDefaultGasFees(_x2) {\n        return _getDefaultGasFees.apply(this, arguments);\n      }\n\n      return getDefaultGasFees;\n    }()\n  }, {\n    key: \"estimateTxGas\",\n    value: function () {\n      var _estimateTxGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(txMeta) {\n        var txParams, gas;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                txParams = _objectSpread$1({}, txMeta); // `eth_estimateGas` can fail if the user has insufficient balance for the\n                // value being sent, or for the gas cost. We don't want to check their\n                // balance here, we just want the gas estimate. The gas price is removed\n                // to skip those balance checks. We check balance elsewhere. We also delete\n                // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n\n                delete txParams.gasPrice;\n                delete txParams.maxFeePerGas;\n                delete txParams.maxPriorityFeePerGas;\n                _context8.next = 6;\n                return this.providerProxy.request({\n                  method: \"eth_estimateGas\",\n                  params: [txParams]\n                });\n\n              case 6:\n                gas = _context8.sent;\n                return _context8.abrupt(\"return\", gas);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function estimateTxGas(_x3) {\n        return _estimateTxGas.apply(this, arguments);\n      }\n\n      return estimateTxGas;\n    }()\n  }, {\n    key: \"analyzeGasUsage\",\n    value: function () {\n      var _analyzeGasUsage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(txMeta) {\n        var block, blockGasLimitBN, saferGasLimitBN, estimatedGasHex;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.providerProxy.request({\n                  method: \"eth_getBlockByNumber\",\n                  params: [\"latest\", false]\n                });\n\n              case 2:\n                block = _context9.sent;\n                // fallback to block gasLimit\n                blockGasLimitBN = hexToBn(block.gasLimit);\n                saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n                estimatedGasHex = bnToHex(saferGasLimitBN);\n                _context9.prev = 6;\n                _context9.next = 9;\n                return this.estimateTxGas(txMeta);\n\n              case 9:\n                estimatedGasHex = _context9.sent;\n                _context9.next = 15;\n                break;\n\n              case 12:\n                _context9.prev = 12;\n                _context9.t0 = _context9[\"catch\"](6);\n                log.warn(_context9.t0);\n\n              case 15:\n                return _context9.abrupt(\"return\", {\n                  blockGasLimit: block.gasLimit,\n                  estimatedGasHex: estimatedGasHex\n                });\n\n              case 16:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[6, 12]]);\n      }));\n\n      function analyzeGasUsage(_x4) {\n        return _analyzeGasUsage.apply(this, arguments);\n      }\n\n      return analyzeGasUsage;\n    }()\n  }, {\n    key: \"addGasBuffer\",\n    value: function addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n      var multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n      var initialGasLimitBn = hexToBn(initialGasLimitHex);\n      var blockGasLimitBn = hexToBn(blockGasLimitHex);\n      var upperGasLimitBn = blockGasLimitBn.muln(0.9);\n      var bufferedGasLimitBn = initialGasLimitBn.muln(multiplier); // if initialGasLimit is above blockGasLimit, dont modify it\n\n      if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn); // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n\n      if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn); // otherwise use blockGasLimit\n\n      return bnToHex(upperGasLimitBn);\n    }\n  }, {\n    key: \"determineTransactionCategory\",\n    value: function () {\n      var _determineTransactionCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(txParameters) {\n        var data, to, code, txCategory, codeIsEmpty;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                data = txParameters.data, to = txParameters.to;\n                code = \"\";\n\n                if (!(data && !to)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n                _context10.next = 17;\n                break;\n\n              case 6:\n                _context10.prev = 6;\n                _context10.next = 9;\n                return this.providerProxy.request({\n                  method: \"eth_getCode\",\n                  params: [to, \"latest\"]\n                });\n\n              case 9:\n                code = _context10.sent;\n                _context10.next = 15;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](6);\n                log.warn(_context10.t0);\n\n              case 15:\n                codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n                txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n\n              case 17:\n                return _context10.abrupt(\"return\", {\n                  transactionCategory: txCategory,\n                  code: code\n                });\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[6, 12]]);\n      }));\n\n      function determineTransactionCategory(_x5) {\n        return _determineTransactionCategory.apply(this, arguments);\n      }\n\n      return determineTransactionCategory;\n    }()\n  }, {\n    key: \"getDefaultGasLimit\",\n    value: function () {\n      var _getDefaultGasLimit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(txParams) {\n        var _yield$this$determine, transactionCategory, TWENTY_ONE_THOUSAND, _yield$this$analyzeGa, blockGasLimit, estimatedGasHex, gasLimit;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.determineTransactionCategory(_objectSpread$1({}, txParams));\n\n              case 2:\n                _yield$this$determine = _context11.sent;\n                transactionCategory = _yield$this$determine.transactionCategory;\n\n                if (!txParams.gas) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", txParams.gas);\n\n              case 6:\n                if (!(txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER)) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                if (!txParams.data) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n\n              case 9:\n                TWENTY_ONE_THOUSAND = 21000; // This is a standard ether simple send, gas requirement is exactly 21k\n\n                return _context11.abrupt(\"return\", addHexPrefix(TWENTY_ONE_THOUSAND.toString(16)));\n\n              case 11:\n                _context11.next = 13;\n                return this.analyzeGasUsage(txParams);\n\n              case 13:\n                _yield$this$analyzeGa = _context11.sent;\n                blockGasLimit = _yield$this$analyzeGa.blockGasLimit;\n                estimatedGasHex = _yield$this$analyzeGa.estimatedGasHex;\n                // add additional gas buffer to our estimation for safety\n                gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n                return _context11.abrupt(\"return\", gasLimit);\n\n              case 18:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getDefaultGasLimit(_x6) {\n        return _getDefaultGasLimit.apply(this, arguments);\n      }\n\n      return getDefaultGasLimit;\n    }()\n  }]);\n\n  return TransactionFormatter;\n}();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar EthereumPrivateKeyProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EthereumPrivateKeyProvider, _BaseProvider);\n\n  var _super = _createSuper(EthereumPrivateKeyProvider);\n\n  function EthereumPrivateKeyProvider(_ref) {\n    var config = _ref.config,\n        state = _ref.state;\n\n    _classCallCheck(this, EthereumPrivateKeyProvider);\n\n    return _super.call(this, {\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(EthereumPrivateKeyProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.state.privateKey) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Private key is not found in state, plz pass it in constructor state param\",\n                  code: 4902\n                });\n\n              case 2:\n                _context.next = 4;\n                return this.setupProvider(this.state.privateKey);\n\n              case 4:\n                return _context.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(privKey) {\n        var txFormatter, providerHandlers, ethMiddleware, chainSwitchMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                txFormatter = new TransactionFormatter({\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n                providerHandlers = getProviderHandlers({\n                  txFormatter: txFormatter,\n                  privKey: privKey,\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n                ethMiddleware = createEthMiddleware(providerHandlers);\n                chainSwitchMiddleware = this.getChainSwitchMiddleware();\n                engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(ethMiddleware);\n                engine.push(chainSwitchMiddleware);\n                engine.push(this.getAccountMiddleware());\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context2.next = 14;\n                return txFormatter.init();\n\n              case 14:\n                _context2.next = 16;\n                return this.lookupNetwork();\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"updateAccount\",\n    value: function () {\n      var _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var existingKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                _context3.next = 4;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 4:\n                existingKey = _context3.sent;\n\n                if (!(existingKey !== params.privateKey)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this.setupProvider(params.privateKey);\n\n              case 8:\n                _context3.t0 = this._providerEngineProxy;\n                _context3.next = 11;\n                return this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                });\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  accounts: _context3.t1\n                };\n\n                _context3.t0.emit.call(_context3.t0, \"accountsChanged\", _context3.t2);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateAccount(_x2) {\n        return _updateAccount.apply(this, arguments);\n      }\n\n      return updateAccount;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {\n        var chainConfig, privKey;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainConfig = this.getChainConfig(params.chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                this.configure({\n                  chainConfig: chainConfig\n                });\n                _context4.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"eth_private_key\"\n                });\n\n              case 7:\n                privKey = _context4.sent;\n                _context4.next = 10;\n                return this.setupProvider(privKey);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function switchChain(_x3) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var chainId, network;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainId = this.config.chainConfig.chainId;\n\n                if (chainId) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n\n              case 5:\n                _context5.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"net_version\",\n                  params: []\n                });\n\n              case 7:\n                network = _context5.sent;\n\n                if (!(parseInt(chainId, 16) !== parseInt(network, 10))) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n\n              case 10:\n                if (this.state.chainId !== chainId) {\n                  this._providerEngineProxy.emit(\"chainChanged\", chainId);\n\n                  this._providerEngineProxy.emit(\"connect\", {\n                    chainId: chainId\n                  });\n                }\n\n                this.update({\n                  chainId: chainId\n                });\n                return _context5.abrupt(\"return\", network);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"getChainSwitchMiddleware\",\n    value: function getChainSwitchMiddleware() {\n      var _this = this;\n\n      var chainSwitchHandlers = {\n        addChain: function () {\n          var _addChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {\n            var chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency;\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    chainId = params.chainId, chainName = params.chainName, rpcUrls = params.rpcUrls, blockExplorerUrls = params.blockExplorerUrls, nativeCurrency = params.nativeCurrency;\n\n                    _this.addChain({\n                      chainNamespace: \"eip155\",\n                      chainId: chainId,\n                      ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n                      tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n                      displayName: chainName,\n                      rpcTarget: rpcUrls[0],\n                      blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function addChain(_x4) {\n            return _addChain.apply(this, arguments);\n          }\n\n          return addChain;\n        }(),\n        switchChain: function () {\n          var _switchChain2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(params) {\n            var chainId;\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    chainId = params.chainId;\n                    _context7.next = 3;\n                    return _this.switchChain({\n                      chainId: chainId\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          function switchChain(_x5) {\n            return _switchChain2.apply(this, arguments);\n          }\n\n          return switchChain;\n        }()\n      };\n      var chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n      return chainSwitchMiddleware;\n    }\n  }, {\n    key: \"getAccountMiddleware\",\n    value: function getAccountMiddleware() {\n      var _this2 = this;\n\n      var accountHandlers = {\n        updatePrivatekey: function () {\n          var _updatePrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {\n            var privateKey;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    privateKey = params.privateKey;\n                    _context8.next = 3;\n                    return _this2.updateAccount({\n                      privateKey: privateKey\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          function updatePrivatekey(_x6) {\n            return _updatePrivatekey.apply(this, arguments);\n          }\n\n          return updatePrivatekey;\n        }()\n      };\n      return createAccountMiddleware(accountHandlers);\n    }\n  }]);\n\n  return EthereumPrivateKeyProvider;\n}(BaseProvider);\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            providerFactory = new EthereumPrivateKeyProvider({\n              config: {\n                chainConfig: params.chainConfig\n              }\n            });\n            _context9.next = 3;\n            return providerFactory.setupProvider(params.privKey);\n\n          case 3:\n            return _context9.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x7) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n\nexport { EthereumPrivateKeyProvider, TransactionFormatter, WalletConnectProvider, getProviderHandlers };\n//# sourceMappingURL=ethereumProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}