{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBasicType = exports.BasicType = void 0;\n\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\n\n\nclass BasicType extends abstract_1.Type {\n  constructor() {\n    super(...arguments);\n    this.isBasic = true; // Basic types merkleize to exactly one chunk, thus depth of 0\n\n    this.depth = 0; // Basic types merkleize to exactly one chunk\n\n    this.maxChunkCount = 1;\n  }\n\n  value_serializedSize() {\n    return this.byteLength;\n  }\n\n  tree_serializedSize() {\n    return this.byteLength;\n  }\n\n  assertValidSize(size) {\n    if (size !== this.byteLength) {\n      throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);\n    }\n  }\n\n  hashTreeRoot(value) {\n    // TODO: Optimize\n    const uint8Array = new Uint8Array(32);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, value);\n    return uint8Array;\n  }\n\n  clone(value) {\n    // All basic types are represented by primitive Javascript types, don't require clone\n    return value;\n  }\n\n  equals(a, b) {\n    // All basic types are represented by primitive Javascript types, the operator === is sufficient\n    return a === b;\n  }\n\n}\n\nexports.BasicType = BasicType;\n\nfunction isBasicType(type) {\n  return type.isBasic;\n}\n\nexports.isBasicType = isBasicType;","map":{"version":3,"sources":["../../src/type/basic.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEA;;;AAGG;;;AACH,MAAsB,SAAtB,SAA2C,UAAA,CAAA,IAA3C,CAAkD;AAAlD,EAAA,WAAA,GAAA;;AACW,SAAA,OAAA,GAAU,IAAV,CADX,CAEE;;AACS,SAAA,KAAA,GAAQ,CAAR,CAHX,CAIE;;AACS,SAAA,aAAA,GAAgB,CAAhB;AA2CV;;AAxCC,EAAA,oBAAoB,GAAA;AAClB,WAAO,KAAK,UAAZ;AACD;;AAED,EAAA,mBAAmB,GAAA;AACjB,WAAO,KAAK,UAAZ;AACD;;AAES,EAAA,eAAe,CAAC,IAAD,EAAa;AACpC,QAAI,IAAI,KAAK,KAAK,UAAlB,EAA8B;AAC5B,YAAM,KAAK,CAAC,0BAA0B,IAAI,aAAa,KAAK,UAAU,EAA3D,CAAX;AACD;AACF;;AAED,EAAA,YAAY,CAAC,KAAD,EAAS;AACnB;AACA,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,EAAf,CAAnB;AACA,UAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,UAAU,CAAC,MAAxB,EAAgC,UAAU,CAAC,UAA3C,EAAuD,UAAU,CAAC,UAAlE,CAAjB;AACA,SAAK,sBAAL,CAA4B;AAAC,MAAA,UAAD;AAAa,MAAA;AAAb,KAA5B,EAAoD,CAApD,EAAuD,KAAvD;AACA,WAAO,UAAP;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAS;AACZ;AACA,WAAO,KAAP;AACD;;AAED,EAAA,MAAM,CAAC,CAAD,EAAO,CAAP,EAAW;AACf;AACA,WAAO,CAAC,KAAK,CAAb;AACD;;AAtC+C;;AAAlD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAkDA,SAAgB,WAAhB,CAA+B,IAA/B,EAA4C;AAC1C,SAAO,IAAI,CAAC,OAAZ;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBasicType = exports.BasicType = void 0;\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\nclass BasicType extends abstract_1.Type {\n    constructor() {\n        super(...arguments);\n        this.isBasic = true;\n        // Basic types merkleize to exactly one chunk, thus depth of 0\n        this.depth = 0;\n        // Basic types merkleize to exactly one chunk\n        this.maxChunkCount = 1;\n    }\n    value_serializedSize() {\n        return this.byteLength;\n    }\n    tree_serializedSize() {\n        return this.byteLength;\n    }\n    assertValidSize(size) {\n        if (size !== this.byteLength) {\n            throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);\n        }\n    }\n    hashTreeRoot(value) {\n        // TODO: Optimize\n        const uint8Array = new Uint8Array(32);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return uint8Array;\n    }\n    clone(value) {\n        // All basic types are represented by primitive Javascript types, don't require clone\n        return value;\n    }\n    equals(a, b) {\n        // All basic types are represented by primitive Javascript types, the operator === is sufficient\n        return a === b;\n    }\n}\nexports.BasicType = BasicType;\nfunction isBasicType(type) {\n    return type.isBasic;\n}\nexports.isBasicType = isBasicType;\n//# sourceMappingURL=basic.js.map"]},"metadata":{},"sourceType":"script"}