{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicType = void 0;\n\nconst arrayBasic_1 = require(\"./arrayBasic\");\n\nconst merkleize_1 = require(\"../util/merkleize\");\n\nconst named_1 = require(\"../util/named\");\n\nconst listBasic_1 = require(\"../view/listBasic\");\n\nconst listBasic_2 = require(\"../viewDU/listBasic\");\n\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\n\n\nclass ListBasicType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (!elementType.isBasic) throw Error(\"elementType must be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (opts === null || opts === void 0 ? void 0 : opts.typeName) ?? `List[${elementType.typeName}, ${limit}]`; // TODO Check that itemsPerChunk is an integer\n\n    this.itemsPerChunk = 32 / elementType.byteLength;\n    this.maxChunkCount = Math.ceil(this.limit * elementType.byteLength / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount); // Depth includes the extra level for the length node\n\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = this.limit * elementType.maxSize;\n  }\n\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n  }\n\n  getView(tree) {\n    return new listBasic_1.ListBasicTreeView(this, tree);\n  }\n\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n  }\n\n  commitView(view) {\n    return view.node;\n  }\n\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n\n  cacheOfViewDU(view) {\n    return view.cache;\n  } // Serialization + deserialization\n\n\n  value_serializedSize(value) {\n    return value.length * this.elementType.byteLength;\n  }\n\n  value_serializeToBytes(output, offset, value) {\n    return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n  }\n\n  value_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n  }\n\n  tree_serializedSize(node) {\n    return this.tree_getLength(node) * this.elementType.byteLength;\n  }\n\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n  }\n\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n  } // Helpers for TreeView\n\n\n  tree_getLength(node) {\n    return node.right.getUint(4, 0);\n  }\n\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  } // Merkleization\n\n\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n\n  getRoots(value) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(value));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, {\n      uint8Array,\n      dataView\n    }, 0, value);\n    return merkleize_1.splitIntoRootChunks(uint8Array);\n  }\n\n}\n\nexports.ListBasicType = ListBasicType;","map":{"version":3,"sources":["../../src/type/listBasic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicType = void 0;\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst listBasic_1 = require(\"../view/listBasic\");\nconst listBasic_2 = require(\"../viewDU/listBasic\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass ListBasicType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (!elementType.isBasic)\n            throw Error(\"elementType must be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        // TODO Check that itemsPerChunk is an integer\n        this.itemsPerChunk = 32 / elementType.byteLength;\n        this.maxChunkCount = Math.ceil((this.limit * elementType.byteLength) / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = this.limit * elementType.maxSize;\n    }\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listBasic_1.ListBasicTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return value.length * this.elementType.byteLength;\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return this.tree_getLength(node) * this.elementType.byteLength;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return node.right.getUint(4, 0);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, { uint8Array, dataView }, 0, value);\n        return merkleize_1.splitIntoRootChunks(uint8Array);\n    }\n}\nexports.ListBasicType = ListBasicType;\n//# sourceMappingURL=listBasic.js.map"]},"metadata":{},"sourceType":"script"}