{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorCompositeType = void 0;\n\nconst merkleize_1 = require(\"../util/merkleize\");\n\nconst named_1 = require(\"../util/named\");\n\nconst arrayComposite_1 = require(\"./arrayComposite\");\n\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\n\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\n\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\n\n\nclass VectorCompositeType extends array_1.ArrayType {\n  constructor(elementType, length, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.length = length;\n    this.itemsPerChunk = 1;\n    this.isList = false;\n    this.isViewMutable = true;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (length === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = (opts === null || opts === void 0 ? void 0 : opts.typeName) ?? `Vector[${elementType.typeName}, ${length}]`;\n    this.maxChunkCount = length;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = this.chunkDepth;\n    this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n    this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n    this.defaultLen = length;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n\n  getView(tree) {\n    return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n  }\n\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n  }\n\n  commitView(view) {\n    return view.node;\n  }\n\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n\n  cacheOfViewDU(view) {\n    return view.cache;\n  } // Serialization + deserialization\n\n\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n  }\n\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n  }\n\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n\n  tree_serializedSize(node) {\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n  }\n\n  tree_serializeToBytes(output, offset, node) {\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n  }\n\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n  } // Helpers for TreeView\n\n\n  tree_getLength() {\n    return this.length;\n  }\n\n  tree_setLength() {// Vector's length is immutable, ignore this call\n  }\n\n  tree_getChunksNode(node) {\n    return node;\n  }\n\n  tree_setChunksNode(rootNode, chunksNode) {\n    return chunksNode;\n  } // Merkleization\n\n\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n  }\n\n}\n\nexports.VectorCompositeType = VectorCompositeType;","map":{"version":3,"sources":["../../src/type/vectorComposite.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAWA,MAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAQA;;;;;;AAMG;;;AACH,MAAa,mBAAb,SAIU,OAAA,CAAA,SAJV,CAI4G;AAe1G,EAAA,WAAA,CAAqB,WAArB,EAAwD,MAAxD,EAAwE,IAAxE,EAAkG;AAChG,UAAM,WAAN;AADmB,SAAA,WAAA,GAAA,WAAA;AAAmC,SAAA,MAAA,GAAA,MAAA;AAX/C,SAAA,aAAA,GAAgB,CAAhB;AAOA,SAAA,MAAA,GAAS,KAAT;AACA,SAAA,aAAA,GAAgB,IAAhB;AAMP,QAAI,WAAW,CAAC,OAAhB,EAAyB,MAAM,KAAK,CAAC,+BAAD,CAAX;AACzB,QAAI,MAAM,KAAK,CAAf,EAAkB,MAAM,KAAK,CAAC,2BAAD,CAAX;AAElB,SAAK,QAAL,GAAgB,CAAA,IAAI,SAAJ,IAAA,IAAI,WAAJ,YAAA,IAAI,CAAE,QAAN,KAAkB,UAAU,WAAW,CAAC,QAAQ,KAAK,MAAM,GAA3E;AACA,SAAK,aAAL,GAAqB,MAArB;AACA,SAAK,UAAL,GAAkB,WAAA,CAAA,gBAAA,CAAiB,KAAK,aAAtB,CAAlB;AACA,SAAK,KAAL,GAAa,KAAK,UAAlB;AACA,SAAK,SAAL,GAAiB,WAAW,CAAC,SAAZ,KAA0B,IAA1B,GAAiC,IAAjC,GAAwC,MAAM,GAAG,WAAW,CAAC,SAA9E;AACA,SAAK,OAAL,GAAe,gBAAA,CAAA,qBAAA,CAAsB,WAAtB,EAAmC,MAAnC,CAAf;AACA,SAAK,OAAL,GAAe,gBAAA,CAAA,qBAAA,CAAsB,WAAtB,EAAmC,MAAnC,CAAf;AACA,SAAK,UAAL,GAAkB,MAAlB;AACD,GA7ByG,CA+B1G;;;AACY,SAAL,KAAK,CACV,WADU,EAEV,KAFU,EAGV,IAHU,EAGoC;AAE9C,WAAO,KAAK,OAAA,CAAA,UAAA,CAAW,mBAAX,EAAgC,IAAI,CAAC,QAArC,CAAL,EAAqD,WAArD,EAAkE,KAAlE,EAAyE,IAAzE,CAAP;AACD;;AAED,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,WAAO,IAAI,gBAAA,CAAA,sBAAJ,CAA2B,IAA3B,EAAiC,IAAjC,CAAP;AACD;;AAED,EAAA,SAAS,CAAC,IAAD,EAAa,KAAb,EAA4B;AACnC;AACA;AACA,WAAO,IAAI,gBAAA,CAAA,wBAAJ,CAA6B,IAA7B,EAAmC,IAAnC,EAAyC,KAAzC,CAAP;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAA0C;AAClD,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,EAAA,YAAY,CAAC,IAAD,EAA4C;AACtD,IAAA,IAAI,CAAC,MAAL;AACA,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,EAAA,aAAa,CAAC,IAAD,EAA4C;AACvD,WAAO,IAAI,CAAC,KAAZ;AACD,GA7DyG,CA+D1G;;;AAEA,EAAA,oBAAoB,CAAC,KAAD,EAA8B;AAChD,WAAO,gBAAA,CAAA,kCAAA,CAAmC,KAAK,WAAxC,EAAqD,KAAK,MAA1D,EAAkE,KAAlE,CAAP;AACD;;AAED,EAAA,sBAAsB,CAAC,MAAD,EAAoB,MAApB,EAAoC,KAApC,EAAiE;AACrF,WAAO,gBAAA,CAAA,oCAAA,CAAqC,KAAK,WAA1C,EAAuD,KAAK,MAA5D,EAAoE,MAApE,EAA4E,MAA5E,EAAoF,KAApF,CAAP;AACD;;AAED,EAAA,0BAA0B,CAAC,IAAD,EAAkB,KAAlB,EAAiC,GAAjC,EAA4C;AACpE,WAAO,gBAAA,CAAA,wCAAA,CAAyC,KAAK,WAA9C,EAA2D,IAA3D,EAAiE,KAAjE,EAAwE,GAAxE,EAA6E,IAA7E,CAAP;AACD;;AAED,EAAA,mBAAmB,CAAC,IAAD,EAAW;AAC5B,WAAO,gBAAA,CAAA,iCAAA,CAAkC,KAAK,WAAvC,EAAoD,KAAK,MAAzD,EAAiE,KAAK,KAAtE,EAA6E,IAA7E,CAAP;AACD;;AAED,EAAA,qBAAqB,CAAC,MAAD,EAAoB,MAApB,EAAoC,IAApC,EAA8C;AACjE,WAAO,gBAAA,CAAA,mCAAA,CAAoC,KAAK,WAAzC,EAAsD,KAAK,MAA3D,EAAmE,KAAK,KAAxE,EAA+E,IAA/E,EAAqF,MAArF,EAA6F,MAA7F,CAAP;AACD;;AAED,EAAA,yBAAyB,CAAC,IAAD,EAAkB,KAAlB,EAAiC,GAAjC,EAA4C;AACnE,WAAO,gBAAA,CAAA,uCAAA,CAAwC,KAAK,WAA7C,EAA0D,KAAK,KAA/D,EAAsE,IAAtE,EAA4E,KAA5E,EAAmF,GAAnF,EAAwF,IAAxF,CAAP;AACD,GAvFyG,CAyF1G;;;AAEA,EAAA,cAAc,GAAA;AACZ,WAAO,KAAK,MAAZ;AACD;;AAED,EAAA,cAAc,GAAA,CACZ;AACD;;AAED,EAAA,kBAAkB,CAAC,IAAD,EAAW;AAC3B,WAAO,IAAP;AACD;;AAED,EAAA,kBAAkB,CAAC,QAAD,EAAiB,UAAjB,EAAiC;AACjD,WAAO,UAAP;AACD,GAzGyG,CA2G1G;;;AAEU,EAAA,QAAQ,CAAC,KAAD,EAA8B;AAC9C,WAAO,gBAAA,CAAA,4BAAA,CAA6B,KAAK,WAAlC,EAA+C,KAAK,MAApD,EAA4D,KAA5D,CAAP;AACD;;AA/GyG;;AAJ5G,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass VectorCompositeType extends array_1.ArrayType {\n    constructor(elementType, length, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.length = length;\n        this.itemsPerChunk = 1;\n        this.isList = false;\n        this.isViewMutable = true;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (length === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n        this.maxChunkCount = length;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = this.chunkDepth;\n        this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n        this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n        this.defaultLen = length;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength() {\n        return this.length;\n    }\n    tree_setLength() {\n        // Vector's length is immutable, ignore this call\n    }\n    tree_getChunksNode(node) {\n        return node;\n    }\n    tree_setChunksNode(rootNode, chunksNode) {\n        return chunksNode;\n    }\n    // Merkleization\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n    }\n}\nexports.VectorCompositeType = VectorCompositeType;\n//# sourceMappingURL=vectorComposite.js.map"]},"metadata":{},"sourceType":"script"}