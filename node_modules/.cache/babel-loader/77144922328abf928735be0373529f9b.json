{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // HMAC (RFC 2104)\n\n\nclass HMAC extends utils_js_1.Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n\n    _assert_js_1.default.hash(hash);\n\n    const key = (0, utils_js_1.toBytes)(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen); // blockLen can be bigger than outputLen\n\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n\n    this.iHash.update(pad); // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n\n    this.oHash = hash.create(); // Undo internal XOR && apply outer XOR\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n\n  update(buf) {\n    _assert_js_1.default.exists(this);\n\n    this.iHash.update(buf);\n    return this;\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n\n    _assert_js_1.default.bytes(out, this.outputLen);\n\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\n\n\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\n\nexports.hmac = hmac;\n\nexports.hmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"sources":["src/hmac.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map"]},"metadata":{},"sourceType":"script"}