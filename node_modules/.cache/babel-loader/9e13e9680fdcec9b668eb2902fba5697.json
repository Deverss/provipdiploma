{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaWalletAdapter extends BaseSolanaAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId,\n      rpcTarget,\n      blockExplorerUrl: blockExplorer,\n      displayName,\n      tickerName,\n      ticker,\n      logo: \"\"\n    };\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    await super.disconnect();\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init); // await this.solanaProvider?.addChain(chainConfig);\n\n    this.addChainConfig(chainConfig);\n  }\n\n  async switchChain(params) {\n    var _this$torusInstance;\n\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\"\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n\n}\n\nexport { SolanaWalletAdapter };","map":{"version":3,"sources":["../src/solanaWalletAdapter.ts"],"names":["SolanaWalletAdapter","BaseSolanaAdapter","WALLET_ADAPTERS","TORUS_SOLANA","_defineProperty","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","CONNECTED","solanaProvider","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","blockExplorerUrl","logo","torusInstance","Torus","log","debug","showTorusButton","TorusInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","code","setProvider","reconnected","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseSolanaAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"torusInstance\", null);\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n    _defineProperty(this, \"initParams\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    _defineProperty(this, \"solanaProvider\", null);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId,\n      rpcTarget,\n      blockExplorerUrl: blockExplorer,\n      displayName,\n      tickerName,\n      ticker,\n      logo: \"\"\n    };\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$torusInstance;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\"\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}