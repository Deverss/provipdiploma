{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeViewDU = void 0;\n\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\n\n\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    /** Cached BitArray instance computed only on demand */\n\n    this._bitArray = null;\n  }\n\n  get node() {\n    return this._rootNode;\n  }\n\n  get cache() {\n    return;\n  }\n\n  commit() {\n    if (this._bitArray !== null) {\n      this._rootNode = this.type.value_toTree(this._bitArray);\n    }\n  } // Wrapped API from BitArray\n\n  /** @see BitArray.uint8Array */\n\n\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n\n\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n\n\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n\n\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit);\n  }\n  /** @see BitArray.mergeOrWith */\n\n\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n\n\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n\n\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n\n\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n\n\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n  /** Lazily computed bitArray instance */\n\n\n  get bitArray() {\n    if (this._bitArray === null) {\n      this._bitArray = this.type.tree_toValue(this._rootNode);\n    }\n\n    return this._bitArray;\n  }\n\n  clearCache() {\n    this._bitArray = null;\n  }\n\n}\n\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;","map":{"version":3,"sources":["../../src/viewDU/bitArray.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,kBAAb,SAAwC,UAAA,CAAA,UAAxC,CAA6F;AAI3F,EAAA,WAAA,CAAqB,IAArB,EAAgF,SAAhF,EAA+F;AAC7F;AADmB,SAAA,IAAA,GAAA,IAAA;AAA2D,SAAA,SAAA,GAAA,SAAA;AAHhF;;AACQ,SAAA,SAAA,GAA6B,IAA7B;AAIP;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,SAAZ;AACD;;AAEQ,MAAL,KAAK,GAAA;AACP;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,WAAK,SAAL,GAAiB,KAAK,IAAL,CAAU,YAAV,CAAuB,KAAK,SAA5B,CAAjB;AACD;AACF,GApB0F,CAsB3F;;AAEA;;;AACc,MAAV,UAAU,GAAA;AACZ,WAAO,KAAK,QAAL,CAAc,UAArB;AACD;AAED;;;AACU,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,QAAL,CAAc,MAArB;AACD;AAED;;;AACA,EAAA,GAAG,CAAC,QAAD,EAAiB;AAClB,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,CAAP;AACD;AAED;;;AACA,EAAA,GAAG,CAAC,QAAD,EAAmB,GAAnB,EAA+B;AAChC,SAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,GAA5B;AACD;AAED;;;AACA,EAAA,WAAW,CAAC,SAAD,EAAoB;AAC7B,SAAK,QAAL,CAAc,WAAd,CAA0B,SAA1B;AACD;AAED;;;AACA,EAAA,eAAe,CAAI,MAAJ,EAAe;AAC5B,WAAO,KAAK,QAAL,CAAc,eAAd,CAA8B,MAA9B,CAAP;AACD;AAED;;;AACA,EAAA,iBAAiB,GAAA;AACf,WAAO,KAAK,QAAL,CAAc,iBAAd,EAAP;AACD;AAED;;;AACA,EAAA,gBAAgB,GAAA;AACd,WAAO,KAAK,QAAL,CAAc,gBAAd,EAAP;AACD;AAED;;;AACA,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,QAAL,CAAc,WAAd,EAAP;AACD;AAED;;;AACoB,MAAR,QAAQ,GAAA;AAClB,QAAI,KAAK,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,WAAK,SAAL,GAAiB,KAAK,IAAL,CAAU,YAAV,CAAuB,KAAK,SAA5B,CAAjB;AACD;;AACD,WAAO,KAAK,SAAZ;AACD;;AAES,EAAA,UAAU,GAAA;AAClB,SAAK,SAAL,GAAiB,IAAjB;AACD;;AA/E0F;;AAA7F,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeViewDU = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        /** Cached BitArray instance computed only on demand */\n        this._bitArray = null;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this._bitArray !== null) {\n            this._rootNode = this.type.value_toTree(this._bitArray);\n        }\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n    /** Lazily computed bitArray instance */\n    get bitArray() {\n        if (this._bitArray === null) {\n            this._bitArray = this.type.tree_toValue(this._rootNode);\n        }\n        return this._bitArray;\n    }\n    clearCache() {\n        this._bitArray = null;\n    }\n}\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;\n//# sourceMappingURL=bitArray.js.map"]},"metadata":{},"sourceType":"script"}