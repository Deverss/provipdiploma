{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\n\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["noop","undefined","SYN","ACK","BRK","Duplex","constructor","name","target","targetWindow","window","targetOrigin","objectMode","_defineProperty","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","EventEmitter","type","doError","events","_events","error","er","len","listeners","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","SerializableError","done","createStreamMiddleware","idMap","readNoop","SafeEventEmitter","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","randomId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","_runReturnHandlers","_checkForCompletion","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_error","mergeMiddleware","engine","forEach","createEngineStream","opts","on","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","Substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","BasePostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_init\", void 0);\n    _defineProperty(this, \"_haveSyn\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    _defineProperty(this, \"_target\", void 0);\n    _defineProperty(this, \"_targetWindow\", void 0);\n    _defineProperty(this, \"_targetOrigin\", void 0);\n    _defineProperty(this, \"_onMessage\", void 0);\n    _defineProperty(this, \"_synIntervalId\", void 0);\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n  _break() {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n  _handShake() {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n  onMessage(event) {\n    const message = event.data;\n    // validate message\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n    this._onData(message.data);\n  }\n  _read() {\n    return undefined;\n  }\n  _write(data, _, cb) {\n    this._postMessage(data);\n    cb();\n  }\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n    // If there is no 'error' event listener then throw.\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n    if (handler === undefined) {\n      return false;\n    }\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n    return true;\n  }\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n      next(done => {\n        const {\n          error\n        } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n  function readNoop() {\n    return false;\n  }\n  const events = new SafeEventEmitter();\n  function processResponse(res) {\n    const context = idMap[res.id];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n    delete idMap[res.id];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n  function processMessage(res, _encoding, cb) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false;\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n    _defineProperty(this, \"_middleware\", void 0);\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n    const req = _objectSpread$1({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const {\n    engine\n  } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream;\n  function read() {\n    return undefined;\n  }\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  });\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n    _defineProperty(this, \"_parent\", void 0);\n    _defineProperty(this, \"_name\", void 0);\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n    callback();\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n    _defineProperty(this, \"_substreams\", void 0);\n    _defineProperty(this, \"getStream\", void 0);\n    this._substreams = {};\n  }\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // create substream\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream;\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  }\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n  _read() {\n    return undefined;\n  }\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n    return callback();\n  }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          }\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}